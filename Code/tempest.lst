HXA65 v0.201 Listing File - 6502 Instruction Set - Wed Mar 05 19:07:41 2025

*** Object Code Listing

                   ;-------------------------------------------------------
                   ----------------------
                   ;
                   ; Tempest (c) 1981 Atari Corporation - Original Game 
                   author Dave Theurer
                   ;
                   ; Code analysis by Davepl
                   ;
                   ; This code analysis is purely archaeological; 
                   commercial use prohibited.
                   ;
                   ; You can and should assume large portions of the 
                   comments and naming of
                   ; variables within is incorrect.  Absolutely no 
                   warranty nor suitability
                   ; for any purpose is implied.  Running this or 
                   derivitive code in a real
                   ; Tempest machine may cause hardware damage, personal 
                   injury, or death.
                   ; If I have seen further, it's becasue I stood on the 
                   shoulders of giants
                   ; such as Josh McCormick and der Mouse (whoever that 
                   is!) that got the
                   ; ball rolling with their original hacking.  Much 
                   credit is due to them!
                   ; 
                   ;
                   ; Orientation:   Vertical
                   ; Type:          Color Vector
                   ; CRT:           Color, 19-inc Wells Gardner 19K6100 
                   (most machines)
                   ; CPU:           6502A @ 1.5MHz
                   ; ROM:           24K
                   ; RAM:           6K
                   ;
                   ;-------------------------------------------------------
                   ----------------------
                   ; As of 1-22-2017 this code assmebles with the HXA 
                   assembler from:
                   ;   http://home.earthlink.net/~hxa/
                   ; As of 6-20-020 that project is now located on github 
                   and works ok:
                   ;   
                   https://github.com/AntonTreuenfels/HXA_Cross_Assembler
                   ;
                   ; It will produce the original factory ROM image as a 
                   single OBJ that can be
                   ; split into 2K sections to burn onto EPROMs. Any 
                   reduction in code
                   ; size is automatically padded to fill the full 20K so 
                   the 6502 vectors wind
                   ; up in the right place (but only because the p1 ROM is 
                   mirrored up at FFFx).
                   ; Please ensure you have the legal rights to do so 
                   before making any ROM chips.
                   ;
                   ; 136002-133.d1  // 0x9000
                   ; 136002-134.f1  // 0xA000
                   ; 136002-235.j1  // 0xB000
                   ; 136002-136.lm1 // 0xC000
                   ; 136002-237.p1  // 0xD000 and loaded again at 0xF000
                   ;
                   ; There is a vector ROM (136002-138.np3) that is loaded 
                   at 0x3000 which is
                   ; not part of this project.
                   ;-------------------------------------------------------
                   ----------------------
                   ;
                   ;    HEX        R/W   D7 D6 D5 D4 D3 D2 D2 D0  function
                   ;    0000-07FF  R/W   D  D  D  D  D  D  D  D   program 
                   ram (2K)
                   ;    0800-080F   W                D  D  D  D   Colour 
                   ram
                   ;
                   ;    0C00        R                         D   Right 
                   coin sw
                   ;    0C00        R                      D      Center 
                   coin sw
                   ;    0C00        R                   D         Left 
                   coin sw
                   ;    0C00        R                D            Slam sw
                   ;    0C00        R             D               Self 
                   test sw
                   ;    0C00        R          D                  
                   Diagnostic step sw
                   ;    0C00        R       D                     Halt
                   ;    0C00        R    D                        3kHz ??
                   ;    0D00        R    D  D  D  D  D  D  D  D   option 
                   switches
                   ;    0E00        R    D  D  D  D  D  D  D  D   option 
                   switches
                   ;
                   ;    2000-2FFF  R/W   D  D  D  D  D  D  D  D   Vector 
                   Ram (4K)
                   ;    3000-3FFF   R    D  D  D  D  D  D  D  D   Vector 
                   Rom (4K)
                   ;
                   ;    4000        W                         D   Right 
                   coin counter
                   ;    4000        W                      D      left  
                   coin counter
                   ;    4000        W                D            Video 
                   invert - x
                   ;    4000        W             D               Video 
                   invert - y
                   ;    4800        W                             Vector 
                   generator GO
                   ;    5000        W                             WD clear
                   ;    5800        W                             Vect gen 
                   reset
                   ;
                   ;    6000-603F   W    D  D  D  D  D  D  D  D   EAROM 
                   write
                   ;    6040        W    D  D  D  D  D  D  D  D   EAROM 
                   control
                   ;    6040        R    D                        Mathbox 
                   status
                   ;    6050        R    D  D  D  D  D  D  D  D   EAROM 
                   read
                   ;
                   ;    6060        R    D  D  D  D  D  D  D  D   Mathbox 
                   read
                   ;    6070        R    D  D  D  D  D  D  D  D   Mathbox 
                   read
                   ;    6080-609F   W    D  D  D  D  D  D  D  D   Mathbox 
                   start
                   ;
                   ;    60C0-60CF  R/W   D  D  D  D  D  D  D  D   Custom 
                   audio chip 1
                   ;    60D0-60DF  R/W   D  D  D  D  D  D  D  D   Custom 
                   audio chip 2
                   ;
                   ;    60E0        R                         D   one 
                   player start LED
                   ;    60E0        R                      D      two 
                   player start LED
                   ;    60E0        R                   D         FLIP
                   ;
                   ;    9000-DFFF  R     D  D  D  D  D  D  D  D   Program 
                   ROM (20K)
                   ;
                   ;-------------------------------------------------------
                   ----------------------
                   ;
                   ;    GAME OPTIONS:
                   ;    (8-position switch at L12 on Analog 
                   Vector-Generator PCB)
                   ;
                   ;    1   2   3   4   5   6   7   8   Meaning
                   ;    
                   --------------------------------------------------------
                   -----------------
                   ;    Off Off                         2 lives per game
                   ;    On  On                          3 lives per game
                   ;    On  Off                         4 lives per game
                   ;    Off On                          5 lives per game
                   ;            On  On  Off             Bonus life every 
                   10000 pts
                   ;            On  On  On              Bonus life every 
                   20000 pts
                   ;            On  Off On              Bonus life every 
                   30000 pts
                   ;            On  Off Off             Bonus life every 
                   40000 pts
                   ;            Off On  On              Bonus life every 
                   50000 pts
                   ;            Off On  Off             Bonus life every 
                   60000 pts
                   ;            Off Off On              Bonus life every 
                   70000 pts
                   ;            Off Off Off             No bonus lives
                   ;                        On  On      English
                   ;                        On  Off     French
                   ;                        Off On      German
                   ;                        Off Off     Spanish
                   ;                                On  1-credit minimum
                   ;                                Off 2-credit minimum
                   ;
                   ;
                   ;    GAME OPTIONS:
                   ;    (4-position switch at D/E2 on Math Box PCB)
                   ;
                   ;    1   2   3   4                   Meaning
                   ;    
                   --------------------------------------------------------
                   -----------------
                   ;        Off                         Minimum rating 
                   range: 1, 3, 5, 7, 9
                   ;        On                          Minimum rating 
                   range tied to high score
                   ;            Off Off                 Medium difficulty 
                   (see notes)
                   ;            Off On                  Easy difficulty 
                   (see notes)
                   ;            On  Off                 Hard difficulty 
                   (see notes)
                   ;            On  On                  Medium difficulty 
                   (see notes)
                   ;
                   ;
                   ;    PRICING OPTIONS:
                   ;    (8-position switch at N13 on Analog 
                   Vector-Generator PCB)
                   ;
                   ;    1   2   3   4   5   6   7   8   Meaning
                   ;    
                   --------------------------------------------------------
                   -----------------
                   ;    On  On  On                      No bonus coins
                   ;    On  On  Off                     For every 2 coins, 
                   game adds 1 more coin
                   ;    On  Off On                      For every 4 coins, 
                   game adds 1 more coin
                   ;    On  Off Off                     For every 4 coins, 
                   game adds 2 more coins
                   ;    Off On  On                      For every 5 coins, 
                   game adds 1 more coin
                   ;    Off On  Off                     For every 3 coins, 
                   game adds 1 more coin
                   ;    On  Off                 Off On  Demonstration Mode 
                   (see notes)
                   ;    Off Off                 Off On  
                   Demonstration-Freeze Mode (see notes)
                   ;                On                  Left coin mech * 1
                   ;                Off                 Left coin mech * 2
                   ;                    On  On          Right coin mech * 1
                   ;                    On  Off         Right coin mech * 4
                   ;                    Off On          Right coin mech * 5
                   ;                    Off Off         Right coin mech * 6
                   ;                            Off On  Free Play
                   ;                            Off Off 1 coin 2 plays
                   ;                            On  On  1 coin 1 play
                   ;                            On  Off 2 coins 1 play
                   ;
                   ;-------------------------------------------------------
                   ----------------------


                   .cpu 6502
                   .OBJFILE <tempest.obj>
                   .LISTON
                   .LISTFILE <tempest.lst>

                   ;-------------------------------------------------------
                   ----------------------
                   ; BUILD CUSTOMIZATIONS
                   ;-------------------------------------------------------
                   ----------------------
                   ;
                   ; The following build definitions modify how the ROMs 
                   are built.  Setting all
                   ; to 0 will generate a completely original ROM set.
                   ;
                   ; All of thge build flags are only set if not 
                   previously defined.  This allows
                   ; us to have a file called 'original.asm' that defines 
                   them all to 0 before
                   ; including this main source file and in turn produces 
                   an original ROM set.
                   ;
                   ;-------------------------------------------------------
                   ----------------------

                   .ifndef DAVEPL_MSG
 0000  00 00 00 00 DAVEPL_MSG = 0                          ; If set to 1, 
                   proof-of-life customization
                   .endif

                   .ifndef REMOVE_SELFTEST
 0000  00 00 00 00 REMOVE_SELFTEST  = 0                    ; Set to 1 to 
                   remove self-test code in
                   .endif                                  ;   order to 
                   make more space           

                   .ifndef OPTIMIZE
 0000  00 00 00 00 OPTIMIZE         = 0                   ; Prune dead 
                   code and tables
                   .endif

                   .ifndef ALT_START_TABLE
 0000  00 00 00 00 ALT_START_TABLE  = 0                    ; Set to 1 and 
                   you get starting levels on
                   .endif                                  ;   each color 
                   and then many in the black
                                                           ;   and green 
                   rather than all down low
                                                           ;   Requires 
                   room, so remove selftest, etc
                   .ifndef REMOVE_LANGUAGES
 0000  00 00 00 00 REMOVE_LANGUAGES = 0                    ; Remove 
                   non-English text to save space
                   .endif

                   .ifndef ADD_LEVEL
 0000  00 00 00 00 ADD_LEVEL        = 0                    ; Adds purple 
                   levels above green.  Works OK
                   .endif                                  ;   but level 
                   display is alawys still 2 digit

                   ;-------------------------------------------------------
                   ----------------------

 0000  28 00 00 00 MAX_CREDITS         = 40                ; Credit limit 
                   for game

                   .if !ADD_LEVEL
 0000  62 00 00 00   HIGHEST_LEVEL     = 98                ; After that, 
                   levels are randomized
 0000  5F 00 00 00   LAST_SHAPE_LEVEL  = 95                ; Last level 
                   part of a group of 16
 0000  63 00 00 00   MAX_LEVEL         = 99                ; Max possible 
                   level
 0000  63 00 00 00   LAST_GREEN        = 99                ; Last green 
                   level
                   .else
                   .endif

 0000  10 00 00 00 TOP_OF_TUNNEL       = $10               ; Constant used 
                   to indicate top of tunnel
 0000  F0 00 00 00 END_OF_TUNNEL       = $F0               ; Constant used 
                   to indicate made it to end
 0000  02 00 00 00 MAX_ZAP_USES        = 2                 ; Number of 
                   superzap uses per level
 0000  04 00 00 00 MAX_ENEMY_SHOTS     = 4                 ; Most enemy 
                   shots onscreen at once
 0000  07 00 00 00 MAX_ACTIVE_ENEMIES  = 7                 ; Most enemies 
                   onscreen at once
 0000  08 00 00 00 MAX_PLAYER_SHOTS    = 8                 ; Max onscreen 
                   shots from player

 0000  0C 00 00 00 MAX_TOTAL_SHOTS     = MAX_PLAYER_SHOTS + MAX_ENEMY_SHOTS

 0000  07 00 00 00 ENEMY_TYPE_MASK     = %00000111         ; Bottom 3 bits 
                   indicate which enemy
 0000  00 00 00 00 ENEMY_TYPE_FLIPPER  = 0
 0000  01 00 00 00 ENEMY_TYPE_PULSAR   = 1
 0000  02 00 00 00 ENEMY_TYPE_TANKER   = 2
 0000  03 00 00 00 ENEMY_TYPE_SPIKER   = 3
 0000  04 00 00 00 ENEMY_TYPE_FUSEBALL = 4

                   ;-------------------------------------------------------
                   ----------------------
                   ; Game States
                   ;-------------------------------------------------------
                   ----------------------
                   ; When in Self-Test:
                   ;
                   ; $02 = first selftest screen (config bits, spinner 
                   line)
                   ; $04 = second selftest screen (diagonal grid, line of 
                   characters)
                   ; $06 = third selftest screen (crosshair, shrinking 
                   rectangle)
                   ; $08 = fourth selftest screen (coloured lines)
                   ; $0a = fifth selftest screen, grid with colour 
                   depending on spinner
                   ; $0c = sixth selftest screen, blank rectangle
                   ; 
                   ; Not in selftest as follows:
                   ;-------------------------------------------------------
                   ----------------------

 0000  00 00 00 00 GS_GameStartup          = $00       ; $00 = entered 
                   briefly at game startup
 0000  02 00 00 00 GS_LevelStartup         = $02       ; $02 = entered 
                   briefly at the beginning of first level of a game
 0000  04 00 00 00 GS_Playing              = $04       ; $04 = playing 
                   (including attract mode)
 0000  06 00 00 00 GS_Death                = $06       ; $06 = entered 
                   briefly on player death (game-ending or not)
 0000  08 00 00 00 GS_LevelBegin           = $08       ; $08 = set briefly 
                   at the beginning of each level?
 0000  0A 00 00 00 GS_Delay                = $0A       ; $0a = eg AVOID 
                   SPIKES: $1e->$04, $0a->gamestate, 
                   $20->state_after_delay, $80->$0123
                                                       ; $0c = unused? 
                   (jump table holds $0000)
 0000  0E 00 00 00 GS_ZoomOffEnd           = $0E       ; $0e = entered 
                   briefly when zooming off the end of a level
 0000  10 00 00 00 GS_Unknown10            = $10       
 0000  12 00 00 00 GS_EnterInitials        = $12       ; $12 = entering 
                   initials
 0000  14 00 00 00 GS_Unknown14            = $14
 0000  16 00 00 00 GS_LevelSelect          = $16       ; $16 = starting 
                   level selection screen
 0000  18 00 00 00 GS_ZoomOntoNew          = $18       ; $18 = zooming new 
                   level in
 0000  1A 00 00 00 GS_Unknown1A            = $1A       ; $1a = unknown
 0000  1C 00 00 00 GS_Unknown1C            = $1C       ; $1c = unknown
 0000  1E 00 00 00 GS_DelayThenPlay        = $1E       ; $1e = Brief pause,
                    then switch to Playing mode
 0000  20 00 00 00 GS_ZoomingDown          = $20       ; $20 = descending 
                   down tube at level end
 0000  22 00 00 00 GS_ServiceDisplay       = $22       ; $22 = 
                   non-selftest service mode display
 0000  24 00 00 00 GS_HighScoreExplosion   = $24       ; $24 = high-score 
                   explosion


                   ; Color Definitions.  A "sparkle" bit can be used in 
                   the high nibble (and which is subsequently
                   ; parsed out to the bytes at x0808-0x80F), by adding it 
                   to the base color.  I do not yet know
                   ; what adding $40 to the MSB does... maybe less 
                   sparkly?  It sounds like X flip according to
                   ; MAME, but that doesn't make sense in Tempest.  My 
                   guess (davepl) is it's a Space Duel thing that
                   ; the emulator supports but that the real hardware 
                   didn't yet.
                   ;
                   ; Approximate color formula is: 
                   ;
                   ; bit3 = (~data >> 3) & 1
                   ; bit2 = (~data >> 2) & 1
                   ; bit1 = (~data >> 1) & 1
                   ; bit0 = (~data >> 0) & 1

                   ; r = bit1 * 0xf3 + bit0 * 0x0c;
                   ; b = bit2 * 0xf3;
                   ; g = bit3 * 0xf3;

                   ;                                        Data    GBRr   
                       (Where R = major red, r = minor red)
 0000  00 00 00 00 White                   = $00           ;0000    1111
 0000  03 00 00 00 Cyan                    = $03           ;0011    1100
 0000  04 00 00 00 Yellow                  = $04           ;0010    1101
 0000  07 00 00 00 Green                   = $07           ;0111    1000
 0000  08 00 00 00 Purple                  = $08           ;1000    0111
 0000  0B 00 00 00 Blue                    = $0B           ;1011    0100
 0000  0C 00 00 00 Red                     = $0C           ;1100    0011
 0000  0F 00 00 00 Black                   = $0F           ;1111    0000
 0000  C0 00 00 00 Sparkle                 = $C0
 0000  40 00 00 00 Unk04                   = $40

                   ;**** Zero-Page Definitions

 0000  00 00 00 00 .org $0000

                   ; I could have made these ZP all EQU symbols but I felt 
                   it was more likely the original
                   ; source would have been symbol, using data definition 
                   and not hardcoded addresses.

 0000  01 00 00 00 gamestate               .ds 1           ; $00
 0001  01 00 00 00 unknown_state           .ds 1           ; $01
 0002  01 00 00 00 state_after_delay       .ds 1           ; $02
 0003  01 00 00 00 timectr                 .ds 1           ; $03       
                   Regularly incrementing time based counter
 0004  01 00 00 00 countdown_timer         .ds 1           ; $04
 0005  01 00 00 00 game_mode               .ds 1           ; $05       
                   High bit seems to indicate attract mode
 0006  01 00 00 00 credits                 .ds 1           ; $06
 0007  01 00 00 00                         .ds 1           ; $07
 0008  01 00 00 00 zap_fire_shadow         .ds 1           ; $08
 0009  01 00 00 00 coinage_shadow          .ds 1           ; $09       
                   Shadow of optsw1.  Note value is XORed with $02 before 
                   storing
 000A  01 00 00 00 optsw2_shadow           .ds 1           ; $0A       
                   Soft shadow of optsw2

 000B  0B 00 00 00                         .ds 11

 0016  01 00 00 00 coin_string             .ds 1           ; $16
 0017  01 00 00 00 uncredited              .ds 1           ; $17       
                   Soft shadow of optsw2

 0018  14 00 00 00                         .ds 20

 002C  01 00 00 00 zpPtrL                  .ds 1           ; $2A
 002D  01 00 00 00 zpPtrM                  .ds 1           ; $2B
 002E  01 00 00 00 zpPtrH                  .ds 1           ; $2C

 002F  0E 00 00 00                         .ds 14

 003D  01 00 00 00 curplayer               .ds 1           ; $3D
 003E  01 00 00 00 twoplayer               .ds 1           ; $3E
 003F  01 00 00 00                         .ds 1           ; $3F
 0040  01 00 00 00 p1_score_l              .ds 1           ; $40
 0041  01 00 00 00 p1_score_m              .ds 1           ; $41
 0042  01 00 00 00 p1_score_h              .ds 1           ; $42
 0043  01 00 00 00 p2_score_l              .ds 1           ; $43
 0044  01 00 00 00 p2_score_m              .ds 1           ; $44
 0045  01 00 00 00 p2_score_h              .ds 1           ; $45
 0046  01 00 00 00 p1_level                .ds 1           ; $46
 0047  01 00 00 00 p2_level                .ds 1           ; $47
 0048  01 00 00 00 p1_lives                .ds 1           ; $48
 0049  01 00 00 00 p2_lives                .ds 1           ; $49
 004A  01 00 00 00                         .ds 1           ; $4A
 004B  01 00 00 00                         .ds 1           ; $4B

                                           ; zap_fire_tmp1
                                           ; 
                                           ; Bit positions:
                                           ; $08 = zap
                                           ; $10 = fire
                                           ; $20 = start 1
                                           ; $40 = start 2
                                           ; $80 = unknown (cleared at 
                   various points)

 004C  01 00 00 00 zap_fire_tmp1           .ds 1           ; $4c
 004D  01 00 00 00 zap_fire_debounce       .ds 1           ; $4d
 004E  01 00 00 00 zap_fire_new            .ds 1           ; $4e
 004F  01 00 00 00 zap_fire_tmp2           .ds 1           ; $4f
 0050  09 00 00 00                         .ds 9           ; $50-58
 0059  01 00 00 00 fscale                  .ds 1           ; $59       
                   copied from lev_fscale[]/lev_fscale2[]
 005A  06 00 00 00                         .ds 6
 0060  01 00 00 00 y3d                     .ds 1           ; $60       
                   copied from lev_y3d[]
 0061  11 00 00 00                         .ds 17          ; $61-71
 0072  01 00 00 00 curscale                .ds 1           ; $72
 0073  01 00 00 00 draw_z                  .ds 1           ; $73
 0074  01 00 00 00 vidptr_l                .ds 1           ; $74
 0075  01 00 00 00 vidptr_h                .ds 1           ; $75
 0076  23 00 00 00                         .ds 35
 0099  01 00 00 00 rgr_pt_inx              .ds 1           ; $99
 009A  04 00 00 00                         .ds 4
 009E  01 00 00 00 curcolor                .ds 1
 009F  01 00 00 00 curlevel                .ds 1           ; $9F
 00A0  06 00 00 00                         .ds 6
 00A6  01 00 00 00 EnemyShotCount          .ds 1           ; $A6
 00A7  05 00 00 00                         .ds 5
 00AC  01 00 00 00 strtbl                  .ds 1           ; $AC
 00AD  05 00 00 00                         .ds 5
 00B2  01 00 00 00 pulsar_fliprate         .ds 1           ; $B2       
                   Number of movement ticks between pulsar flips


                   ; Ratio by which flipper flips at top-of-tube are 
                   accelerated relative to
                   ; flipper flips in the tube.  If this number is 2, they 
                   are twice as fast,
                   ; etc.  See $a141 for more.

 00B3  01 00 00 00 flip_top_accel          .ds 1           ; $B3
 00B4  01 00 00 00                         .ds 1
 00B5  01 00 00 00 copyr_cksum             .ds 1           ; $B5
 00B6  01 00 00 00 copyr_vid_loc           .ds 1           ; $B6
 00B7  06 00 00 00                         .ds 6   

                   ; Pointer to RAM version of current EAROM block.  See 
                   $de{64,9a,9c,d8,ee}.

 00BD  01 00 00 00 earom_memptr            .ds 1           ; $BD
 00BE  42 00 00 00                         .ds 66

                   ;--- Page One 
                   --------------------------------------------------------
                   -------------------
 0100  00 01 00 00 .org $0100
                   ;-------------------------------------------------------
                   ---------------------------------
 0100  02 00 00 00                         .ds 2
 0102  01 00 00 00 p1_startchoice          .ds 1           ; $0102
 0103  01 00 00 00 p2_startchoice          .ds 1           ; $0103
 0104  01 00 00 00 zoomspd_lsb             .ds 1           ; $0104
 0105  01 00 00 00 zoomspd_msb             .ds 1           ; $0105
 0106  01 00 00 00                         .ds 1
 0107  01 00 00 00 along_lsb               .ds 1           ; $0107
 0108  01 00 00 00 NumEnemiesInTube        .ds 1           ; $0108
 0109  01 00 00 00 NumEnemiesOnTop         .ds 1           ; $0109
 010A  01 00 00 00 pcode_run               .ds 1           ; $010A
 010B  01 00 00 00 pcode_pc                .ds 1           ; $010B

 0000  11 01 00 00 open_level          = $0111     ; $00 if current level 
                   closed, $ff if open after remap[] has been applied
 0000  12 01 00 00 curtube             = $0112
 0000  17 01 00 00 flagbits            = $0117
 0000  18 01 00 00 enm_shotspd_msb     = $0118

                   ; Shot holdoff time.  After firing, an enemy cannot 
                   fire until at least
                   ; this many ticks have passed.

 0000  19 01 00 00 shot_holdoff        = $0119
 0000  1A 01 00 00 MaxEnemyShots       = $011A     ; Maximum number of 
                   enemy shots less one
 0000  1B 01 00 00 copyr_vid_cksum1    = $011B
 0000  1C 01 00 00 MaxActiveEnemies    = $011C

 0000  20 01 00 00 enm_shotspd_lsb     = $0120

 0000  25 01 00 00 zap_running         = $0125

                   ; Minimum enemy counts for each enement type 
                   (calculated)

 0000  29 01 00 00 min_enemy_by_type   = $0129
 0000  29 01 00 00 min_flippers        = $0129     ; flipper.  1-4:1, 
                   5-99:0
 0000  2A 01 00 00 min_pulsars         = $012A     ; pulsar.   1-16:0, 
                   17-32:3, 33-99:1
 0000  2B 01 00 00 min_tankers         = $012B     ; tanker.   1-2:0, 3:1, 
                   4:0, 5-99:1
 0000  2C 01 00 00 min_spikers         = $012C     ; spiker.   1-3:0, 4:1, 
                   5-16:2, 17-19:0, 20-99:1
 0000  2D 01 00 00 min_fuseballs       = $012D     ; fuseball. 1 except 
                   1-10, 17-19, 26, where 0

                   ; Indexed by enemy type.  Max number of a given type in 
                   the tube 

 0000  2E 01 00 00 max_enemy_by_type   = $012E
 0000  2E 01 00 00 max_flippers        = $012E
 0000  2F 01 00 00 max_pulsars         = $012F
 0000  30 01 00 00 max_tankers         = $0130
 0000  31 01 00 00 max_spikers         = $0131
 0000  32 01 00 00 max_fuseballs       = $0132

 0000  35 01 00 00 PlayerShotCount     = $0135

                   ; Maximum less current for each enemy type (ie: number 
                   remaining that can
                   ; be created).  Computed and used during creation of 
                   new enemies.

 0000  3D 01 00 00 avl_enemy_by_type   = $013D
 0000  3D 01 00 00 avl_flippers        = $013D
 0000  3E 01 00 00 avl_pulsars         = $013E
 0000  3F 01 00 00 avl_tankers         = $013F
 0000  40 01 00 00 avl_spikers         = $0140
 0000  41 01 00 00 avl_fuseballs       = $0141

 0000  42 01 00 00 n_enemy_by_type     = $0142
 0000  42 01 00 00 n_flippers          = $0142
 0000  43 01 00 00 n_pulsars           = $0143
 0000  44 01 00 00 n_tankers           = $0144
 0000  45 01 00 00 n_spikers           = $0145
 0000  46 01 00 00 n_fuseballs         = $0146

                   ; Initially calculated at $9475.  $9b5a uses this to 
                   update $8148
                   ; $9b8c/$9b9f negate this value when $0148 hits 0x0F 
                   and 0xC1, ascending and 
                   ; descending respectively.

 0000  47 01 00 00 pulse_beat          = $0147

                   ; Set to 0xFF during init.  Once per cycle, after all 
                   enement movement has
                   ; been completed, the computation $0147 + $0147 is done,
                    and if the high bit of
                   ; $0148 goes from 0 to 1 as a result, $cd06 is called 
                   (see also $9b56)

 0000  48 01 00 00 pulsing             = $0148
 0000  49 01 00 00 tanker_load         = $0149

 0000  51 01 00 00 hit_tol_by_enm_type = $0151
 0000  51 01 00 00 hit_tol_flipper     = $0151
 0000  52 01 00 00 hit_tol_pulsar      = $0152
 0000  53 01 00 00 hit_tol_tanker      = $0153
 0000  54 01 00 00 hit_tol_spiker      = $0154
 0000  55 01 00 00 hit_tol_fuseball    = $0155

 0000  56 01 00 00 bonus_life_each     = $0156
 0000  57 01 00 00 lethal_distance     = $0157
 0000  58 01 00 00 init_lives          = $0158

                   ; Two flags that control fuseball motion are kept here 
                   (in the 0x40 and 0x80 bits)
                   ; See $9607_6b for setting, $9f2c/$9f4a/$9f6e for use

 0000  59 01 00 00 fuse_move_flg       = $0159

 0000  5A 01 00 00 wave_spikeht        = $015A
 0000  5B 01 00 00 wave_enemies        = $015B

                   ;Movement type for flippers - See $9aa2 for use, 
                   9607_5b for computation.

 0000  5D 01 00 00 flipper_move        = $015D

                   ; Fuseball movement probabilities
                   ;
                   ;  The chance of fuzzballs doing something in certain 
                   regions of the tube;
                   ;  see 9607_6f for computation, $9f69 for use.

 0000  5F 01 00 00 fuse_move_prb       = $015F
 0000  60 01 00 00 spd_flipper_lsb     = $0160
 0000  61 01 00 00 spd_pulsar_lsb      = $0161
 0000  62 01 00 00 spd_tanker_lsb      = $0162
 0000  63 01 00 00 spd_spiker_lsb      = $0163
 0000  64 01 00 00 spd_fuseball_lsb    = $0164
 0000  65 01 00 00 spd_flipper_msb     = $0165
 0000  66 01 00 00 spd_pulsar_msb      = $0166
 0000  67 01 00 00 spd_tanker_msb      = $0167
 0000  68 01 00 00 spd_spiker_msb      = $0168
 0000  69 01 00 00 spd_fuseball_msb    = $0169

                   ; Difficulty Rating Bits
                   ;
                   ;  00000011 - 00 Medium, 01 Easy, 02 Hard, 03 Medium
                   ;  00000100 - Rating (0 = Start 1-9, 1 = Tied to High 
                   Score)
                   ;  00001000 - Unknown, comes from 0x20 bit of 
                   spinner/cabinet type

 0000  6A 01 00 00 diff_bits           = $016A

 0000  6C 01 00 00 copyr_disp_cksum1   = $016C
 0000  6D 01 00 00 pulsar_fire         = $016D

 0000  C6 01 00 00 earom_clr           = $01C6

                   ; EAROM Stuff
                   ;
                   ;  00000011 Bits
                   ;  --------
                   ;  00000001  Top three sets of initials needs 
                   initializing
                   ;  00000010  Top three scores need initializing

 0000  C9 01 00 00 hs_initflag         = $01C9

 0000  CA 01 00 00 earom_op            = $01CA
 0000  CB 01 00 00 earom_blkoff        = $01CB
 0000  CC 01 00 00 earom_ptr           = $01CC
 0000  CD 01 00 00 earom_blkend        = $01CD

 0000  CF 01 00 00 earom_cksum         = $01CF 

 0000  00 02 00 00 player_seg          = $0200

                   ; Player State
                   ;
                   ; Usually, this is is (player_seg+1)&0x0f.  But it's 
                   set to other values
                   ; sometimes; the $80 bit seems to indicate "death in 
                   progress".
                   ; $80 - player grabbed by flipper/pulsar
                   ; $81 - player hit by enemy shot
                   ; $81 - player spiked while going down tube
                   ; I suspect that $80 means "death in progress" and, 
                   when so, $01 means 
                   ; don't display player anyway".

 0000  01 02 00 00 player_state        = $0201
 0000  02 02 00 00 player_along        = $0202             

                   ; Segment numbers for pending enemies. Set to random 
                   values $0-$f; see $9250.

 0203  03 02 00 00                     .org $0203
 0203  40 00 00 00 pending_seg         .ds  64             ; 16 x 4 = 64 
                   Bytes ($40)


                   ; Video display information, one per pending enemy.
                   ;
                   ; $00 here means "no pending enemy in this slot".
                   ; This byte breaks down as BBLLLLLL, and is used as a 
                   vscale value with
                   ; b=BB+1 and l=LLLLLL.  This is initialized to the 
                   pending_seg value in
                   ; the low nibble and the offset's low nibble in the 
                   high nibble, except
                   ; that if that would give $00, $0f is used instead.  
                   See $9250.


 0243  40 00 00 00 pending_vid         .ds  64              ; 16 x 4 = 64 
                   Bytes ($40)


                   ; Active Enemy Type Information 
                   ;
                   ; $07 bits hold enemy type (0-4).
                   ; $18 bits apparently mean something; see $b5bf.
                   ; $40 bit set -> enemy_seg value increasing; clr -> 
                   decreasing (see $9eab)
                   ; $80 bit set -> between segments (eg, flipper flipping)

 0000  83 02 00 00 enemy_type_info     = $0283             ; 7 Bytes - 
                   Indexed by enemy number.

                   ; Active Enemy State Information 
                   ;
                   ; $80 bit set -> moving away from player, clear -> 
                   towards
                   ; $40 means the enemy can shoot
                   ; $03 bits determine what happens when enemy gets below 
                   $20:
                   ; $00 = no special action (as if $20 weren't special)
                   ; $01 = split into two flippers
                   ; $02 = split into two pulsars
                   ; $03 = split into two fuzzballs

 0000  8A 02 00 00 active_enemy_info   = $028A         ; 7 Bytes - Indexed 
                   by active enemy number

 0000  91 02 00 00 enm_move_pc         = $0291         ; 7 Bytes - Indexed 
                   by active enemy number - PCode program counter for each 
                   enemy
 0000  98 02 00 00 enm_pc_storage      = $0298         ; 7 Bytes - Indexed 
                   by active enemy number - PCode storage 'register' for 
                   each enemy
 0000  9F 02 00 00 enemy_along_lsb     = $029F

 0000  A6 02 00 00 shot_delay          = $02A6         ; 7 Bytes - Indexed 
                   by active enemy number

 02AD  AD 02 00 00 .org $02AD
 02AD  08 00 00 00 PlayerShotSegments  .ds MAX_PLAYER_SHOTS
 02B5  04 00 00 00 EnemyShotSegments   .ds MAX_ENEMY_SHOTS
 02B9  07 00 00 00 enemy_seg           .ds MAX_ACTIVE_ENEMIES


                   ; More Enemy Info
                   ;
                   ; Flipper flipping: $80 plus current angle
                   ; Flipper not flipping: segment number last flipped from
                   ; Fuseballs store $81 or $87 here, depending on the $40 
                   bit of enemy_type_info,x

 02CC  CC 02 00 00                         .org $02cc
 02CC  07 00 00 00 more_enemy_info         .ds  MAX_ACTIVE_ENEMIES         
                   ; 7 Bytes - Indexed by enemy number

 02D3  D3 02 00 00                         .org $02D3  
 02D3  08 00 00 00 PlayerShotPositions:    .ds MAX_PLAYER_SHOTS            
                   ; 8 Bytes - Indexed by player shot number
 02DB  04 00 00 00 EnemyShotPositions:     .ds MAX_ENEMY_SHOTS             
                   ; 4 Bytes - Indexed by enemy shot number
 02DF  07 00 00 00 enemy_along:            .ds MAX_ACTIVE_ENEMIES          
                   ; 7 Bytes - Indexed by enemy number 
 02E6  04 00 00 00 enm_shot_lsb:           .ds MAX_ENEMY_SHOTS             
                   ; 4 Bytes - Indexed by enemy shot number            

 03AA  AA 03 00 00                         .org $03AA
                   PlayerState:
 03AA  01 00 00 00 zap_uses                .ds 1
 03AB  01 00 00 00 enemies_pending         .ds 1
 03AC  10 00 00 00 lane_spike_height       .ds 16
 0000  12 00 00 00 PlayerStateLen          = * - PlayerState
 03BC  01 00 00 00 OtherPlayerState        .ds 1

 0000  CE 03 00 00 tube_x              = $03CE

 0000  DE 03 00 00 tube_y              = $03DE

 0000  EE 03 00 00 tube_angle          = $03EE

 0000  06 04 00 00 on_time_l           = $0406
 0000  07 04 00 00 on_time_m           = $0407
 0000  08 04 00 00 on_time_h           = $0408
 0000  09 04 00 00 play_time_l         = $0409
 0000  0A 04 00 00 play_time_m         = $040A
 0000  0B 04 00 00 play_time_h         = $040B
 0000  0C 04 00 00 games_1p_l          = $040C
 0000  0D 04 00 00 games_1p_m          = $040D
 0000  0E 04 00 00 games_1p_h          = $040E
 0000  0F 04 00 00 games_2p_l          = $040F
 0000  10 04 00 00 games_2p_m          = $0410
 0000  11 04 00 00 games_2p_h          = $0411
 0000  12 04 00 00 secs_avg_l          = $0412
 0000  13 04 00 00 secs_avg_m          = $0413
 0000  14 04 00 00 secs_avg_h          = $0414
 0000  15 04 00 00 dblbuf_flg          = $0415

 0000  35 04 00 00 mid_x               = $0435

 0000  45 04 00 00 mid_y               = $0445

 0000  55 04 00 00 copyr_vid_cksum2    = $0455

 0000  02 06 00 00 hs_whichletter      = $0602

 0000  05 06 00 00 hs_timer            = $0605

 0000  06 06 00 00 hs_initials_8       = $0606
 0000  09 06 00 00 hs_initials_7       = $0609
 0000  0C 06 00 00 hs_initials_6       = $060C
 0000  0F 06 00 00 hs_initials_5       = $060F
 0000  12 06 00 00 hs_initials_4       = $0612
 0000  15 06 00 00 hs_initials_3       = $0615
 0000  18 06 00 00 hs_initials_2       = $0618
 0000  1B 06 00 00 hs_initials_1       = $061B

 0000  00 07 00 00 hs_scores           = $0700
 0000  06 07 00 00 hs_score_8          = $0706
 0000  09 07 00 00 hs_score_7          = $0709
 0000  0C 07 00 00 hs_score_6          = $070C
 0000  0F 07 00 00 hs_score_5          = $070F
 0000  12 07 00 00 hs_score_4          = $0712
 0000  15 07 00 00 hs_score_3          = $0715
 0000  18 07 00 00 hs_score_2          = $0718
 0000  1B 07 00 00 hs_score_1          = $071B
 0000  1D 07 00 00 endofhiscores       = $071D

 0000  1E 07 00 00 life_settings       = $071E
 0000  1F 07 00 00 diff_settings       = $071F

 0000  00 08 00 00 col_ram             = $0800     ; Color RAM table, 8 
                   bytes
 0000  01 08 00 00 col_ram1            = $0801
 0000  02 08 00 00 col_ram2            = $0802
 0000  03 08 00 00 col_ram3            = $0803
 0000  04 08 00 00 col_ram4            = $0804
 0000  05 08 00 00 col_ram5            = $0805
 0000  06 08 00 00 col_ram6            = $0806
 0000  07 08 00 00 col_ram7            = $0807

 0000  08 08 00 00 col_ram_upr         = $0808     ; Color RAM modifiers, 
                   such as sparkle bit, 8 bytes
 0000  09 08 00 00 col_ram_upr1        = $0809
 0000  0A 08 00 00 col_ram_upr2        = $080A
 0000  0B 08 00 00 col_ram_upr3        = $080B
 0000  0C 08 00 00 col_ram_upr4        = $080C
 0000  0D 08 00 00 col_ram_upr5        = $080D
 0000  0E 08 00 00 col_ram_upr6        = $080E
 0000  0F 08 00 00 col_ram_upr7        = $080F

 0000  00 0C 00 00 cabsw:              = $0C00
 0000  00 0D 00 00 optsw1              = $0D00
 0000  00 0E 00 00 optsw2              = $0E00

 0000  00 20 00 00 vecram              = $2000
 0000  60 2F 00 00 video_data          = $2F60
 0000  E4 31 00 00 char_jsrtbl         = $31E4
 0000  FA 31 00 00 ltr_jsrtbl          = $31FA

 0000  16 3F 00 00 test_magic_tbl      = $3F16
 0000  1E 3F 00 00 diff_str_tbl        = $3F1E

 0000  00 40 00 00 vid_coins           = $4000
 0000  00 48 00 00 vg_go               = $4800
 0000  00 50 00 00 watchdog            = $5000
 0000  00 58 00 00 vg_reset            = $5800
 0000  00 60 00 00 earom_write         = $6000

 0000  40 60 00 00 eactl_mbst          = $6040
 0000  50 60 00 00 earom_rd            = $6050
 0000  60 60 00 00 mb_rd_l             = $6060
 0000  70 60 00 00 mb_rd_h             = $6070
 0000  80 60 00 00 mb_w_00             = $6080
 0000  81 60 00 00 mb_w_01             = $6081
 0000  82 60 00 00 mb_w_02             = $6082
 0000  83 60 00 00 mb_w_03             = $6083
 0000  84 60 00 00 mb_w_04             = $6084
 0000  85 60 00 00 mb_w_05             = $6085
 0000  86 60 00 00 mb_w_06             = $6086
 0000  87 60 00 00 mb_w_07             = $6087
 0000  88 60 00 00 mb_w_08             = $6088
 0000  89 60 00 00 mb_w_09             = $6089
 0000  8A 60 00 00 mb_w_0a             = $608a
 0000  8B 60 00 00 mb_w_0b             = $608b
 0000  8C 60 00 00 mb_w_0c             = $608c
 0000  8D 60 00 00 mb_w_0d             = $608d
 0000  8E 60 00 00 mb_w_0e             = $608e
 0000  8F 60 00 00 mb_w_0f             = $608f
 0000  90 60 00 00 mb_w_10             = $6090
 0000  91 60 00 00 mb_w_11             = $6091
 0000  92 60 00 00 mb_w_12             = $6092
 0000  93 60 00 00 mb_w_13             = $6093
 0000  94 60 00 00 mb_w_14             = $6094

 0000  C0 60 00 00 pokey1              = $60C0
 0000  C8 60 00 00 spinner_cabtyp      = $60C8
 0000  CA 60 00 00 pokey1_rand         = $60CA

 0000  D0 60 00 00 pokey2              = $60D0
 0000  D8 60 00 00 zap_fire_starts     = $60D8
 0000  DA 60 00 00 pokey2_rand         = $60DA
 0000  E0 60 00 00 leds_flip           = $60E0

 0000  95 60 00 00 mb_w_15             = $6095
 0000  96 60 00 00 mb_w_16             = $6096

 9000  00 90 00 00 .org $9000
                   .if !OPTIMIZE
 9000  02                                  .byte   $02
 9001  BB                                  .byte   $bb
 9002  5A                                  .byte   $5a
 9003  30                                  .byte   $30
 9004  50                                  .byte   $50
 9005  EE                                  .byte   $ee
 9006  3D                                  .byte   $3d
 9007  A8                                  .byte   $a8
 9008  4D                                  .byte   $4d
                   .endif

 9009  20          InitLevel:              jsr     LoadLevelParams
 900A  C5 92
 900C  20                                  jsr     InitEnemiesAndSpikes
 900D  34 92
 900F  20                                  jsr     ResetGameElements
 9010  2B 90
 9012  20                                  jsr     InitSuperzapper
 9013  31 A8
 9015  A9                                  lda     #$fa
 9016  FA
 9017  85                                  sta     $5b
 9018  5B
 9019  A9                                  lda     #$00
 901A  00
 901B  8D                                  sta     $0106
 901C  06 01
 901E  85                                  sta     $5f
 901F  5F
 9020  A9                                  lda     #$00
 9021  00
 9022  85                                  sta     unknown_state
 9023  01
 9024  60                                  rts

 9025  20          InitializeGame:         jsr     InitPlayerPosition
 9026  1B 92
 9028  20                                  jsr     LoadLevelParams
 9029  C5 92
 902B  20          ResetGameElements:      jsr     ClearAllShots
 902C  8F 92
 902E  20                                  jsr     ClearAllEnemies
 902F  6F 92
 9031  20                                  jsr     InitEnemyLocations
 9032  46 92
 9034  20                                  jsr     ClearEnemyDeaths
 9035  9F 92
 9037  20                                  jsr     ZeroSpinner
 9038  AD 92
 903A  20                                  jsr     InitVector
 903B  6E C1

 903D  A9                                  lda     #$ff
 903E  FF
 903F  8D                                  sta     $0124
 9040  24 01
 9042  8D                                  sta     pulsing
 9043  48 01
 9045  A9                                  lda     #$00
 9046  00
 9047  8D                                  sta     $0123
 9048  23 01
 904A  60                                  rts

 904B  A9          State_ZoomOntoNew:      lda     #$10
 904C  10
 904D  8D                                  sta     player_along
 904E  02 02
 9050  A9                                  lda     #$00
 9051  00
 9052  85                                  sta     $29
 9053  29
 9054  85                                  sta     $2b
 9055  2B
 9056  AD                                  lda     $0121
 9057  21 01
 9059  85                                  sta     $2a
 905A  2A
 905B  10                                  bpl     +
 905C  02
  [ =905F ]
 905D  C6                                  dec     $2b
 905E  2B
 905F  A2          +                       ldx     #$01
 9060  01
 9061  A5          -                       lda     $2a
 9062  2A
 9063  0A                                  asl     a
 9064  66                                  ror     $2a
 9065  2A
 9066  66                                  ror     $29
 9067  29
 9068  CA                                  dex
 9069  10                                  bpl     -
 906A  F6
  [ =9061 ]
 906B  A5                                  lda     $29
 906C  29
 906D  18                                  clc
 906E  6D                                  adc     $0122
 906F  22 01
 9071  8D                                  sta     $0122
 9072  22 01
 9074  A5                                  lda     $2a
 9075  2A
 9076  65                                  adc     $68
 9077  68
 9078  85                                  sta     $68
 9079  68
 907A  A5                                  lda     $2b
 907B  2B
 907C  65                                  adc     $69
 907D  69
 907E  85                                  sta     $69
 907F  69
 9080  A5                                  lda     $5f
 9081  5F
 9082  18                                  clc
 9083  69                                  adc     #$18
 9084  18
 9085  85                                  sta     $5f
 9086  5F
 9087  A5                                  lda     $5b
 9088  5B
 9089  69                                  adc     #$00
 908A  00
 908B  85                                  sta     $5b
 908C  5B
 908D  C9                                  cmp     #$fc
 908E  FC
 908F  90                                  bcc     +
 9090  05
  [ =9096 ]
 9091  A9                                  lda     #$01
 9092  01
 9093  8D                                  sta     $0115
 9094  15 01
 9096  A5          +                       lda     $5f
 9097  5F
 9098  38                                  sec
 9099  E5                                  sbc     $5d
 909A  5D
 909B  A5                                  lda     $5b
 909C  5B
 909D  F0                                  beq     +
 909E  02
  [ =90A1 ]
 909F  E9                                  sbc     #$ff
 90A0  FF
 90A1  D0          +                       bne     loc90bc
 90A2  19
  [ =90BC ]
 90A3  A5                                  lda     $5d
 90A4  5D
 90A5  85                                  sta     $5f
 90A6  5F
 90A7  A9                                  lda     #$ff
 90A8  FF
 90A9  85                                  sta     $5b
 90AA  5B
 90AB  A9                                  lda     #$04
 90AC  04
 90AD  24                                  bit     game_mode
 90AE  05
 90AF  30                                  bmi     +
 90B0  02
  [ =90B3 ]
 90B1  A9                                  lda     #GS_LevelBegin
 90B2  08
 90B3  85          +                       sta     gamestate
 90B4  00
 90B5  A6                                  ldx     curplayer
 90B6  3D
 90B7  A9                                  lda     #$00
 90B8  00
 90B9  9D                                  sta     p1_startchoice,x
 90BA  02 01
 90BC  A9          loc90bc:                lda     #$ff
 90BD  FF
 90BE  8D                                  sta     $0114
 90BF  14 01
 90C1  4C                                  jmp     move_player
 90C2  49 97

                   ; Level Selection Code

 90C4  AD          PlayerLevelSelect:      lda     $0126                   
                   ; See what level the player last completed and then run 
                   down
 90C5  26 01
 90C7  A2                                  ldx     #NumberOfStartEntries   
                   ;   the starting level table list by walking down it 
                   until 
 90C8  1C
 90C9  CA          loc90c9:                dex                             
                   ;   we find one smaller or equal to the last completed
 90CA  DD                                  cmp     startlevtbl,x
 90CB  FE 91

                   .if !ALT_START_TABLE
 90CD  90                                  bcc loc90c9
 90CE  FA
  [ =90C9 ]
                   .else
                   .endif
 90CF  A0                                  ldy     #$04
 90D0  04
 90D1  AD                                  lda     diff_bits
 90D2  6A 01
 90D4  29                                  and     #$04                    
                   ; self-rating bit
 90D5  04
 90D6  F0                                  beq     loc90ea                 
                   ; branch if 1,3,5,7,9
 90D7  12
  [ =90EA ]
 90D8  AD                                  lda     hs_score_1+2            
                   ; top two digits of top score
 90D9  1D 07
 90DB  C9                                  cmp     #$30                    
                   ; If highscore over 30,000, add level 11
 90DC  30
 90DD  90                                  bcc     loc90e0
 90DE  01
  [ =90E0 ]
 90DF  C8                                  iny
 90E0  C9          loc90e0:                cmp     #$50                    
                   ; If highscore over 50,000, add level 13
 90E1  50
 90E2  90                                  bcc     loc90e5
 90E3  01
  [ =90E5 ]
 90E4  C8                                  iny
 90E5  C9          loc90e5:                cmp     #$70                    
                   ; If highscore over 70,000, add level 15
 90E6  70
 90E7  90                                  bcc     loc90ea
 90E8  01
  [ =90EA ]
 90E9  C8                                  iny
 90EA  A5          loc90ea:                lda     coinage_shadow
 90EB  09
 90EC  29                                  and     #$43                    
                   ; coinage + 1 bit of bonus coins
 90ED  43
 90EE  C9                                  cmp     #$40                    
                   ; free play + 1/4,2/4,demo
 90EF  40
 90F0  D0                                  bne     loc90f4
 90F1  02
  [ =90F4 ]
 90F2  A0                                  ldy     #$1b
 90F3  1B
 90F4  84          loc90f4:                sty     $29
 90F5  29
 90F6  E4                                  cpx     $29
 90F7  29
 90F8  B0                                  bcs     loc90fc
 90F9  02
  [ =90FC ]
 90FA  A6                                  ldx     $29
 90FB  29
 90FC  8E          loc90fc:                stx     $0127
 90FD  27 01
 90FF  A5                                  lda     game_mode
 9100  05
 9101  10                                  bpl     state_1c
 9102  05
  [ =9108 ]
 9103  A9                                  lda     #$00
 9104  00
 9105  8D                                  sta     $0126
 9106  26 01

 9108  A6          state_1c:               ldx     $3f
 9109  3F
 910A  86                                  stx     curplayer
 910B  3D
 910C  F0                                  beq     loc9111
 910D  03
  [ =9111 ]
 910E  20                                  jsr     SwapPlayerStates
 910F  B2 92

 9111  A9          loc9111:                lda     #$04
 9112  04
 9113  85                                  sta     $7c
 9114  7C
 9115  A9                                  lda     #$ff
 9116  FF
 9117  85                                  sta     $5b
 9118  5B
 9119  A9                                  lda     #$00
 911A  00
 911B  8D                                  sta     player_seg
 911C  00 02
 911E  85                                  sta     $51
 911F  51
 9120  85                                  sta     $7b
 9121  7B
 9122  8D                                  sta     hs_timer
 9123  05 06
 9125  A6                                  ldx     game_mode
 9126  05
 9127  10                                  bpl     loc9144
 9128  1B
  [ =9144 ]
 9129  A9                                  lda     #$14
 912A  14
 912B  8D                                  sta     hs_timer
 912C  05 06
 912E  A9                                  lda     #$ff
 912F  FF
 9130  8D                                  sta     open_level
 9131  11 01
 9133  A9                                  lda     #GS_LevelSelect
 9134  16
 9135  85                                  sta     gamestate
 9136  00
 9137  A9                                  lda     #$08
 9138  08
 9139  85                                  sta     $01
 913A  01
 913B  A9                                  lda     #$00
 913C  00
 913D  85                                  sta     curlevel
 913E  9F
 913F  20                                  jsr     SetLevelColors
 9140  96 C1
                   .if !ALT_START_TABLE
 9142  A9                                  lda     #$10                    
                   ; BCD value of seconds to wait at Level Selection
 9143  10
                   .else
                   .endif

 9144  85          loc9144:                sta     countdown_timer
 9145  04
 9146  20                                  jsr     ZeroSpinner
 9147  AD 92

 9149  CE          State_LevelSelect:      dec     hs_timer
 914A  05 06
 914C  10                                  bpl     loc9169
 914D  1B
  [ =9169 ]
 914E  F8                                  sed
 914F  A5                                  lda     countdown_timer
 9150  04
 9151  38                                  sec
 9152  E9                                  sbc     #$01
 9153  01
 9154  85                                  sta     countdown_timer
 9155  04
 9156  D8                                  cld
 9157  10                                  bpl     loc915d
 9158  04
  [ =915D ]
 9159  A9                                  lda     #$10                    
                   ; fire
 915A  10
 915B  85                                  sta     zap_fire_new
 915C  4E
 915D  C9          loc915d:                cmp     #$03
 915E  03
 915F  D0                                  bne     loc9164
 9160  03
  [ =9164 ]
 9161  20                                  jsr     locccfe
 9162  FE CC
 9164  A9          loc9164:                lda     #$14
 9165  14
 9166  8D                                  sta     hs_timer
 9167  05 06
 9169  20          loc9169:                jsr     locb0ab
 916A  AB B0
 916C  A9                                  lda     #$18
 916D  18
 916E  A4                                  ldy     countdown_timer
 916F  04
 9170  C0                                  cpy     #$08
 9171  08
 9172  B0                                  bcs     loc9176
 9173  02
  [ =9176 ]
 9174  A9                                  lda     #$78
 9175  78
 9176  25          loc9176:                and     zap_fire_new
 9177  4E
 9178  F0                                  beq     loc91ae
 9179  34
  [ =91AE ]
 917A  A9                                  lda     #$00
 917B  00
 917C  85                                  sta     zap_fire_new
 917D  4E
 917E  AD                                  lda     player_seg
 917F  00 02

                   ; New-level entry, used by attract mode(?) and new game 
                   start

 9181  A8                                  tay
 9182  A6                                  ldx     curplayer
 9183  3D
 9184  9D                                  sta     p1_startchoice,x
 9185  02 01
 9187  B9                                  lda     startlevtbl,y
 9188  FE 91
 918A  24                                  bit     game_mode
 918B  05
 918C  30                                  bmi     loc9197
 918D  09
  [ =9197 ]
 918E  A0                                  ldy     #$01
 918F  01
 9190  84                                  sty     p1_lives
 9191  48
 9192  AD                                  lda     pokey1_rand
 9193  CA 60
 9195  29                                  and     #$07                    
                           ; Attract mode levels are always under this 
                   limit
 9196  07
 9197  95          loc9197:                sta     p1_level,x
 9198  46
 9199  85                                  sta     curlevel
 919A  9F
 919B  20                                  jsr     SetLevelColors
 919C  96 C1
 919E  20                                  jsr     LoadLevelParams
 919F  C5 92
 91A1  20                                  jsr     InitEnemiesAndSpikes
 91A2  34 92
 91A4  20                                  jsr     InitSuperzapper
 91A5  31 A8
 91A7  A9                                  lda     #GS_LevelStartup
 91A8  02
 91A9  85                                  sta     gamestate
 91AA  00
 91AB  20                                  jsr     ZeroSpinner
 91AC  AD 92
 91AE  A5          loc91ae:                lda     zap_fire_new
 91AF  4E
 91B0  29                                  and     #$07
 91B1  07
 91B2  85                                  sta     zap_fire_new
 91B3  4E
 91B4  60                                  rts

                   ; Loads the start bonus (level choice in A) into 
                   29/2a/2b

 91B5  0A          ld_startbonus:          asl     a
 91B6  AA                                  tax
 91B7  A9                                  lda     #$00
 91B8  00
 91B9  85                                  sta     $29
 91BA  29
 91BB  BD                                  lda     start_bonus,x
 91BC  C6 91
 91BE  85                                  sta     $2a
 91BF  2A
 91C0  BD                                  lda     start_bonus+1,x
 91C1  C7 91
 91C3  85                                  sta     $2b
 91C4  2B
 91C5  60                                  rts

                   ; Start bonuses, in BCD, low 00 not stored.

                   start_bonus:            
                   .if !ALT_START_TABLE
 91C6  00 00                               .word   $0000       ; Level  1 
                   - Bonus:       0
 91C8  60 00                               .word   $0060       ; Level  3 
                   - Bonus:   6,000
 91CA  60 01                               .word   $0160       ; Level  5 
                   - Bonus:  16,000
 91CC  20 03                               .word   $0320       ; Level  7 
                   - Bonus:  32,000
 91CE  40 05                               .word   $0540       ; Level  9 
                   - Bonus:  54,000
 91D0  40 07                               .word   $0740       ; Level 11 
                   - Bonus:  74,000
 91D2  40 09                               .word   $0940       ; Level 13 
                   - Bonus:  94,000
 91D4  40 11                               .word   $1140       ; Level 15 
                   - Bonus: 114,000
 91D6  40 13                               .word   $1340       ; Level 17 
                   - Bonus: 134,000
 91D8  20 15                               .word   $1520       ; Level 20 
                   - Bonus: 152,000
 91DA  00 17                               .word   $1700       ; Level 22 
                   - Bonus: 170,000
 91DC  80 18                               .word   $1880       ; Level 24 
                   - Bonus: 188,000
 91DE  80 20                               .word   $2080       ; Level 26 
                   - Bonus: 208,000
 91E0  60 22                               .word   $2260       ; Level 28 
                   - Bonus: 226,000
 91E2  80 24                               .word   $2480       ; Level 31 
                   - Bonus: 248,000
 91E4  60 26                               .word   $2660       ; Level 33 
                   - Bonus: 266,000
 91E6  00 30                               .word   $3000       ; Level 36 
                   - Bonus: 300,000
 91E8  00 34                               .word   $3400       ; Level 40 
                   - Bonus: 340,000
 91EA  20 38                               .word   $3820       ; Level 44 
                   - Bonus: 382,000
 91EC  50 41                               .word   $4150       ; Level 47 
                   - Bonus: 415,000
 91EE  90 43                               .word   $4390       ; Level 49 
                   - Bonus: 439,000
 91F0  20 47                               .word   $4720       ; Level 52 
                   - Bonus: 472,000
 91F2  10 53                               .word   $5310       ; Level 56 
                   - Bonus: 531,000
 91F4  10 58                               .word   $5810       ; Level 60 
                   - Bonus: 581,000
 91F6  40 62                               .word   $6240       ; Level 63 
                   - Bonus: 624,000
 91F8  60 65                               .word   $6560       ; Level 65 
                   - Bonus: 656,000
 91FA  60 76                               .word   $7660       ; Level 73 
                   - Bonus: 766,000
 91FC  80 89                               .word   $8980       ; Level 81 
                   - Bonus: 898,000
                   .else
                   .endif

                   end_start_bonus:

                   ; Start level numbers?  (ie, is this table maybe 
                   mapping from index
                   ; of level-select entry chosen to actual level number?)

                   startlevtbl:            
                   .if !ALT_START_TABLE
 91FE  00                                  .byte    1 - 1      ; Level  1 
                   - Bonus:       0
 91FF  02                                  .byte    3 - 1      ; Level  3 
                   - Bonus:   6,000
 9200  04                                  .byte    5 - 1      ; Level  5 
                   - Bonus:  16,000
 9201  06                                  .byte    7 - 1      ; Level  7 
                   - Bonus:  32,000
 9202  08                                  .byte    9 - 1      ; Level  9 
                   - Bonus:  54,000
 9203  0A                                  .byte   11 - 1      ; Level 11 
                   - Bonus:  74,000
 9204  0C                                  .byte   13 - 1      ; Level 13 
                   - Bonus:  94,000
 9205  0E                                  .byte   15 - 1      ; Level 15 
                   - Bonus: 114,000
 9206  10                                  .byte   17 - 1      ; Level 17 
                   - Bonus: 134,000
 9207  13                                  .byte   20 - 1      ; Level 20 
                   - Bonus: 152,000
 9208  15                                  .byte   22 - 1      ; Level 22 
                   - Bonus: 170,000
 9209  17                                  .byte   24 - 1      ; Level 24 
                   - Bonus: 188,000
 920A  19                                  .byte   26 - 1      ; Level 26 
                   - Bonus: 208,000
 920B  1B                                  .byte   28 - 1      ; Level 28 
                   - Bonus: 226,000
 920C  1E                                  .byte   31 - 1      ; Level 31 
                   - Bonus: 248,000
 920D  20                                  .byte   33 - 1      ; Level 33 
                   - Bonus: 266,000
 920E  23                                  .byte   36 - 1      ; Level 36 
                   - Bonus: 300,000
 920F  27                                  .byte   40 - 1      ; Level 40 
                   - Bonus: 340,000
 9210  2B                                  .byte   44 - 1      ; Level 44 
                   - Bonus: 382,000
 9211  2E                                  .byte   47 - 1      ; Level 47 
                   - Bonus: 415,000
 9212  30                                  .byte   49 - 1      ; Level 49 
                   - Bonus: 439,000
 9213  33                                  .byte   52 - 1      ; Level 52 
                   - Bonus: 472,000
 9214  37                                  .byte   56 - 1      ; Level 56 
                   - Bonus: 531,000
 9215  3B                                  .byte   60 - 1      ; Level 60 
                   - Bonus: 581,000
 9216  3E                                  .byte   63 - 1      ; Level 63 
                   - Bonus: 624,000
 9217  40                                  .byte   65 - 1      ; Level 65 
                   - Bonus: 656,000
 9218  48                                  .byte   73 - 1      ; Level 73 
                   - Bonus: 766,000
 9219  50                                  .byte   81 - 1      ; Level 81 
                   - Bonus: 898,000
                   .else
                   .endif
                   end_startlevtbl:
 921A  FF                                  .byte   $ff

                   ; Make sure that the number of entries in the starting 
                   level table matches
                   ;   the number of entries in the bonus table

 0000  1C 00 00 00 NumberOfStartEntries    .equ    ((end_startlevtbl - 
                   startlevtbl))
 0000  01 00 00 00 .assert (NumberOfStartEntries) == ((end_start_bonus - 
                   start_bonus) / 2)


 921B  A9          InitPlayerPosition:     lda     #$0e
 921C  0E
 921D  8D                                  sta     player_seg
 921E  00 02
 9220  A9                                  lda     #END_OF_TUNNEL
 9221  F0
 9222  85                                  sta     $51
 9223  51
 9224  A9                                  lda     #$00
 9225  00
 9226  8D                                  sta     $0106
 9227  06 01
 9229  A9                                  lda     #$0f
 922A  0F
 922B  8D                                  sta     player_state
 922C  01 02
 922E  A9                                  lda     #TOP_OF_TUNNEL
 922F  10
 9230  8D                                  sta     player_along
 9231  02 02
 9233  60                                  rts

 9234  AD          InitEnemiesAndSpikes:   lda     wave_enemies
 9235  5B 01
 9237  8D                                  sta     enemies_pending
 9238  AB 03
 923A  AD                                  lda     wave_spikeht
 923B  5A 01
 923D  A2                                  ldx     #$0f
 923E  0F
 923F  9D          -                       sta     lane_spike_height,x
 9240  AC 03
 9242  CA                                  dex
 9243  10                                  bpl     -
 9244  FA
  [ =923F ]
 9245  60                                  rts

                   ; Initialize the pending_seg and pending_vid tables.

 9246  A9          InitEnemyLocations:     lda     #$00
 9247  00
 9248  A2                                  ldx     #$3f
 9249  3F
 924A  9D          -                       sta     pending_vid,x
 924B  43 02
 924D  CA                                  dex
 924E  10                                  bpl     -
 924F  FA
  [ =924A ]

 9250  AE                                  ldx     enemies_pending
 9251  AB 03
 9253  CA                                  dex
 9254  AD          -                       lda     pokey1_rand
 9255  CA 60
 9257  29                                  and     #$0f
 9258  0F
 9259  9D                                  sta     pending_seg,x
 925A  03 02
 925C  8A                                  txa
 925D  0A                                  asl     a
 925E  0A                                  asl     a
 925F  0A                                  asl     a
 9260  0A                                  asl     a
 9261  1D                                  ora     pending_seg,x
 9262  03 02
 9264  D0                                  bne     +
 9265  02
  [ =9268 ]
 9266  A9                                  lda     #$0f
 9267  0F
 9268  9D          +                       sta     pending_vid,x
 9269  43 02
 926B  CA                                  dex
 926C  10                                  bpl     -
 926D  E6
  [ =9254 ]
 926E  60                                  rts

                   ; Clear all enemies - used by init code

 926F  A2          ClearAllEnemies:        ldx     #$06
 9270  06
 9271  A9                                  lda     #$00
 9272  00
 9273  9D          -                       sta     enemy_along,x
 9274  DF 02
 9276  CA                                  dex
 9277  10                                  bpl     -
 9278  FA
  [ =9273 ]

 9279  8D                                  sta     NumEnemiesInTube
 927A  08 01
 927C  8D                                  sta     NumEnemiesOnTop
 927D  09 01

 927F  8D                                  sta     n_spikers           ; 
                   Zero out the enemy counts for each type
 9280  45 01
 9282  8D                                  sta     n_flippers
 9283  42 01
 9285  8D                                  sta     n_tankers
 9286  44 01
 9288  8D                                  sta     n_pulsars
 9289  43 01
 928B  8D                                  sta     n_fuseballs
 928C  46 01
 928E  60                                  rts

 928F  A9          ClearAllShots:          lda     #$00
 9290  00
 9291  A2                                  ldx     #MAX_TOTAL_SHOTS-1
 9292  0B
 9293  9D          -                       sta     PlayerShotPositions,x
 9294  D3 02
 9296  CA                                  dex
 9297  10                                  bpl     -
 9298  FA
  [ =9293 ]
 9299  8D                                  sta     PlayerShotCount
 929A  35 01
 929C  85                                  sta     EnemyShotCount
 929D  A6
 929E  60                                  rts

                   ; Fills 0x00 into 8.bytes at 030a, also in 0116.
                   ; Another disassembly says this aborts enemy death 
                   sequences in progress.

 929F  A2          ClearEnemyDeaths:       ldx     #MAX_ACTIVE_ENEMIES
 92A0  07
 92A1  A9                                  lda     #$00
 92A2  00
 92A3  9D          -                       sta     $030a,x
 92A4  0A 03
 92A6  CA                                  dex
 92A7  10                                  bpl     -
 92A8  FA
  [ =92A3 ]
 92A9  8D                                  sta     $0116
 92AA  16 01
 92AC  60                                  rts

 92AD  A9          ZeroSpinner:            lda     #$00
 92AE  00
 92AF  85                                  sta     $50
 92B0  50
 92B1  60                                  rts

                   ; Swap players state - copies the state infomration 
                   back and forth between players

 92B2  A2          SwapPlayerStates:       ldx     #PlayerStateLen - 1
 92B3  11
 92B4  BD          -                       lda     PlayerState,x
 92B5  AA 03
 92B7  BC                                  ldy     OtherPlayerState,x
 92B8  BC 03
 92BA  9D                                  sta     OtherPlayerState,x
 92BB  BC 03
 92BD  98                                  tya
 92BE  9D                                  sta     PlayerState,x
 92BF  AA 03
 92C1  CA                                  dex
 92C2  10                                  bpl     -
 92C3  F0
  [ =92B4 ]
 92C4  60                                  rts

 92C5  A5          LoadLevelParams:        lda     curlevel
 92C6  9F
 92C7  C9                                  cmp     #HIGHEST_LEVEL
 92C8  62
 92C9  90                                  bcc     +
 92CA  07
  [ =92D2 ]
 92CB  AD                                  lda     pokey2_rand             
 92CC  DA 60
 92CE  29                                  and     #$1f
 92CF  1F
 92D0  09                                  ora     #$40
 92D1  40
 92D2  85          +                       sta     $2b                     
                   ; Effective Level Number
 92D3  2B
 92D4  E6                                  inc     $2b
 92D5  2B

                   ; $2b now holds the effective level number
                   ; Loop for X from $6f down through $03 (loop ends at 
                   $931d-$9326)

 92D6  A2                                  ldx     #ParameterTableLength
 92D7  6F
 92D8  86                                  stx     $37
 92D9  37

                                           ; Table format:  SOMENUMBER 
                   FIRSTLEVEL LASTLEVEL

 92DA  A6          ParameterLoop:          ldx     $37
 92DB  37
 92DC  BD                                  lda     ParametersTable,x
 92DD  07 96
 92DF  85                                  sta     $3c                     
                   ; ($3b) points to the table of values
 92E0  3C
 92E1  BD                                  lda     ParametersTable-1,x
 92E2  06 96
 92E4  85                                  sta     $3b
 92E5  3B
 92E6  BD                                  lda     ParametersTable-2,x
 92E7  05 96
 92E9  85                                  sta     $2d
 92EA  2D
 92EB  BD                                  lda     ParametersTable-3,x     
                   ; ($2c) points to the param that's going to get set
 92EC  04 96
 92EE  85                                  sta     $2c
 92EF  2C

 92F0  A9                                  lda     #$01
 92F1  01
 92F2  85                                  sta     $38
 92F3  38

 92F4  A0                                  ldy     #$00
 92F5  00
 92F6  B1          loc92f6:                lda     ($2c),y
 92F7  2C
 92F8  8D                                  sta     $015e
 92F9  5E 01
 92FB  F0                                  beq     loc9319
 92FC  1C
  [ =9319 ]
 92FD  A5                                  lda     $2b                 ; 
                   Effective level number
 92FE  2B
 92FF  C8                                  iny
 9300  D1                                  cmp     ($2c),y
 9301  2C
 9302  C8                                  iny
 9303  90                                  bcc     level_outside_range ; 
                   branch if lvl # is too low
 9304  0E
  [ =9313 ]
 9305  D1                                  cmp     ($2c),y
 9306  2C
 9307  D0                                  bne     loc930a             ; 
                   branch to $9313 if lvl # >= ($2c),y
 9308  01
  [ =930A ]
 9309  18                                  clc
 930A  B0          loc930a:                bcs     level_outside_range
 930B  07
  [ =9313 ]
 930C  C8                                  iny
 930D  20                                  jsr     loc9677
 930E  77 96
 9310  4C                                  jmp     loc9319
 9311  19 93

 9313  20          level_outside_range:    jsr     loc9683
 9314  83 96
 9316  18                                  clc
 9317  90                                  bcc     loc92f6
 9318  DD
  [ =92F6 ]

 9319  A0          loc9319:                ldy     #$00
 931A  00
 931B  91                                  sta     ($3b),y
 931C  3B

 931D  A5                                  lda     $37
 931E  37
 931F  38                                  sec
 9320  E9                                  sbc     #$04
 9321  04
 9322  85                                  sta     $37
 9323  37
 9324  C9                                  cmp     #$ff
 9325  FF
 9326  D0                                  bne     ParameterLoop
 9327  B2
  [ =92DA ]

 9328  AD                                  lda     diff_bits
 9329  6A 01
 932B  29                                  and     #$03                ; 
                   difficulty
 932C  03
 932D  C9                                  cmp     #$01                ; 
                   easy
 932E  01
 932F  D0                                  bne     loc934d
 9330  1C
  [ =934D ]

                                           ; Easy Difficulty - Does the 
                   following modifications to gameplay:
                                           ;                 - Decreases 
                   the number of enemy shots iscreen
                                           ;                 - Decreases 
                   flipper speed
                                           ;                 - Decreases 
                   the amount of acceleration for flippers on top rails

 9331  CE                                  dec     MaxEnemyShots
 9332  1A 01
 9334  AD                                  lda     spd_flipper_lsb
 9335  60 01
 9337  49                                  eor     #$ff
 9338  FF
 9339  4A                                  lsr     a
 933A  4A                                  lsr     a
 933B  4A                                  lsr     a
 933C  6D                                  adc     spd_flipper_lsb
 933D  60 01
 933F  8D                                  sta     spd_flipper_lsb
 9340  60 01
 9342  A5                                  lda     curlevel
 9343  9F
 9344  C9                                  cmp     #$11
 9345  11
 9346  B0                                  bcs     loc934a
 9347  02
  [ =934A ]
 9348  C6                                  dec     flip_top_accel
 9349  B3
 934A  B8          loc934a:                clv
 934B  50                                  bvc     SetEnemyParams
 934C  35
  [ =9382 ]
 934D  C9          loc934d:                cmp     #$02                    
                   ; hard
 934E  02
 934F  D0                                  bne     SetEnemyParams
 9350  31
  [ =9382 ]

                                           ; Hard Difficulty - Does the 
                   following modifications to gameplay:
                                           ;                 - One 
                   additional enemy shot, but still limited to 3, which 
                   you'd have on higher levels anyway
                                           ;                 - Flipper 
                   speed is increased 
                                           ;                 - The number 
                   of enemies per wave is increased by 1/8th
                                           ;                 - Pulsars 
                   always fire (as they eventually do on higher levels)
                                           ;                 - No increase 
                   in active enemy count

 9351  EE          HardDifficulty:         inc     MaxEnemyShots           
                   ; Hard difficulty adds an enemy shot, but limited to 3
 9352  1A 01
 9354  AD                                  lda     MaxEnemyShots
 9355  1A 01
 9357  C9                                  cmp     #$03
 9358  03
 9359  90                                  bcc     loc9360
 935A  05
  [ =9360 ]
 935B  A9                                  lda     #$03
 935C  03
 935D  8D                                  sta     MaxEnemyShots
 935E  1A 01

 9360  AD          loc9360:                lda     spd_flipper_lsb
 9361  60 01
 9363  4A                                  lsr     a
 9364  4A                                  lsr     a
 9365  4A                                  lsr     a
 9366  09                                  ora     #$e0
 9367  E0
 9368  6D                                  adc     spd_flipper_lsb
 9369  60 01
 936B  8D                                  sta     spd_flipper_lsb
 936C  60 01

 936E  AD                                  lda     wave_enemies
 936F  5B 01
 9371  4A                                  lsr     a
 9372  4A                                  lsr     a
 9373  4A                                  lsr     a
 9374  6D                                  adc     wave_enemies
 9375  5B 01
 9377  8D                                  sta     wave_enemies
 9378  5B 01

 937A  AD                                  lda     pulsar_fire             
                   ; Pulsars shoot in hard difficulty (but they do on 
                   higher levels anyway)
 937B  6D 01
 937D  09                                  ora     #$40
 937E  40
 937F  8D                                  sta     pulsar_fire
 9380  6D 01

 9382  AD          SetEnemyParams:         lda     spd_spiker_lsb
 9383  63 01
 9385  20                                  jsr     crack_speed
 9386  E0 93
 9388  8D                                  sta     spd_spiker_lsb
 9389  63 01
 938B  8C                                  sty     spd_spiker_msb
 938C  68 01
 938E  8E                                  stx     hit_tol_spiker          
                   ; hit tolerance for spikers
 938F  54 01
 9391  AD                                  lda     enm_shotspd_lsb
 9392  20 01
 9394  20                                  jsr     crack_speed
 9395  E0 93
 9397  8D                                  sta     enm_shotspd_lsb
 9398  20 01
 939A  8C                                  sty     enm_shotspd_msb
 939B  18 01
 939D  86                                  stx     $a7
 939E  A7
 939F  AD                                  lda     spd_flipper_lsb
 93A0  60 01
 93A2  20                                  jsr     crack_speed
 93A3  E0 93
 93A5  8D                                  sta     spd_flipper_lsb
 93A6  60 01
 93A8  8D                                  sta     spd_tanker_lsb
 93A9  62 01
 93AB  8C                                  sty     spd_tanker_msb
 93AC  67 01
 93AE  8C                                  sty     spd_flipper_msb
 93AF  65 01
 93B1  8E                                  stx     hit_tol_flipper         
                   ; hit tolerance for flippers
 93B2  51 01
 93B4  8E                                  stx     hit_tol_tanker          
                   ; hit tolerance for tankers
 93B5  53 01
 93B7  8E                                  stx     hit_tol_pulsar          
                   ; hit tolerance for pulsars
 93B8  52 01
 93BA  AD                                  lda     spd_flipper_lsb
 93BB  60 01
 93BD  0A                                  asl     a
 93BE  8D                                  sta     spd_fuseball_lsb
 93BF  64 01
 93C1  AD                                  lda     spd_flipper_msb
 93C2  65 01
 93C4  2A                                  rol     a
 93C5  8D                                  sta     spd_fuseball_msb
 93C6  69 01
 93C8  A9                                  lda     #$06
 93C9  06
 93CA  8D                                  sta     hit_tol_fuseball        
                   ; hit tolerance for fuseballs
 93CB  55 01
 93CD  A9                                  lda     #$a0
 93CE  A0
 93CF  8D                                  sta     spd_pulsar_lsb
 93D0  61 01
 93D2  A9                                  lda     #$fe
 93D3  FE
 93D4  8D                                  sta     spd_pulsar_msb
 93D5  66 01
 93D7  A9                                  lda     #$01
 93D8  01
 93D9  8D                                  sta     tanker_load+1
 93DA  4A 01
 93DC  8D                                  sta     tanker_load
 93DD  49 01
 93DF  60                                  rts

                   ; Convert a speed value such as found in the $9607 
                   tables to MSB and LSB
                   ; values, and a shot hit tolerance.  Return the MSB 
                   value in A, the LSB
                   ; value in Y, and the hit tolerance in X.

 93E0  A0          crack_speed:            ldy     #$ff
 93E1  FF
 93E2  84                                  sty     $29
 93E3  29
 93E4  0A                                  asl     a
 93E5  26                                  rol     $29
 93E6  29
 93E7  0A                                  asl     a
 93E8  26                                  rol     $29
 93E9  29
 93EA  0A                                  asl     a
 93EB  26                                  rol     $29
 93EC  29
 93ED  A4                                  ldy     $29
 93EE  29
 93EF  48                                  pha
 93F0  98                                  tya
 93F1  49                                  eor     #$ff
 93F2  FF
 93F3  18                                  clc
 93F4  69                                  adc     #$0d
 93F5  0D
 93F6  4A                                  lsr     a
 93F7  AA                                  tax
 93F8  68                                  pla
 93F9  60                                  rts

                   ; Computation of various per-level parameters.  See the 
                   table at $9607 and
                   ; the code at $92d6 for more.  Each.ds is commented 
                   with the address or
                   ; symbol for the.byte it computes.

                   shot_holdoff_table:                                     
                               
 93FA  08                                  .byte 8,1,14h,50h,0FDh
 93FB  01
 93FC  14
 93FD  50
 93FE  FD
 93FF  02                                  .byte 2,15h,40h,14h
 9400  15
 9401  40
 9402  14
 9403  02                                  .byte 2,41h,MAX_LEVEL,0Ah
 9404  41
 9405  63
 9406  0A

                   MaxEnemyShots_table:                                    
                                
 9407  04                                  .byte 4,1,9,1,1,1,2,3,2,2,3,3   
                                   ; From Level 1 to 9, valus as specified
 9408  01
 9409  09
 940A  01
 940B  01
 940C  01
 940D  02
 940E  03
 940F  02
 9410  02
 9411  03
 9412  03
 9413  02                                  .byte 2,10,64,2                 
                                   ; From level 10 to 64, 2
 9414  0A
 9415  40
 9416  02
 9417  02                                  .byte 2,65,LAST_GREEN,3         
                                   ; From level 65 to 99, 3
 9418  41
 9419  63
 941A  03
                   .if ADD_LEVEL
                   .endif

                   spd_flipper_lsb_table:                                  
                                  
 941B  08                                  .byte 8,1,8,212,251             
                                   
 941C  01
 941D  08
 941E  D4
 941F  FB
 9420  04                                  .byte 4,9,16,175,172,172,172,
                   168,164,160,160
 9421  09
 9422  10
 9423  AF
 9424  AC
 9425  AC
 9426  AC
 9427  A8
 9428  A4
 9429  A0
 942A  A0
 942B  08                                  .byte 8,17,25,175,253
 942C  11
 942D  19
 942E  AF
 942F  FD
 9430  08                                  .byte 8,26,32,157,253
 9431  1A
 9432  20
 9433  9D
 9434  FD
 9435  08                                  .byte 8,33,39,148,253
 9436  21
 9437  27
 9438  94
 9439  FD
 943A  08                                  .byte 8,40,48,146,255
 943B  28
 943C  30
 943D  92
 943E  FF
 943F  08                                  .byte 8,49,64,136,255
 9440  31
 9441  40
 9442  88
 9443  FF
 9444  0C                                  .byte 12,65,LAST_GREEN,96,65
 9445  41
 9446  63
 9447  60
 9448  41
                   .if ADD_LEVEL
                   .endif

                   enm_shotspd_lsb_table:                                  
                                  
 9449  0A                                  .byte 10,1,MAX_LEVEL,192
 944A  01
 944B  63
 944C  C0

                   spd_spiker_lsb_table:                                   
                                 
 944D  0A                                  .byte 10,1,20,0
 944E  01
 944F  14
 9450  00
 9451  0A                                  .byte 10,21,32,208
 9452  15
 9453  20
 9454  D0
 9455  0A                                  .byte 10,33,48,216
 9456  21
 9457  30
 9458  D8
 9459  0A                                  .byte 10,49,LAST_GREEN,208
 945A  31
 945B  63
 945C  D0
                   .if ADD_LEVEL
                   .endif

                   lethal_distance_table:                                  
                               ;lethal_distance - Distance pulsar can be 
                   down tube but still lethal
 945D  02                                  .byte 2,1,32,160                
                               
 945E  01
 945F  20
 9460  A0
 9461  02                                  .byte 2,33,64,160
 9462  21
 9463  40
 9464  A0
 9465  02                                  .byte 2,65,MAX_LEVEL,192
 9466  41
 9467  63
 9468  C0

                   pulse_beat_table:                                       
                             
 9469  02                                  .byte 2,1,48,4
 946A  01
 946B  30
 946C  04
 946D  02                                  .byte 2,49,64,6
 946E  31
 946F  40
 9470  06
 9471  02                                  .byte 2,65,LAST_GREEN,8
 9472  41
 9473  63
 9474  08
                   .if ADD_LEVEL
                   .endif

                   ParametersTable_43:                                     
                               ;tanker_load+2 
 9475  02                                  .byte 2,1,32,1
 9476  01
 9477  20
 9478  01
 9479  02                                  .byte 2,33,40,3
 947A  21
 947B  28
 947C  03
 947D  02                                  .byte 2,41,MAX_LEVEL,2
 947E  29
 947F  63
 9480  02

                   ParametersTable_47:                                     
                               ;tanker_load+3 
 9481  02                                  .byte 2,1,48,1
 9482  01
 9483  30
 9484  01
 9485  02                                  .byte 2,49,MAX_LEVEL,3
 9486  31
 9487  63
 9488  03

                   min_spikers_table:                                      
                              
 9489  04                                  .byte 4,1,4,0,0,0,1             
                               
 948A  01
 948B  04
 948C  00
 948D  00
 948E  00
 948F  01
 9490  02                                  .byte 2,5,16,2                  
                               
 9491  05
 9492  10
 9493  02
 9494  02                                  .byte 2,17,19,0                 
                               
 9495  11
 9496  13
 9497  00
 9498  02                                  .byte 2,20,32,1
 9499  14
 949A  20
 949B  01
 949C  02                                  .byte 2,35,39,1
 949D  23
 949E  27
 949F  01
 94A0  02                                  .byte 2,44,MAX_LEVEL,1
 94A1  2C
 94A2  63
 94A3  01
 94A4  00                                  .byte 0
                   max_spikers_table:                                      
                              
 94A5  04                                  .byte 4,1,6,0,0,0,2,3,4
 94A6  01
 94A7  06
 94A8  00
 94A9  00
 94AA  00
 94AB  02
 94AC  03
 94AD  04
 94AE  02                                  .byte 2,7,10,4
 94AF  07
 94B0  0A
 94B1  04
 94B2  02                                  .byte 2,11,16,3
 94B3  0B
 94B4  10
 94B5  03
 94B6  02                                  .byte 2,20,25,2
 94B7  14
 94B8  19
 94B9  02
 94BA  04                                  .byte 4,26,32,1,2,2,2,1,1,2
 94BB  1A
 94BC  20
 94BD  01
 94BE  02
 94BF  02
 94C0  02
 94C1  01
 94C2  01
 94C3  02
 94C4  02                                  .byte 2,53,39,1
 94C5  35
 94C6  27
 94C7  01
 94C8  02                                  .byte 2,43,MAX_LEVEL,1
 94C9  2B
 94CA  63
 94CB  01
 94CC  00                                  .byte 0

                   min_flippers_table:                                     
                               
 94CD  02                                  .byte 2,1,4,1
 94CE  01
 94CF  04
 94D0  01
 94D1  02                                  .byte 2,5,MAX_LEVEL,0
 94D2  05
 94D3  63
 94D4  00
 94D5  00                                  .byte 0

                   max_flippers_table:                                     
                               
 94D6  02                                  .byte 2,1,4,4
 94D7  01
 94D8  04
 94D9  04
 94DA  02                                  .byte 2,5,16,5
 94DB  05
 94DC  10
 94DD  05
 94DE  02                                  .byte 2,17,19,3
 94DF  11
 94E0  13
 94E1  03
 94E2  02                                  .byte 2,20,25,4
 94E3  14
 94E4  19
 94E5  04
 94E6  02                                  .byte 2,26,MAX_LEVEL,5
 94E7  1A
 94E8  63
 94E9  05
 94EA  00                                  .byte 0

                   min_tankers_table:                                      
                              
 94EB  04                                  .byte 4,1,4,0,0,1,0
 94EC  01
 94ED  04
 94EE  00
 94EF  00
 94F0  01
 94F1  00
 94F2  02                                  .byte 2,5,16,1
 94F3  05
 94F4  10
 94F5  01
 94F6  02                                  .byte 2,17,32,1
 94F7  11
 94F8  20
 94F9  01
 94FA  02                                  .byte 2,33,39,1
 94FB  21
 94FC  27
 94FD  01
 94FE  02                                  .byte 2,40,MAX_LEVEL,1
 94FF  28
 9500  63
 9501  01
 9502  00                                  .byte 0

                   max_tankers_table:                                      
                              
 9503  04                                  .byte 4,1,5,0,0,1,0,1
 9504  01
 9505  05
 9506  00
 9507  00
 9508  01
 9509  00
 950A  01
 950B  02                                  .byte 2,6,16,2
 950C  06
 950D  10
 950E  02
 950F  02                                  .byte 2,17,26,1
 9510  11
 9511  1A
 9512  01
 9513  02                                  .byte 2,27,32,1
 9514  1B
 9515  20
 9516  01
 9517  02                                  .byte 2,33,44,2
 9518  21
 9519  2C
 951A  02
 951B  02                                  .byte 2,45,MAX_LEVEL,3
 951C  2D
 951D  63
 951E  03
 951F  00                                  .byte 0

                   min_pulsars_table:                                      
                              
 9520  02                                  .byte 2,17,32,2
 9521  11
 9522  20
 9523  02
 9524  02                                  .byte 2,33,MAX_LEVEL,1
 9525  21
 9526  63
 9527  01
 9528  00                                  .byte 0

                   max_pulsars_table:                                      
                         
 9529  04                                  .byte 4,17,32,5,3,2,2,2,2,2,2,2,
                   2,2,2,2,3,4,2
 952A  11
 952B  20
 952C  05
 952D  03
 952E  02
 952F  02
 9530  02
 9531  02
 9532  02
 9533  02
 9534  02
 9535  02
 9536  02
 9537  02
 9538  02
 9539  03
 953A  04
 953B  02
 953C  02                                  .byte 2,33,MAX_LEVEL,3
 953D  21
 953E  63
 953F  03
 9540  00                                  .byte 0

                   min_fuseballs_table:                                    
                                
 9541  02                                  .byte 2,11,16,1                 
                   ; From Level 11 to 16, 1 Fuseball min
 9542  0B
 9543  10
 9544  01
 9545  02                                  .byte 2,22,25,1                 
                   ; From Level 22 to 25, 1 Fuseball min 
 9546  16
 9547  19
 9548  01
 9549  02                                  .byte 2,27,MAX_LEVEL,1          
                   ; From Level 27 to 98, 1 Fuseball min
 954A  1B
 954B  63
 954C  01
 954D  00                                  .byte 0

                   max_fuseballs_table:                                    
                                
 954E  02                                  .byte 2,11,16,1                 
                   ; From Level 11 to 16, 1 Fuseball max
 954F  0B
 9550  10
 9551  01
 9552  02                                  .byte 2,22,25,1                 
                   ; From Level 22 to 25, 1 Fuseball max
 9553  16
 9554  19
 9555  01
 9556  02                                  .byte 2,27,32,1                 
                   ; From Level 27 to 32, 1 Fuseball max
 9557  1B
 9558  20
 9559  01
 955A  02                                  .byte 2,33,39,4                 
                   ; From Level 33 to 39, 4 Fuseballs max
 955B  21
 955C  27
 955D  04
 955E  02                                  .byte 2,40,MAX_LEVEL,3          
                   ; From Level 40 to 99, 3 Fuseballs max
 955F  28
 9560  63
 9561  03
 9562  00                                  .byte 0

                   pulsar_fliprate_table:                                  
                                  
 9563  04                                  .byte 4,17,18,40,20
 9564  11
 9565  12
 9566  28
 9567  14
 9568  0C                                  .byte 12,19,32,20,40
 9569  13
 956A  20
 956B  14
 956C  28
 956D  08                                  .byte 8,33,39,20,255
 956E  21
 956F  27
 9570  14
 9571  FF
 9572  0C                                  .byte 12,40,MAX_LEVEL,20,10
 9573  28
 9574  63
 9575  14
 9576  0A
 9577  00                                  .byte 0

                   fuse_move_flg_table:                                    
                                
 9578  0C                                  .byte 12,17,32,0,64
 9579  11
 957A  20
 957B  00
 957C  40
 957D  0C                                  .byte 12,33,48,64,192
 957E  21
 957F  30
 9580  40
 9581  C0
 9582  02                                  .byte 2,49,MAX_LEVEL,192
 9583  31
 9584  63
 9585  C0
 9586  00                                  .byte 0

                   fuse_move_prb_table:                                    
                                
 9587  02                                  .byte 2,1,16,220
 9588  01
 9589  10
 958A  DC
 958B  02                                  .byte 2,17,39,192
 958C  11
 958D  27
 958E  C0
 958F  08                                  .byte 8,40,64,192,1
 9590  28
 9591  40
 9592  C0
 9593  01
 9594  02                                  .byte 2,65,LAST_GREEN,230     
 9595  41
 9596  63
 9597  E6
                   .if ADD_LEVEL
                   .endif                                     

                   MaxActiveEnemies_table:                                 
                                   
 9598  02                                  .byte 2,1,MAX_LEVEL,6           
                               ; 7 active enemies max on any level
 9599  01
 959A  63
 959B  06

                   wave_spikeht_table:                                     
                               
 959C  06                                  .byte 6,1,MAX_LEVEL,0,0,0,224,
                   216,212,208,200,192,184,176,168,160,160,160,168
 959D  01
 959E  63
 959F  00
 95A0  00
 95A1  00
 95A2  E0
 95A3  D8
 95A4  D4
 95A5  D0
 95A6  C8
 95A7  C0
 95A8  B8
 95A9  B0
 95AA  A8
 95AB  A0
 95AC  A0
 95AD  A0
 95AE  A8
 95AF  A0                                  .byte 0A0h
 95B0  9C                                  .byte 9Ch
 95B1  9A                                  .byte 9Ah
 95B2  98                                  .byte 98h

                   wave_enemies_table:                                     
                               
 95B3  04                                  .byte 4,1,16,10,12,15,17,20,22,
                   20,24,27,29,27,24,26,28,30,27
 95B4  01
 95B5  10
 95B6  0A
 95B7  0C
 95B8  0F
 95B9  11
 95BA  14
 95BB  16
 95BC  14
 95BD  18
 95BE  1B
 95BF  1D
 95C0  1B
 95C1  18
 95C2  1A
 95C3  1C
 95C4  1E
 95C5  1B
 95C6  08                                  .byte 8,17,26,20,1      
 95C7  11
 95C8  1A
 95C9  14
 95CA  01
 95CB  02                                  .byte 2,27,39,27
 95CC  1B
 95CD  27
 95CE  1B
 95CF  08                                  .byte 8,40,48,29,1
 95D0  28
 95D1  30
 95D2  1D
 95D3  01
 95D4  08                                  .byte 8,49,64,31,1
 95D5  31
 95D6  40
 95D7  1F
 95D8  01
 95D9  08                                  .byte 8,65,80,35,1
 95DA  41
 95DB  50
 95DC  23
 95DD  01
 95DE  08                                  .byte 8,81,MAX_LEVEL,43,1
 95DF  51
 95E0  63
 95E1  2B
 95E2  01

                   flip_top_accel_table:                                   
                                 
 95E3  02                                  .byte 2,1,20,2
 95E4  01
 95E5  14
 95E6  02
 95E7  02                                  .byte 2,21,32,2
 95E8  15
 95E9  20
 95EA  02
 95EB  02                                  .byte 2,33,MAX_LEVEL,3
 95EC  21
 95ED  63
 95EE  03

                   pulsar_fire_table:                                      
                              
 95EF  02                                  .byte 2, 60, MAX_LEVEL, $40
 95F0  3C
 95F1  63
 95F2  40
 95F3  00                                  .byte 0

                   flipper_move_table:                                     
                               
 95F4  06                                  .byte 6,1,MAX_LEVEL,7,11,25,36,
                   83,11,36,25,83,135,36,25,83,7,135,36
 95F5  01
 95F6  63
 95F7  07
 95F8  0B
 95F9  19
 95FA  24
 95FB  53
 95FC  0B
 95FD  24
 95FE  19
 95FF  53
 9600  87
 9601  24
 9602  19
 9603  53
 9604  07
 9605  87
 9606  24


                   ; See the code beginning $92d6.

 9607  EF 95       ParametersTable:        .word    pulsar_fire_table
 9609  6D 01                               .word    pulsar_fire

 960B  E3 95                               .word    flip_top_accel_table
 960D  B3 00                               .word    flip_top_accel

 960F  FA 93                               .word    shot_holdoff_table
 9611  19 01                               .word    shot_holdoff

 9613  07 94                               .word    MaxEnemyShots_table
 9615  1A 01                               .word    MaxEnemyShots

 9617  CD 94                               .word    min_flippers_table
 9619  29 01                               .word    min_flippers

 961B  D6 94                               .word    max_flippers_table
 961D  2E 01                               .word    max_flippers

 961F  20 95                               .word    min_pulsars_table
 9621  2A 01                               .word    min_pulsars

 9623  29 95                               .word    max_pulsars_table
 9625  2F 01                               .word    max_pulsars

 9627  EB 94                               .word    min_tankers_table
 9629  2B 01                               .word    min_tankers

 962B  03 95                               .word    max_tankers_table
 962D  30 01                               .word    max_tankers

 962F  89 94                               .word    min_spikers_table
 9631  2C 01                               .word    min_spikers

 9633  A5 94                               .word    max_spikers_table
 9635  31 01                               .word    max_spikers

 9637  41 95                               .word    min_fuseballs_table
 9639  2D 01                               .word    min_fuseballs

 963B  4E 95                               .word    max_fuseballs_table
 963D  32 01                               .word    max_fuseballs

 963F  5D 94                               .word    lethal_distance_table
 9641  57 01                               .word    lethal_distance

 9643  69 94                               .word    pulse_beat_table
 9645  47 01                               .word    pulse_beat

 9647  75 94                               .word    ParametersTable_43
 9649  4B 01                               .word    tanker_load+2

 964B  81 94                               .word    ParametersTable_47
 964D  4C 01                               .word    tanker_load+3

 964F  98 95                               .word    MaxActiveEnemies_table
 9651  1C 01                               .word    MaxActiveEnemies

 9653  B3 95                               .word    wave_enemies_table
 9655  5B 01                               .word    wave_enemies

 9657  9C 95                               .word    wave_spikeht_table
 9659  5A 01                               .word    wave_spikeht

 965B  63 95                               .word    pulsar_fliprate_table
 965D  B2 00                               .word    pulsar_fliprate

 965F  F4 95                               .word    flipper_move_table
 9661  5D 01                               .word    flipper_move

 9663  4D 94                               .word    spd_spiker_lsb_table
 9665  63 01                               .word    spd_spiker_lsb

 9667  49 94                               .word    enm_shotspd_lsb_table
 9669  20 01                               .word    enm_shotspd_lsb

 966B  1B 94                               .word    spd_flipper_lsb_table
 966D  60 01                               .word    spd_flipper_lsb

 966F  78 95                               .word    fuse_move_flg_table
 9671  59 01                               .word    fuse_move_flg

 9673  87 95                               .word    fuse_move_prb_table
 9675  5F 01                               .word    fuse_move_prb

 0000  6F 00 00 00 ParameterTableLength    .equ * - ParametersTable - 1

 9677  AE          loc9677:                ldx     $015e
 9678  5E 01
 967A  BD                                  lda     loc9690,x
 967B  90 96
 967D  48                                  pha
 967E  BD                                  lda     loc9690-1,x
 967F  8F 96
 9681  48                                  pha
 9682  60                                  rts

 9683  AE          loc9683:                ldx     $015e
 9684  5E 01
 9686  BD                                  lda     loc969e,x
 9687  9E 96
 9689  48                                  pha
 968A  BD                                  lda     loc969e-1,x
 968B  9D 96
 968D  48                                  pha
 968E  60                                  rts

                   ; Jump table used by code at 9677.
                   ; ltmin = first level-test.byte
                   ; ltmax = second level-test.byte
                   ; b[] =.bytes following level test.bytes
                   ; thus, we have:                opcode ltmin ltmax b[0] 
                   b[1] b[2] etc...
                   ; (loc) = contents of memory location loc
                   ; lev = current level number
                   ; lwb = (((lev-1)&15)+1 - level # within its block of 
                   16 levels

 968F  00                                  .byte   00
 9690  00          loc9690:                .byte   00                  ; ( 
                   0) not used - tested for at $92fb
 9691  C3 96                               .word   loc968f_02-1        ; ( 
                   2) A = b[0]
 9693  B6 96                               .word   loc968f_04-1        ; ( 
                   4) A = b[lev-ltmin]
 9695  AA 96                               .word   loc968f_06-1        ; ( 
                   6) A = b[lwb-ltmin]
 9697  E1 96                               .word   loc968f_08-1        ; ( 
                   8) A = b[0] + ((lev-ltmin) * b[1])
 9699  DA 96                               .word   loc968f_0a-1        ; 
                   (10) A = b[0] + ($0160)
 969B  FF 96                               .word   loc968f_0c-1        ; 
                   (12) A = b[(lev-ltmin)&1]

                   ; Jump table used by code at 9683.

 969D  00                                  .byte   00
 969E  00          loc969e:                .byte   00                  ; 
                   not used - tested for at $92fb

 969F  C7 96                               .word   loc969d_02_0a-1     ; Y 
                   += 2
 96A1  CA 96                               .word   loc969d_04_06-1     ; Y 
                   += ltmax - ltmin + 2
 96A3  CA 96                               .word   loc969d_04_06-1     ; Y 
                   += ltmax - ltmin + 2
 96A5  C6 96                               .word   loc969d_08_0c-1     ; Y 
                   += 3
 96A7  C7 96                               .word   loc969d_02_0a-1     ; Y 
                   += 2
 96A9  C6 96                               .word   loc969d_08_0c-1     ; Y 
                   += 3

 96AB  A5          loc968f_06:             lda     $2b
 96AC  2B
 96AD  38                                  sec
 96AE  E9                                  sbc     #$01
 96AF  01
 96B0  29                                  and     #$0f
 96B1  0F
 96B2  18                                  clc
 96B3  69                                  adc     #$01
 96B4  01
 96B5  10                                  bpl     loc96b9
 96B6  02
  [ =96B9 ]

 96B7  A5          loc968f_04:             lda     $2b
 96B8  2B
 96B9  84          loc96b9:                sty     $29
 96BA  29
 96BB  88                                  dey
 96BC  88                                  dey
 96BD  38                                  sec
 96BE  F1                                  sbc     ($2c),y
 96BF  2C
 96C0  18                                  clc
 96C1  65                                  adc     $29
 96C2  29
 96C3  A8                                  tay                 

 96C4  B1          loc968f_02:             lda     ($2c),y
 96C5  2C
 96C6  60                                  rts

 96C7  C8          loc969d_08_0c:          iny
 96C8  C8          loc969d_02_0a:          iny
 96C9  C8                                  iny
 96CA  60                                  rts
 96CB  B1          loc969d_04_06:          lda     ($2c),y
 96CC  2C
 96CD  88                                  dey
 96CE  38                                  sec
 96CF  F1                                  sbc     ($2c),y
 96D0  2C
 96D1  85                                  sta     $29
 96D2  29
 96D3  98                                  tya
 96D4  38                                  sec
 96D5  65                                  adc     $29
 96D6  29
 96D7  A8                                  tay
 96D8  C8                                  iny
 96D9  C8                                  iny
 96DA  60                                  rts
 96DB  B1          loc968f_0a:             lda     ($2c),y
 96DC  2C
 96DD  18                                  clc
 96DE  6D                                  adc     spd_flipper_lsb
 96DF  60 01
 96E1  60                                  rts
 96E2  20          loc968f_08:             jsr     loc96f4
 96E3  F4 96
 96E5  AA                                  tax
 96E6  B1                                  lda     ($2c),y
 96E7  2C
 96E8  C8                                  iny
 96E9  E0                                  cpx     #$00
 96EA  00
 96EB  F0                                  beq     loc96f3
 96EC  06
  [ =96F3 ]
 96ED  18          loc96ed:                clc
 96EE  71                                  adc     ($2c),y
 96EF  2C
 96F0  CA                                  dex
 96F1  D0                                  bne     loc96ed
 96F2  FA
  [ =96ED ]
 96F3  60          loc96f3:                rts

                   ; Set A to current level number minus base level number

 96F4  A5          loc96f4:                lda     $2b
 96F5  2B
 96F6  84                                  sty     $29
 96F7  29
 96F8  88                                  dey
 96F9  88                                  dey
 96FA  38                                  sec
 96FB  F1                                  sbc     ($2c),y
 96FC  2C
 96FD  C8                                  iny
 96FE  C8                                  iny
 96FF  60                                  rts
 9700  20          loc968f_0c:             jsr     loc96f4
 9701  F4 96
 9703  29                                  and     #$01
 9704  01
 9705  F0                                  beq     loc9708
 9706  01
  [ =9708 ]
 9707  C8                                  iny
 9708  B1          loc9708:                lda     ($2c),y
 9709  2C
 970A  60                                  rts

 970B  20          State_Playing:          jsr     move_player
 970C  49 97
 970E  20                                  jsr     CheckPlayerFire
 970F  3F A2
 9711  20                                  jsr     check_zap
 9712  3A A8
 9714  20                                  jsr     create_enemies
 9715  A2 98
 9717  20                                  jsr     move_enemies
 9718  1E 9B
 971A  20                                  jsr     move_shots
 971B  8F A1
 971D  20                                  jsr     enm_shoot
 971E  A6 A2
 9720  20                                  jsr     CheckAllPlayerShots
 9721  54 A4
 9723  20                                  jsr     loca416
 9724  16 A4
 9726  4C                                  jmp     loca504
 9727  04 A5

 9729  AD          State_ZoomingDown:      lda     $0123
 972A  23 01
 972C  29                                  and     #$7f                    
                           ; ~$80
 972D  7F
 972E  8D                                  sta     $0123
 972F  23 01
 9731  20                                  jsr     move_player
 9732  49 97
 9734  20                                  jsr     loc97f8
 9735  F8 97
 9737  20                                  jsr     loca416
 9738  16 A4
 973A  20                                  jsr     CheckPlayerFire
 973B  3F A2
 973D  20                                  jsr     move_shots
 973E  8F A1
 9740  AD                                  lda     player_state
 9741  01 02
 9743  10                                  bpl     loc9748
 9744  03
  [ =9748 ]
 9745  20                                  jsr     loca504
 9746  04 A5
 9748  60          loc9748:                rts

                   ; handles player movement

 9749  AD          move_player:            lda     player_state
 974A  01 02
 974C  10                                  bpl     loc974f
 974D  01
  [ =974F ]
 974E  60                                  rts

 974F  A2          loc974f:                ldx     #$00
 9750  00
 9751  A5                                  lda     game_mode
 9752  05
 9753  30                                  bmi     loc975b
 9754  06
  [ =975B ]
 9755  20                                  jsr     loc97c5
 9756  C5 97
 9758  B8                                  clv
 9759  50                                  bvc     loc9770
 975A  15
  [ =9770 ]
 975B  A5          loc975b:                lda     $50
 975C  50
 975D  10                                  bpl     loc9768
 975E  09
  [ =9768 ]
 975F  C9                                  cmp     #-31
 9760  E1
 9761  B0                                  bcs     loc9765
 9762  02
  [ =9765 ]
 9763  A9                                  lda     #-31
 9764  E1
 9765  B8          loc9765:                clv
 9766  50                                  bvc     loc976e
 9767  06
  [ =976E ]
 9768  C9          loc9768:                cmp     #31
 9769  1F
 976A  90                                  bcc     loc976e
 976B  02
  [ =976E ]
 976C  A9                                  lda     #31
 976D  1F
 976E  86          loc976e:                stx     $50
 976F  50
 9770  85          loc9770:                sta     $2b
 9771  2B
 9772  49                                  eor     #$ff
 9773  FF
 9774  38                                  sec
 9775  65                                  adc     $51
 9776  51
 9777  85                                  sta     $2c
 9778  2C
 9779  AE                                  ldx     open_level
 977A  11 01
 977C  F0                                  beq     loc979d
 977D  1F
  [ =979D ]
 977E  C9                                  cmp     #$f0
 977F  F0
 9780  90                                  bcc     loc9786
 9781  04
  [ =9786 ]
 9782  A9                                  lda     #$ef
 9783  EF
 9784  85                                  sta     $2c
 9785  2C
 9786  45          loc9786:                eor     $2b
 9787  2B
 9788  10                                  bpl     loc979d
 9789  13
  [ =979D ]
 978A  A5                                  lda     $2c
 978B  2C
 978C  45                                  eor     $51
 978D  51
 978E  10                                  bpl     loc979d
 978F  0D
  [ =979D ]
 9790  A5                                  lda     $51
 9791  51
 9792  30                                  bmi     loc9799
 9793  05
  [ =9799 ]
 9794  A9                                  lda     #$00
 9795  00
 9796  B8                                  clv
 9797  50                                  bvc     loc979b
 9798  02
  [ =979B ]
 9799  A9          loc9799:                lda     #$ef
 979A  EF
 979B  85          loc979b:                sta     $2c
 979C  2C
 979D  A5          loc979d:                lda     $2c
 979E  2C
 979F  4A                                  lsr     a
 97A0  4A                                  lsr     a
 97A1  4A                                  lsr     a
 97A2  4A                                  lsr     a
 97A3  85                                  sta     $2a
 97A4  2A
 97A5  18                                  clc
 97A6  69                                  adc     #$01
 97A7  01
 97A8  29                                  and     #$0f
 97A9  0F
 97AA  85                                  sta     $2b
 97AB  2B
 97AC  A5                                  lda     $2a
 97AD  2A
 97AE  CD                                  cmp     player_seg
 97AF  00 02
 97B1  F0                                  beq     loc97b6
 97B2  03
  [ =97B6 ]
 97B3  20                                  jsr     locccb5
 97B4  B5 CC
 97B6  A5          loc97b6:                lda     $2a
 97B7  2A
 97B8  8D                                  sta     player_seg
 97B9  00 02
 97BB  A5                                  lda     $2b
 97BC  2B
 97BD  8D                                  sta     player_state
 97BE  01 02
 97C0  A5                                  lda     $2c
 97C1  2C
 97C2  85                                  sta     $51
 97C3  51
 97C4  60                                  rts

                   ; Find extant enemy which is highest up the tube.  
                   Return -9 or 9 depending
                   ; on which way we need to go to get to it, or -1 if 
                   there is no such enemy,
                   ; or 0 if there is but we're already on the correct 
                   segment.

                   ; Likely important for attact mode where the automated 
                   shooter always 
                   ; moves to shoot the enemy furthest up the tube

 97C5  A9          loc97c5:                lda     #$ff
 97C6  FF
 97C7  85                                  sta     $29
 97C8  29
 97C9  85                                  sta     $2a
 97CA  2A
 97CB  AE                                  ldx     MaxActiveEnemies
 97CC  1C 01
 97CE  BD          loc97ce:                lda     enemy_along,x
 97CF  DF 02
 97D1  F0                                  beq     loc97db
 97D2  08
  [ =97DB ]
 97D3  C5                                  cmp     $29
 97D4  29
 97D5  B0                                  bcs     loc97db
 97D6  04
  [ =97DB ]
 97D7  85                                  sta     $29
 97D8  29
 97D9  86                                  stx     $2a
 97DA  2A
 97DB  CA          loc97db:                dex
 97DC  10                                  bpl     loc97ce
 97DD  F0
  [ =97CE ]
 97DE  A6                                  ldx     $2a
 97DF  2A
 97E0  30                                  bmi     loc97f7
 97E1  15
  [ =97F7 ]
 97E2  BD                                  lda     enemy_seg,x
 97E3  B9 02
 97E5  AC                                  ldy     player_seg
 97E6  00 02
 97E8  20                                  jsr     SubYFromAWithWrap
 97E9  A6 A7
 97EB  A8                                  tay
 97EC  F0                                  beq     loc97f7
 97ED  09
  [ =97F7 ]
 97EE  30                                  bmi     loc97f5
 97EF  05
  [ =97F5 ]
 97F0  A9                                  lda     #-9
 97F1  F7
 97F2  B8                                  clv
 97F3  50                                  bvc     loc97f7
 97F4  02
  [ =97F7 ]
 97F5  A9          loc97f5:                lda     #$09
 97F6  09
 97F7  60          loc97f7:                rts
 97F8  AD          loc97f8:                lda     player_state
 97F9  01 02
 97FB  10                                  bpl     loc97fe
 97FC  01
  [ =97FE ]
 97FD  60                                  rts
 97FE  AD          loc97fe:                lda     $0106
 97FF  06 01
 9801  30                                  bmi     loc9804
 9802  01
  [ =9804 ]
 9803  60                                  rts
 9804  AD          loc9804:                lda     player_along
 9805  02 02
 9807  C9                                  cmp     #TOP_OF_TUNNEL
 9808  10
 9809  D0                                  bne     loc980e
 980A  03
  [ =980E ]
 980B  20                                  jsr     locccee
 980C  EE CC
 980E  AD          loc980e:                lda     along_lsb
 980F  07 01
 9811  18                                  clc
 9812  6D                                  adc     zoomspd_lsb
 9813  04 01
 9815  8D                                  sta     along_lsb
 9816  07 01
 9818  AD                                  lda     player_along
 9819  02 02
 981B  6D                                  adc     zoomspd_msb
 981C  05 01
 981E  8D                                  sta     player_along
 981F  02 02
 9821  B0                                  bcs     loc9825
 9822  02
  [ =9825 ]
 9823  C9                                  cmp     #END_OF_TUNNEL
 9824  F0
 9825  90          loc9825:                bcc     loc9833
 9826  0C
  [ =9833 ]
 9827  A9                                  lda     #GS_ZoomOffEnd
 9828  0E
 9829  85                                  sta     gamestate
 982A  00
 982B  20                                  jsr     locccf2
 982C  F2 CC
 982E  A9                                  lda     #$ff
 982F  FF
 9830  8D                                  sta     player_along
 9831  02 02
 9833  AD          loc9833:                lda     player_along
 9834  02 02
 9836  C9                                  cmp     #$50
 9837  50
 9838  90                                  bcc     loc9842
 9839  08
  [ =9842 ]
 983A  AD                                  lda     $0115
 983B  15 01
 983D  D0                                  bne     loc9842
 983E  03
  [ =9842 ]
 983F  20                                  jsr     loca7bd
 9840  BD A7
 9842  A5          loc9842:                lda     $5c
 9843  5C
 9844  18                                  clc
 9845  6D                                  adc     zoomspd_lsb
 9846  04 01
 9848  85                                  sta     $5c
 9849  5C
 984A  A5                                  lda     $5f
 984B  5F
 984C  6D                                  adc     zoomspd_msb
 984D  05 01
 984F  90                                  bcc     +
 9850  02
  [ =9853 ]
 9851  E6                                  inc     $5b
 9852  5B
 9853  C5          +                       cmp     $5f
 9854  5F
 9855  F0                                  beq     +
 9856  03
  [ =985A ]
 9857  EE                                  inc     $0114
 9858  14 01
 985A  85          +                       sta     $5f
 985B  5F

                   ; Accelerate based on current level value.  The 
                   computation here is
                   ; [zoomspd_msb:zoomspd_lsb] += v, where v is
                   ; 
                   (((((curlevel<<2)&$ff)<$30)?$30:((curlevel<<2)&$ff))+$20
                   )&$ff, which
                   ; simplifies to 
                   (((((curlevel&63)<12)?12:curlevel)<<2)+$20)&$ff.
                   ; This means slow zooms starting at level 56 (where 
                   level<<2 hits $e0),
                   ; because the carry out of the +$20 add is explicitly 
                   cleared ($9869).

 985C  A5                                  lda     curlevel
 985D  9F
 985E  0A                                  asl     a
 985F  0A                                  asl     a
 9860  C9                                  cmp     #$30
 9861  30
 9862  90                                  bcc     loc9866 ; branch for 
                   1-11 and 64-74
 9863  02
  [ =9866 ]
 9864  A9                                  lda     #$30
 9865  30
 9866  18          loc9866:                clc
 9867  69                                  adc     #$20
 9868  20
 9869  18                                  clc
 986A  6D                                  adc     zoomspd_lsb
 986B  04 01
 986D  8D                                  sta     zoomspd_lsb
 986E  04 01

                   ; Why not "bcc 1: ; inc zoomspd_msb ; 1:"?  I have no 
                   idea.

 9870  AD                                  lda     zoomspd_msb
 9871  05 01
 9873  69                                  adc     #$00
 9874  00
 9875  8D                                  sta     zoomspd_msb
 9876  05 01
 9878  AD                                  lda     player_along
 9879  02 02
 987B  C9                                  cmp     #$f0
 987C  F0
 987D  B0                                  bcs     loc98a1
 987E  22
  [ =98A1 ]

                   ; Check for player getting spiked
                   ; I do not understand why scan all segments here, 
                   instead of just checking
                   ; the value for player_seg, when $9886/$9889 ensure 
                   that only player_seg's
                   ; value actually matters anyway.

 987F  A2                                  ldx     #$0f
 9880  0F
 9881  BD          loc9881:                lda     lane_spike_height,x
 9882  AC 03
 9884  F0                                  beq     loc989e
 9885  18
  [ =989E ]
 9886  EC                                  cpx     player_seg
 9887  00 02
 9889  D0                                  bne     loc989e
 988A  13
  [ =989E ]
 988B  CD                                  cmp     player_along
 988C  02 02
 988E  B0                                  bcs     loc989e
 988F  0E
  [ =989E ]
 9890  20                                  jsr     sound_pulsar
 9891  06 CD
 9893  20                                  jsr     pieces_death
 9894  47 A3
 9896  A9                                  lda     #$00
 9897  00
 9898  8D                                  sta     $0115
 9899  15 01
 989B  20                                  jsr     ClearAllShots
 989C  8F 92
 989E  CA          loc989e:                dex
 989F  10                                  bpl     loc9881
 98A0  E0
  [ =9881 ]
 98A1  60          loc98a1:                rts

 98A2  A0          create_enemies:         ldy     #$00
 98A3  00
 98A4  8C                                  sty     $014f
 98A5  4F 01
 98A7  AD                                  lda     NumEnemiesInTube
 98A8  08 01
 98AA  18                                  clc
 98AB  6D                                  adc     NumEnemiesOnTop
 98AC  09 01
 98AE  CD                                  cmp     MaxActiveEnemies
 98AF  1C 01
 98B1  90                                  bcc     loc98b7
 98B2  04
  [ =98B7 ]
 98B3  F0                                  beq     loc98b7
 98B4  02
  [ =98B7 ]

 98B5  A0                                  ldy     #$ff
 98B6  FF
 98B7  AD          loc98b7:                lda     zap_running
 98B8  25 01
 98BA  F0                                  beq     loc98be
 98BB  02
  [ =98BE ]
 98BC  A0                                  ldy     #$ff
 98BD  FF
 98BE  84          loc98be:                sty     $2f
 98BF  2F

 98C0  A2                                  ldx     #$3f
 98C1  3F
 98C2  BD          loc98c2:                lda     pending_vid,x
 98C3  43 02
 98C5  F0                                  beq     next_slot
 98C6  52
  [ =9919 ]
 98C7  24                                  bit     $2f
 98C8  2F
 98C9  30                                  bmi     loc98ee
 98CA  23
  [ =98EE ]
 98CB  38                                  sec
 98CC  E9                                  sbc     #$01
 98CD  01
 98CE  9D                                  sta     pending_vid,x
 98CF  43 02
 98D1  D0                                  bne     loc98d9
 98D2  06
  [ =98D9 ]
 98D3  20                                  jsr     loc9923
 98D4  23 99
 98D6  B8                                  clv
 98D7  50                                  bvc     loc98ee
 98D8  15
  [ =98EE ]
 98D9  C9          loc98d9:                cmp     #$3f
 98DA  3F
 98DB  D0                                  bne     loc98ee
 98DC  11
  [ =98EE ]
 98DD  BC                                  ldy     pending_seg,x
 98DE  03 02
 98E0  AD                                  lda     $014f
 98E1  4F 01
 98E3  0D                                  ora     $014f
 98E4  4F 01
 98E6  39                                  and     locca38,y
 98E7  38 CA
 98E9  F0                                  beq     loc98ee
 98EA  03
  [ =98EE ]
 98EB  FE                                  inc     pending_vid,x
 98EC  43 02
 98EE  BD          loc98ee:                lda     pending_vid,x
 98EF  43 02
 98F1  C9                                  cmp     #$40
 98F2  40
 98F3  90                                  bcc     loc9909
 98F4  14
  [ =9909 ]
 98F5  A5                                  lda     timectr
 98F6  03
 98F7  29                                  and     #$01
 98F8  01
 98F9  D0                                  bne     loc9906
 98FA  0B
  [ =9906 ]
 98FB  BD                                  lda     pending_seg,x
 98FC  03 02
 98FE  18                                  clc
 98FF  69                                  adc     #$01
 9900  01
 9901  29                                  and     #$0f
 9902  0F
 9903  9D                                  sta     pending_seg,x
 9904  03 02
 9906  B8          loc9906:                clv
 9907  50                                  bvc     next_slot
 9908  10
  [ =9919 ]
 9909  C9          loc9909:                cmp     #$20
 990A  20
 990B  90                                  bcc     next_slot
 990C  0C
  [ =9919 ]
 990D  BC                                  ldy     pending_seg,x
 990E  03 02
 9910  B9                                  lda     locca38,y
 9911  38 CA
 9913  0D                                  ora     $014f
 9914  4F 01
 9916  8D                                  sta     $014f
 9917  4F 01
 9919  CA          next_slot:              dex
 991A  10                                  bpl     loc98c2
 991B  A6
  [ =98C2 ]
 991C  AD                                  lda     $014f
 991D  4F 01
 991F  8D                                  sta     $0150
 9920  50 01
 9922  60                                  rts

 9923  A9          loc9923:                lda     #$f0
 9924  F0
 9925  85                                  sta     $29
 9926  29
 9927  BD                                  lda     pending_seg,x
 9928  03 02
 992A  85                                  sta     $2a
 992B  2A
 992C  86                                  stx     $35
 992D  35
 992E  20                                  jsr     CreateNewEnemy
 992F  A5 99
 9931  A6                                  ldx     $35
 9932  35
 9933  A5                                  lda     $29
 9934  29
 9935  F0                                  beq     loc9945
 9936  0E
  [ =9945 ]
 9937  20                                  jsr     loc994d
 9938  4D 99
 993A  F0                                  beq     loc9945
 993B  09
  [ =9945 ]
 993C  CE                                  dec     enemies_pending
 993D  AB 03
 993F  A9                                  lda     #$00
 9940  00
 9941  9D                                  sta     pending_vid,x
 9942  43 02
 9944  60                                  rts

 9945  A9          loc9945:                lda     #$ff
 9946  FF
 9947  85                                  sta     $2f
 9948  2F
 9949  FE                                  inc     pending_vid,x
 994A  43 02
 994C  60                                  rts

 994D  84          loc994d:                sty     $36
 994E  36
 994F  AC                                  ldy     MaxActiveEnemies
 9950  1C 01
 9952  B9          loc9952:                lda     enemy_along,y
 9953  DF 02
 9955  D0                                  bne     loc999d
 9956  46
  [ =999D ]
 9957  A5                                  lda     $29                 ; 
                   along value
 9958  29
 9959  99                                  sta     enemy_along,y
 995A  DF 02
 995C  A5                                  lda     $2a                 ; 
                   segment number
 995D  2A
 995E  C9                                  cmp     #$0f
 995F  0F
 9960  D0                                  bne     loc996c
 9961  0A
  [ =996C ]
 9962  2C                                  bit     open_level          ; 
                   If this is on segement 16 and we're not a closed level 
                   (hence no 16) pick a random one
 9963  11 01
 9965  10                                  bpl     loc996c
 9966  05
  [ =996C ]
 9967  AD                                  lda     pokey1_rand
 9968  CA 60
 996A  29                                  and     #$0e
 996B  0E
 996C  99          loc996c:                sta     enemy_seg,y
 996D  B9 02
 996F  18                                  clc
 9970  69                                  adc     #$01
 9971  01
 9972  29                                  and     #$0f
 9973  0F
 9974  99                                  sta     more_enemy_info,y
 9975  CC 02
 9977  A9                                  lda     #$00
 9978  00
 9979  99                                  sta     shot_delay,y
 997A  A6 02
 997C  A5                                  lda     $2c
 997D  2C
 997E  99                                  sta     active_enemy_info,y
 997F  8A 02
 9981  A5                                  lda     $2d
 9982  2D
 9983  99                                  sta     enm_move_pc,y
 9984  91 02
 9986  EE                                  inc     NumEnemiesInTube
 9987  08 01
 9989  A5                                  lda     $2b
 998A  2B
 998B  99                                  sta     enemy_type_info,y
 998C  83 02
 998E  A4                                  ldy     $36
 998F  36
 9990  29                                  and     #ENEMY_TYPE_MASK
 9991  07
 9992  86                                  stx     $36
 9993  36
 9994  AA                                  tax
 9995  FE                                  inc     n_enemy_by_type,x
 9996  42 01
 9998  A6                                  ldx     $36
 9999  36
 999A  A9                                  lda     #$10
 999B  10
 999C  60                                  rts
 999D  88          loc999d:                dey
 999E  10                                  bpl     loc9952
 999F  B2
  [ =9952 ]
 99A0  A4                                  ldy     $36
 99A1  36
 99A2  A9                                  lda     #$00
 99A3  00
 99A4  60                                  rts

                   ; Pick an enemy type to create a new enemy as.
                   ; First, compute the number available to be created for 
                   each type.

 99A5  A9          CreateNewEnemy:         lda     #$00
 99A6  00
 99A7  A2                                  ldx     #$04
 99A8  04
 99A9  9D          -                       sta     avl_enemy_by_type,x     
                       ; Start with zero of each enemy type available
 99AA  3D 01
 99AC  CA                                  dex
 99AD  10                                  bpl     -
 99AE  FA
  [ =99A9 ]

 99AF  A2                                  ldx     #$04
 99B0  04
 99B1  BD          -                       lda     max_enemy_by_type,x     
                       ; Find available enemies by subtracting current 
                   from max
 99B2  2E 01
 99B4  38                                  sec
 99B5  FD                                  sbc     n_enemy_by_type,x
 99B6  42 01
 99B8  90                                  bcc     +
 99B9  03
  [ =99BD ]
 99BA  9D                                  sta     avl_enemy_by_type,x
 99BB  3D 01
 99BD  CA          +                       dex
 99BE  10                                  bpl     -
 99BF  F1
  [ =99B1 ]

                   ; Now, count each tanker as two of the enemy type it's 
                   holding.
                   ; Note that this can push the availability number 
                   through zero, in which
                   ; case it wraps around to 255, but we use 'bpl' so it 
                   still works

 99C0  AC                                  ldy     MaxActiveEnemies
 99C1  1C 01
 99C3  B9          loc99c3:                lda     enemy_along,y
 99C4  DF 02
 99C6  F0                                  beq     loc99dc
 99C7  14
  [ =99DC ]
 99C8  B9                                  lda     active_enemy_info,y
 99C9  8A 02
 99CB  29                                  and     #$03
 99CC  03
 99CD  F0                                  beq     loc99dc
 99CE  0D
  [ =99DC ]
 99CF  AA                                  tax
 99D0  E0                                  cpx     #$03                    
                       ; 3 means fuseball, not tanker!
 99D1  03
 99D2  D0                                  bne     loc99d6
 99D3  02
  [ =99D6 ]

 99D4  A2                                  ldx     #$05
 99D5  05
 99D6  DE          loc99d6:                dec     avl_enemy_by_type-1,x   
                               
 99D7  3C 01
 99D9  DE                                  dec     avl_enemy_by_type-1,x   
                               
 99DA  3C 01
 99DC  88          loc99dc:                dey
 99DD  10                                  bpl     loc99c3
 99DE  E4
  [ =99C3 ]

                   ; Take this level's maximum enemy count, plus one, and 
                   subtract off the
                   ; counts of each type of enemy.

 99DF  A2                                  ldx     #$04
 99E0  04
 99E1  AD                                  lda     MaxActiveEnemies
 99E2  1C 01
 99E4  18                                  clc
 99E5  69                                  adc     #$01
 99E6  01
 99E7  38          loc99e7:                sec
 99E8  FD                                  sbc     n_enemy_by_type,x
 99E9  42 01
 99EB  CA                                  dex
 99EC  10                                  bpl     loc99e7
 99ED  F9
  [ =99E7 ]

                   ; Limit the number-available for each enemy type to the 
                   number we just
                   ; computed, the total number of enemies available.  (In 
                   particular, this
                   ; deals with the worst cases where availability has 
                   wrapped around.)

 99EE  A2                                  ldx     #$04
 99EF  04
 99F0  DD          loc99f0:                cmp     avl_enemy_by_type,x
 99F1  3D 01
 99F3  B0                                  bcs     loc99f8
 99F4  03
  [ =99F8 ]
 99F5  9D                                  sta     avl_enemy_by_type,x
 99F6  3D 01
 99F8  CA          loc99f8:                dex
 99F9  10                                  bpl     loc99f0
 99FA  F5
  [ =99F0 ]

                   ; Figure out how many enemy types have nonzero 
                   availability.

 99FB  A2                                  ldx     #$04
 99FC  04
 99FD  A0                                  ldy     #$00
 99FE  00
 99FF  BD          loc99ff:                lda     avl_enemy_by_type,x
 9A00  3D 01
 9A02  F0                                  beq     loc9a05
 9A03  01
  [ =9A05 ]
 9A04  C8                                  iny
 9A05  CA          loc9a05:                dex
 9A06  10                                  bpl     loc99ff
 9A07  F7
  [ =99FF ]

                   ; If no enemy types have nonzero availability, nothing 
                   to do.

 9A08  98                                  tya
 9A09  F0                                  beq     loc9a82
 9A0A  77
  [ =9A82 ]

                   ; If only one type has nonzero availability, it's easy.

 9A0B  88                                  dey
 9A0C  D0                                  bne     loc9a26
 9A0D  18
  [ =9A26 ]

                   ; Only one type possible.  Find the type and create the 
                   enemy.

 9A0E  A2                                  ldx     #$04
 9A0F  04
 9A10  BD          loc9a10:                lda     avl_enemy_by_type,x
 9A11  3D 01
 9A13  F0                                  beq     loc9a20
 9A14  0B
  [ =9A20 ]
 9A15  BD                                  lda     min_enemy_by_type,x
 9A16  29 01
 9A18  F0                                  beq     loc9a20
 9A19  06
  [ =9A20 ]
 9A1A  20                                  jsr     loc9a87
 9A1B  87 9A
 9A1D  F0                                  beq     loc9a20
 9A1E  01
  [ =9A20 ]
 9A1F  60                                  rts
 9A20  CA          loc9a20:                dex
 9A21  10                                  bpl     loc9a10
 9A22  ED
  [ =9A10 ]
 9A23  B8                                  clv
 9A24  50                                  bvc     loc9a82
 9A25  5C
  [ =9A82 ]

                   ; Hard case:                multiple types possible.
                   ; See if any of the minimum values are unsatisfied.

 9A26  84          loc9a26:                sty     $61
 9A27  61
 9A28  A2                                  ldx     #$04
 9A29  04
 9A2A  BD          loc9a2a:                lda     avl_enemy_by_type,x
 9A2B  3D 01
 9A2D  F0                                  beq     loc9a3d
 9A2E  0E
  [ =9A3D ]
 9A2F  BD                                  lda     n_enemy_by_type,x
 9A30  42 01
 9A32  DD                                  cmp     min_enemy_by_type,x
 9A33  29 01
 9A35  B0                                  bcs     loc9a3d
 9A36  06
  [ =9A3D ]
 9A37  20                                  jsr     loc9a87
 9A38  87 9A
 9A3A  F0                                  beq     loc9a3d
 9A3B  01
  [ =9A3D ]
 9A3C  60                                  rts

 9A3D  CA          loc9a3d:                dex
 9A3E  10                                  bpl     loc9a2a
 9A3F  EA
  [ =9A2A ]

                   ; No unsatisfied minima.  If we can do a spiker and we 
                   can do a tanker,
                   ; have a look at the shortest spike, and if it's less 
                   than $cc high, create
                   ; a spiker, else create a tanker.

 9A40  AD                                  lda     avl_spikers
 9A41  40 01
 9A43  F0                                  beq     loc9a61
 9A44  1C
  [ =9A61 ]
 9A45  AD                                  lda     avl_tankers
 9A46  3F 01
 9A48  F0                                  beq     loc9a61
 9A49  17
  [ =9A61 ]
 9A4A  A4                                  ldy     $2a
 9A4B  2A
 9A4C  B9                                  lda     lane_spike_height,y
 9A4D  AC 03
 9A4F  D0                                  bne     loc9a53
 9A50  02
  [ =9A53 ]
 9A51  A9                                  lda     #$ff
 9A52  FF
 9A53  A2          loc9a53:                ldx     #$03        ; spiker
 9A54  03
 9A55  C9                                  cmp     #$cc
 9A56  CC
 9A57  B0                                  bcs     loc9a5b
 9A58  02
  [ =9A5B ]
 9A59  A2                                  ldx     #$02        ; tanker
 9A5A  02
 9A5B  20          loc9a5b:                jsr     loc9a87
 9A5C  87 9A
 9A5E  F0                                  beq     loc9a61
 9A5F  01
  [ =9A61 ]
 9A60  60                                  rts

                   ; Nothing yet.  Start at a random point and go through 
                   the list of enemies
                   ; up to four times.  Each time through, for each type 
                   with nonzero minimum
                   ; and availability, try to create one of it.

 9A61  AD          loc9a61:                lda     pokey2_rand
 9A62  DA 60
 9A64  29                                  and     #$03
 9A65  03
 9A66  AA                                  tax
 9A67  E8                                  inx
 9A68  A0                                  ldy     #$04
 9A69  04
 9A6A  BD          loc9a6a:                lda     min_enemy_by_type,x
 9A6B  29 01
 9A6D  F0                                  beq     loc9a7a
 9A6E  0B
  [ =9A7A ]
 9A6F  BD                                  lda     avl_enemy_by_type,x
 9A70  3D 01
 9A72  F0                                  beq     loc9a7a
 9A73  06
  [ =9A7A ]
 9A74  20                                  jsr     loc9a87
 9A75  87 9A
 9A77  F0                                  beq     loc9a7a
 9A78  01
  [ =9A7A ]
 9A79  60                                  rts
 9A7A  CA          loc9a7a:                dex
 9A7B  10                                  bpl     loc9a7f
 9A7C  02
  [ =9A7F ]
 9A7D  A2                                  ldx     #$04
 9A7E  04
 9A7F  88          loc9a7f:                dey
 9A80  10                                  bpl     loc9a6a
 9A81  E8
  [ =9A6A ]
 9A82  A9          loc9a82:                lda     #$00
 9A83  00
 9A84  85                                  sta     $29
 9A85  29
 9A86  60                                  rts

                   ; Try to create one enemy of the type found in x.  
                   Return with Z set on
                   ; failure, clear on success.

 9A87  8A          loc9a87:                txa                             
                   ; x = enemy type
 9A88  0A          loc9a88:                asl     a
 9A89  A8                                  tay
 9A8A  B9                                  lda     EnmCreateJumpTable+1,y  
                   ; Dispatch by pushing address onto stack and then doing 
                   an RTS
 9A8B  94 9A
 9A8D  48                                  pha
 9A8E  B9                                  lda     EnmCreateJumpTable,y
 9A8F  93 9A
 9A91  48                                  pha
 9A92  60                                  rts

                   ; Jump table, used by code at 9a87, called from various 
                   places

 9A93  9C 9A       EnmCreateJumpTable:     .word   make_flipper-1          
                   ; flipper
 9A95  A8 9A                               .word   make_pulsar-1           
                   ; pulsar
 9A97  BA 9A                               .word   make_tanker-1           
                   ; tanker
 9A99  B6 9A                               .word   make_spiker-1           
                   ; spiker
 9A9B  B2 9A                               .word   make_fuseball-1         
                   ; fuseball

 9A9D  AD          make_flipper:           lda     EnemyCanFireTable       
                   ; flipper
 9A9E  02 9B
 9AA0  85                                  sta     $2c
 9AA1  2C
 9AA2  AD                                  lda     flipper_move
 9AA3  5D 01
 9AA5  A0                                  ldy     #$00                    
                   ; flipper
 9AA6  00
 9AA7  F0                                  beq     loc9af6
 9AA8  4D
  [ =9AF6 ]

 9AA9  AD          make_pulsar:            lda     CanPulsarFire           
                   ; pulsar
 9AAA  03 9B
 9AAC  0D                                  ora     pulsar_fire
 9AAD  6D 01
 9AAF  A0                                  ldy     #$01                    
                   ; pulsar
 9AB0  01
 9AB1  D0                                  bne     loc9af1
 9AB2  3E
  [ =9AF1 ]

 9AB3  A0          make_fuseball:          ldy     #$04                    
                   ; fuseball
 9AB4  04
 9AB5  D0                                  bne     loc9aee
 9AB6  37
  [ =9AEE ]

 9AB7  A0          make_spiker:            ldy     #$03                    
                   ; spiker
 9AB8  03
 9AB9  D0                                  bne     loc9aee
 9ABA  33
  [ =9AEE ]

 9ABB  AD          make_tanker:            lda     pokey1_rand             
                   ; tanker
 9ABC  CA 60
 9ABE  29                                  and     #$03
 9ABF  03
 9AC0  A8                                  tay

 9AC1  A9                                  lda     #$04
 9AC2  04
 9AC3  85                                  sta     $2b
 9AC4  2B
 9AC5  86                                  stx     $39
 9AC6  39
 9AC7  C6          loc9ac7:                dec     $2b
 9AC8  2B
 9AC9  10                                  bpl     loc9ad0
 9ACA  05
  [ =9AD0 ]
 9ACB  A6                                  ldx     $39
 9ACC  39
 9ACD  A9                                  lda     #$00
 9ACE  00
 9ACF  60                                  rts

 9AD0  88          loc9ad0:                dey
 9AD1  10                                  bpl     loc9ad5
 9AD2  02
  [ =9AD5 ]
 9AD3  A0                                  ldy     #$03
 9AD4  03
 9AD5  BE          loc9ad5:                ldx     tanker_load,y
 9AD6  49 01
 9AD8  E0                                  cpx     #$03
 9AD9  03
 9ADA  D0                                  bne     loc9ade
 9ADB  02
  [ =9ADE ]
 9ADC  A2                                  ldx     #$05
 9ADD  05
 9ADE  BD          loc9ade:                lda     $013c,x
 9ADF  3C 01
 9AE1  F0                                  beq     loc9ac7
 9AE2  E4
  [ =9AC7 ]
 9AE3  A6                                  ldx     $39
 9AE4  39
 9AE5  B9                                  lda     tanker_load,y
 9AE6  49 01
 9AE8  09                                  ora     #$40
 9AE9  40
 9AEA  A0                                  ldy     #$02
 9AEB  02
 9AEC  D0                                  bne     loc9af1
 9AED  03
  [ =9AF1 ]
 9AEE  B9          loc9aee:                lda     EnemyCanFireTable,y
 9AEF  02 9B
 9AF1  85          loc9af1:                sta     $2c
 9AF2  2C
 9AF3  B9                                  lda     InitialPCodePC,y
 9AF4  FD 9A
 9AF6  84          loc9af6:                sty     $2b
 9AF7  2B
 9AF8  85                                  sta     $2d
 9AF9  2D
 9AFA  A5                                  lda     $29
 9AFB  29
 9AFC  60                                  rts

                   ; Values for $2d, per-enemy-type.  See $9af3.
                   ; I think these are the initial movement p-code pc 
                   values.
                   ; The flipper value is mostly ignored, using 
                   flipper_move instead.

 9AFD  07          InitialPCodePC:         .byte   $07             ; 
                   flipper
 9AFE  72                                  .byte   $72             ; pulsar
 9AFF  07                                  .byte   $07             ; tanker
 9B00  00                                  .byte   $00             ; spiker
 9B01  61                                  .byte   $61             ; 
                   fuseball

                   ; Values for $2c, per-enemy-type.  See code at $9a87 
                   and the fragments it
                   ; branches to.  This ends up in the active_enemy_info 
                   vector for the enemy.

                   ; When set to $40, I believe that indicates that this 
                   enemy can fire shots

                   EnemyCanFireTable:      
 9B02  40                                  .byte   $40             ; 
                   flipper
 9B03  00          CanPulsarFire:          .byte   $00             ; 
                   pulsar - ORed with pulsar_fire; see $9aac
 9B04  41                                  .byte   $41             ; 
                   tanker - not actually used; see $9abb..$9aec
 9B05  40                                  .byte   $40             ; spiker
 9B06  00                                  .byte   $00             ; 
                   fuseball

 9B07  84          loc9b07:                sty     $36
 9B08  36
 9B09  A5                                  lda     $29
 9B0A  29
 9B0B  C9                                  cmp     #$20
 9B0C  20
 9B0D  A5                                  lda     $2b
 9B0E  2B
 9B0F  B0                                  bcs     loc9b18
 9B10  07
  [ =9B18 ]
 9B11  A8                                  tay
 9B12  20                                  jsr     loc9aee
 9B13  EE 9A
 9B15  B8                                  clv
 9B16  50                                  bvc     loc9b1b
 9B17  03
  [ =9B1B ]
 9B18  20          loc9b18:                jsr     loc9a88
 9B19  88 9A
 9B1B  A4          loc9b1b:                ldy     $36
 9B1C  36
 9B1D  60                                  rts
 9B1E  AD          move_enemies:           lda     player_state
 9B1F  01 02
 9B21  30                                  bmi     loc9b56
 9B22  33
  [ =9B56 ]
 9B23  AE                                  ldx     MaxActiveEnemies
 9B24  1C 01
 9B26  86                                  stx     $37
 9B27  37
 9B28  A6          loc9b28:                ldx     $37
 9B29  37
 9B2A  BD                                  lda     enemy_along,x
 9B2B  DF 02
 9B2D  F0                                  beq     loc9b52
 9B2E  23
  [ =9B52 ]
 9B2F  A9                                  lda     #$01
 9B30  01
 9B31  8D                                  sta     pcode_run
 9B32  0A 01
 9B34  BD                                  lda     enm_move_pc,x
 9B35  91 02
 9B37  8D                                  sta     pcode_pc
 9B38  0B 01

                   ;-------------------------------------------------------
                   ---------------------
                   ; P-Code Engine for enemy behaviors
                   ;-------------------------------------------------------
                   ---------------------
                   ;
                   ; The engine's pc is $010b, with the code itself at 
                   $a0f7.  The jump
                   ; table at $9ba2 and the code it points to determines 
                   the actions of
                   ; each p-opcode.  The p-machine is halted (ie, the 
                   interpreter loop
                   ; here is exited) by setting $010a to zero.
                   ;
                   ;-------------------------------------------------------
                   ---------------------

 9B3A  AD          PCodeMainLoop:          lda     pcode_pc
 9B3B  0B 01
 9B3D  A8                                  tay
 9B3E  B9                                  lda     PCodeProgram,y
 9B3F  F7 A0
 9B41  20                                  jsr     ExecutePCodeOp
 9B42  98 9B
 9B44  EE                                  inc     pcode_pc
 9B45  0B 01
 9B47  AD                                  lda     pcode_run
 9B48  0A 01
 9B4A  D0                                  bne     PCodeMainLoop
 9B4B  EE
  [ =9B3A ]

 9B4C  AD                                  lda     pcode_pc
 9B4D  0B 01
 9B4F  9D                                  sta     enm_move_pc,x
 9B50  91 02

 9B52  C6          loc9b52:                dec     $37
 9B53  37
 9B54  10                                  bpl     loc9b28
 9B55  D2
  [ =9B28 ]
 9B56  AD          loc9b56:                lda     pulsing
 9B57  48 01
 9B59  18                                  clc
 9B5A  6D                                  adc     pulse_beat
 9B5B  47 01
 9B5D  A8                                  tay
 9B5E  4D                                  eor     pulsing
 9B5F  48 01
 9B61  8C                                  sty     pulsing
 9B62  48 01
 9B64  10                                  bpl     loc9b7c
 9B65  16
  [ =9B7C ]
 9B66  98                                  tya
 9B67  10                                  bpl     loc9b6f
 9B68  06
  [ =9B6F ]
 9B69  20                                  jsr     sound_pulsar
 9B6A  06 CD
 9B6C  B8                                  clv
 9B6D  50                                  bvc     loc9b7c
 9B6E  0D
  [ =9B7C ]
 9B6F  AD          loc9b6f:                lda     n_pulsars               
                   ; No pulsars to check for
 9B70  43 01
 9B72  F0                                  beq     loc9b7c
 9B73  08
  [ =9B7C ]
 9B74  AD                                  lda     player_state
 9B75  01 02
 9B77  30                                  bmi     loc9b7c                 
                   ; Player dying, don't pulse them
 9B78  03
  [ =9B7C ]
 9B79  20                                  jsr     loccd02
 9B7A  02 CD
 9B7C  AD          loc9b7c:                lda     pulsing
 9B7D  48 01
 9B7F  30                                  bmi     loc9b88
 9B80  07
  [ =9B88 ]
 9B81  C9                                  cmp     #$0f
 9B82  0F
 9B83  B0                                  bcs     loc9b8c
 9B84  07
  [ =9B8C ]
 9B85  B8                                  clv
 9B86  50                                  bvc     loc9b97
 9B87  0F
  [ =9B97 ]
 9B88  C9          loc9b88:                cmp     #$c1
 9B89  C1
 9B8A  B0                                  bcs     loc9b97
 9B8B  0B
  [ =9B97 ]
 9B8C  AD          loc9b8c:                lda     pulse_beat
 9B8D  47 01
 9B8F  49                                  eor     #$ff
 9B90  FF
 9B91  18                                  clc
 9B92  69                                  adc     #$01
 9B93  01
 9B94  8D                                  sta     pulse_beat
 9B95  47 01
 9B97  60          loc9b97:                rts

 9B98  A8          ExecutePCodeOp:         tay                             
                       ; A must contain the opcode which is a multiple of 2
 9B99  B9                                  lda     PCodeDispatch+1,y       
                       ; Fetch the high byte
 9B9A  A3 9B
 9B9C  48                                  pha                             
                       ;   ...and push it on the stack as the high byte of 
                   the 'return' address
 9B9D  B9                                  lda     PCodeDispatch,y         
                       ; Fetch the low byte
 9B9E  A2 9B
 9BA0  48                                  pha                             
                       ;   ...and push it on the stack as the low byte of 
                   the 'return' address 
 9BA1  60                                  rts                             
                       ; Now 'return' to the address we just pushed

                   ; See $9b3a for what this jump table is.

                   ;-------------------------------------------------------
                   -------------------------------------
                   ; PCode Operations
                   ;-------------------------------------------------------
                   -------------------------------------

 0000  00 00 00 00                         PCOP_Halt                   
                   .equ    $00
 0000  02 00 00 00                         PCOP_Store                  
                   .equ    $02
 0000  04 00 00 00                         PCOP_Skip2IfZero            
                   .equ    $04
 0000  06 00 00 00                         PCOP_Jump                   
                   .equ    $06
 0000  08 00 00 00                         PCOP_DecBranchIfElse        
                   .equ    $08
 0000  0A 00 00 00                         PCOP_NOP                    
                   .equ    $0a
 0000  0C 00 00 00                         PCOP_MoveTowardsTop         
                   .equ    $0c
 0000  0E 00 00 00                         PCOP_SpikerStuff            
                   .equ    $0e
 0000  10 00 00 00                         PCOP_GetGameState           
                   .equ    $10
 0000  12 00 00 00                         PCOP_StartFlip              
                   .equ    $12
 0000  14 00 00 00                         PCOP_ContFInishFlip         
                   .equ    $14
 0000  16 00 00 00                         PCOP_ReverseLeftRightDir    
                   .equ    $16
 0000  18 00 00 00                         PCOP_CheckGrabPlayer        
                   .equ    $18
 0000  1A 00 00 00                         PCOP_BranchOnZero           
                   .equ    $1a
 0000  1C 00 00 00                         PCOP_CheckIfPastSpike       
                   .equ    $1c
 0000  1E 00 00 00                         PCOP_FuseballMove           
                   .equ    $1e
 0000  20 00 00 00                         PCOP_CheckPlayerColl        
                   .equ    $20
 0000  22 00 00 00                         PCOP_PulsarMove             
                   .equ    $22
 0000  24 00 00 00                         PCOP_AimTowardsPlayerLR     
                   .equ    $24
 0000  26 00 00 00                         PCOP_CheckIfPulsing         
                   .equ    $26

                   ;-------------------------------------------------------
                   -------------------------------------
                   ; PCode Dispatch Jump Table
                   ;-------------------------------------------------------
                   -------------------------------------

 9BA2  C9 9B       PCodeDispatch:          .word   PC_Halt-1               
                       ; 00 = halt
 9BA4  CF 9B                               .word   PC_Store-1              
                       ; 02 = next.byte -> enm_pc_storage,x
 9BA6  ED 9B                               .word   PC_Skip2IfZero-1        
                       ; 04 = if $010c holds zero, skip next two.bytes
 9BA8  16 9C                               .word   PC_Jump-1               
                       ; 06 = unconditional branch
 9BAA  0B 9C                               .word   PC_DecBranchElseSkip-1  
                       ; 08 = if (--enm_pc_storage,x) branch else skip
 9BAC  CE 9B                               .word   PC_NOP-1                
                       ; 0a = nop
 9BAE  57 9C                               .word   PC_MoveTowardsTop-1     
                       ; 0c = move per its type's speed setting, also 
                   handles reaching end-of-tube
 9BB0  C3 9F                               .word   PC_SpikerStuff-1        
                       ; 0e = grow spike, reverse, convert
 9BB2  DC 9B                               .word   PC_GetGameState-1       
                       ; 10 = $00<next.byte> contents -> enm_pc_storage,x
 9BB4  5B 9E                               .word   PC_StartFlip-1          
                       ; 12 = start flip
 9BB6  81 9D                               .word   PC_ContFinishFlip-1     
                       ; 14 = continue/end flip
 9BB8  4E 9C                               .word   
                   PC_ReverseLeftRightDir-1    ; 16 = reverse direction 
                   (segmentwise)
 9BBA  2E 9E                               .word   PC_CheckGrabPlayer-1    
                       ; 18 = check and maybe grab player
 9BBC  F9 9B                               .word   PC_BranchOnZero-1       
                       ; 1a = if $010c == 0, branch
 9BBE  20 9C                               .word   PC_CheckIfPastSpike-1   
                       ; 1c = enemy-above-spike? -> $010c
 9BC0  F0 9E                               .word   PC_FuseballMove-1       
                       ; 1e = fuseball movement?
 9BC2  47 9E                               .word   PC_CheckPlayerColl-1    
                       ; 20 = check for enemy-touches-player death?
 9BC4  B5 9C                               .word   PC_PulsarMove-1         
                       ; 22 = do pulsar motion
 9BC6  66 9D                               .word   PC_AimTowardsPlayerLR-1 
                       ; 24 = set enemy direction towards player
 9BC8  3A 9C                               .word   PC_CheckIfPulsing-1     
                       ; 26 = check for pulsing

 9BCA  A9          PC_Halt:                lda     #$00                    
                       ; Store zero in the pcode_run var to stop 
                   interpreter
 9BCB  00
 9BCC  8D                                  sta     pcode_run               
                       ;   then fall through to the RTS used by the NOP
 9BCD  0A 01

 9BCF  60          PC_NOP:                 rts                             
                       ; NOP, so just return 

 9BD0  EE          PC_Store:               inc     pcode_pc                
                       ; Increment PC to skip past load byte
 9BD1  0B 01
 9BD3  AC                                  ldy     pcode_pc                
                       ; Load PC into Y register
 9BD4  0B 01
 9BD6  B9                                  lda     PCodeProgram,y          
                       ; Load the byte into A from PCode storage
 9BD7  F7 A0
 9BD9  9D                                  sta     enm_pc_storage,x        
                       ; Store the byte in enemy storage
 9BDA  98 02
 9BDC  60                                  rts

 9BDD  EE          PC_GetGameState:        inc     pcode_pc
 9BDE  0B 01
 9BE0  AC                                  ldy     pcode_pc
 9BE1  0B 01
 9BE3  B9                                  lda     PCodeProgram,y
 9BE4  F7 A0
 9BE6  A8                                  tay
 9BE7  B9                                  lda     gamestate,y
 9BE8  00 00
 9BEA  9D                                  sta     enm_pc_storage,x
 9BEB  98 02
 9BED  60                                  rts

 9BEE  AD          PC_Skip2IfZero:         lda     $010c
 9BEF  0C 01
 9BF1  D0                                  bne     +
 9BF2  06
  [ =9BF9 ]
 9BF3  EE                                  inc     pcode_pc
 9BF4  0B 01
 9BF6  EE                                  inc     pcode_pc
 9BF7  0B 01
 9BF9  60          +                       rts

 9BFA  EE          PC_BranchOnZero:        inc     pcode_pc
 9BFB  0B 01
 9BFD  AD                                  lda     $010c
 9BFE  0C 01
 9C00  D0                                  bne     +
 9C01  09
  [ =9C0B ]
 9C02  AC                                  ldy     pcode_pc
 9C03  0B 01
 9C05  B9                                  lda     PCodeProgram,y
 9C06  F7 A0
 9C08  8D                                  sta     pcode_pc
 9C09  0B 01
 9C0B  60          +                       rts

 9C0C  DE          PC_DecBranchElseSkip:   dec     enm_pc_storage,x
 9C0D  98 02
 9C0F  D0                                  bne     PC_Jump
 9C10  06
  [ =9C17 ]
 9C11  EE                                  inc     pcode_pc
 9C12  0B 01
 9C14  B8                                  clv
 9C15  50                                  bvc     +
 9C16  09
  [ =9C20 ]

 9C17  AC          PC_Jump:                ldy     pcode_pc
 9C18  0B 01
 9C1A  B9                                  lda     DoSpikerStuff,y
 9C1B  F8 A0
 9C1D  8D                                  sta     pcode_pc
 9C1E  0B 01
 9C20  60          +                       rts

                   ; Set $010c to 1 if the enemy is above the end of its 
                   segment's spike, 0 if not.

 9C21  BC          PC_CheckIfPastSpike:    ldy     enemy_seg,x
 9C22  B9 02
 9C24  B9                                  lda     lane_spike_height,y
 9C25  AC 03
 9C27  D0                                  bne     +
 9C28  02
  [ =9C2B ]
 9C29  A9                                  lda     #$ff
 9C2A  FF
 9C2B  DD          +                       cmp     enemy_along,x
 9C2C  DF 02
 9C2E  B0                                  bcs     loc9c35
 9C2F  05
  [ =9C35 ]
 9C30  A9                                  lda     #$00
 9C31  00
 9C32  B8                                  clv
 9C33  50                                  bvc     loc9c37
 9C34  02
  [ =9C37 ]
 9C35  A9          loc9c35:                lda     #$01
 9C36  01
 9C37  8D          loc9c37:                sta     $010c
 9C38  0C 01
 9C3A  60                                  rts

                   ; Set $010c to $80 if we're pulsing now, or we will be 
                   four ticks in the future, or to $00 if not.

 9C3B  AD          PC_CheckIfPulsing:      lda     pulse_beat
 9C3C  47 01
 9C3E  0A                                  asl     a
 9C3F  0A                                  asl     a
 9C40  18                                  clc
 9C41  6D                                  adc     pulsing
 9C42  48 01
 9C44  2D                                  and     pulsing
 9C45  48 01
 9C47  29                                  and     #$80
 9C48  80
 9C49  49                                  eor     #$80
 9C4A  80
 9C4B  8D                                  sta     $010c
 9C4C  0C 01
 9C4E  60                                  rts

 9C4F  BD          PC_ReverseLeftRightDir: lda     enemy_type_info,x
 9C50  83 02
 9C52  49                                  eor     #$40                    
                   ; Flip the "segment increasing or decreasing" bit to 
                   change direction
 9C53  40
 9C54  9D                                  sta     enemy_type_info,x
 9C55  83 02
 9C57  60                                  rts

 9C58  BD          PC_MoveTowardsTop:      lda     enemy_type_info,x
 9C59  83 02
 9C5B  29                                  and     #ENEMY_TYPE_MASK
 9C5C  07
 9C5D  A8                                  tay
 9C5E  BD                                  lda     active_enemy_info,x
 9C5F  8A 02
 9C61  30                                  bmi     MoveTowardsFarEnd
 9C62  36
  [ =9C99 ]

 9C63  BD          MoveTowardsTop:         lda     enemy_along_lsb,x
 9C64  9F 02
 9C66  18                                  clc
 9C67  79                                  adc     spd_flipper_lsb,y
 9C68  60 01
 9C6A  9D                                  sta     enemy_along_lsb,x
 9C6B  9F 02
 9C6D  BD                                  lda     enemy_along,x
 9C6E  DF 02
 9C70  79                                  adc     spd_flipper_msb,y
 9C71  65 01
 9C73  9D                                  sta     enemy_along,x
 9C74  DF 02
 9C76  CD                                  cmp     player_along
 9C77  02 02
 9C79  F0                                  beq     +
 9C7A  02
  [ =9C7D ]
 9C7B  B0                                  bcs     not_at_top_yet
 9C7C  06
  [ =9C83 ]
 9C7D  20          +                       jsr     EnemyReachedTop
 9C7E  06 9D
 9C80  B8                                  clv
 9C81  50                                  bvc     no_tanker_split
 9C82  13
  [ =9C96 ]

 9C83  C9          not_at_top_yet:         cmp     #$20                    
                   ; Depth of $20 is where tankers will split and open up
 9C84  20
 9C85  B0                                  bcs     no_tanker_split
 9C86  0F
  [ =9C96 ]
 9C87  BD                                  lda     active_enemy_info,x
 9C88  8A 02
 9C8A  29                                  and     #$03
 9C8B  03
 9C8C  F0                                  beq     no_tanker_split         
                   ; If bottom bits are zero, not a tanker
 9C8D  08
  [ =9C96 ]
 9C8E  8A                                  txa
 9C8F  48                                  pha
 9C90  A8                                  tay
 9C91  20                                  jsr     loca06f
 9C92  6F A0
 9C94  68                                  pla
 9C95  AA                                  tax
 9C96  B8          no_tanker_split:        clv
 9C97  50                                  bvc     loc9cb5
 9C98  1C
  [ =9CB5 ]

 9C99  BD          MoveTowardsFarEnd:      lda     enemy_along_lsb,x
 9C9A  9F 02
 9C9C  38                                  sec
 9C9D  F9                                  sbc     spd_flipper_lsb,y
 9C9E  60 01
 9CA0  9D                                  sta     enemy_along_lsb,x
 9CA1  9F 02
 9CA3  BD                                  lda     enemy_along,x
 9CA4  DF 02
 9CA6  F9                                  sbc     spd_flipper_msb,y
 9CA7  65 01
 9CA9  9D                                  sta     enemy_along,x
 9CAA  DF 02
 9CAC  C9                                  cmp     #END_OF_TUNNEL
 9CAD  F0
 9CAE  90                                  bcc     loc9cb5
 9CAF  05
  [ =9CB5 ]
 9CB0  A9                                  lda     #END_OF_TUNNEL + 2
 9CB1  F2
 9CB2  9D                                  sta     enemy_along,x
 9CB3  DF 02
 9CB5  60          loc9cb5:                rts

 9CB6  A0          PC_PulsarMove:          ldy     #ENEMY_TYPE_PULSAR      
                       ; 01
 9CB7  01
 9CB8  BD                                  lda     active_enemy_info,x
 9CB9  8A 02
 9CBB  30                                  bmi     loc9ccd
 9CBC  10
  [ =9CCD ]
 9CBD  BD                                  lda     enemy_along,x
 9CBE  DF 02
 9CC0  CD                                  cmp     lethal_distance
 9CC1  57 01
 9CC3  90                                  bcc     loc9cc7                 
                       ; branch if closer than lethal_distance
 9CC4  02
  [ =9CC7 ]
 9CC5  A0                                  ldy     #ENEMY_TYPE_FLIPPER     
                       ; flipper
 9CC6  00
 9CC7  20          loc9cc7:                jsr     MoveTowardsTop          
                       ; move per speed for type Y, includes 
                   EnemyReachedTop call
 9CC8  63 9C
 9CCA  B8                                  clv
 9CCB  50                                  bvc     loc9ce4
 9CCC  17
  [ =9CE4 ]
 9CCD  20          loc9ccd:                jsr     MoveTowardsFarEnd       
                       ; move away per speed for type Y, leaves 
                   enemy_along value in A
 9CCE  99 9C
 9CD0  AC                                  ldy     enemies_pending
 9CD1  AB 03
 9CD3  D0                                  bne     loc9cd7
 9CD4  02
  [ =9CD7 ]
 9CD5  A9                                  lda     #$ff
 9CD6  FF
 9CD7  CD          loc9cd7:                cmp     lethal_distance
 9CD8  57 01
 9CDA  90                                  bcc     loc9ce4                 
                       ; branch if closer than lethal_distance
 9CDB  08
  [ =9CE4 ]
 9CDC  BD                                  lda     active_enemy_info,x
 9CDD  8A 02
 9CDF  49                                  eor     #$80
 9CE0  80
 9CE1  9D                                  sta     active_enemy_info,x
 9CE2  8A 02
 9CE4  AD          loc9ce4:                lda     pulsing                 
                       ; Check to see if pulsar kills player with pulse
 9CE5  48 01
 9CE7  30                                  bmi     notpulsed
 9CE8  1B
  [ =9D04 ]
 9CE9  BD                                  lda     enemy_along,x
 9CEA  DF 02
 9CEC  CD                                  cmp     lethal_distance
 9CED  57 01
 9CEF  B0                                  bcs     notpulsed               
                       ; branch if farther away than lethal_distance
 9CF0  13
  [ =9D04 ]
 9CF1  AD                                  lda     player_seg
 9CF2  00 02
 9CF4  DD                                  cmp     enemy_seg,x
 9CF5  B9 02
 9CF7  D0                                  bne     notpulsed
 9CF8  0B
  [ =9D04 ]
 9CF9  AD                                  lda     player_state
 9CFA  01 02
 9CFC  DD                                  cmp     more_enemy_info,x
 9CFD  CC 02
 9CFF  D0                                  bne     notpulsed
 9D00  03
  [ =9D04 ]
 9D01  20                                  jsr     pieces_death
 9D02  47 A3
 9D04  60          notpulsed:              rts

 9D05  16                                  .byte $16

                   ; Reached the top of the tube.  Deal with it. X == 
                   active enemy number

 9D06  AD          EnemyReachedTop:        lda     player_along            
                   ; Set enemy height to player height (why not just the 
                   same constant #$10, not sure?)
 9D07  02 02
 9D09  9D                                  sta     enemy_along,x
 9D0A  DF 02

 9D0C  BD                                  lda     enemy_type_info,x
 9D0D  83 02
 9D0F  29                                  and     #ENEMY_TYPE_MASK        
                   ; Bottom 3 bits are enemy type
 9D10  07
 9D11  C9                                  cmp     #ENEMY_TYPE_PULSAR      
                   ; If it's not a pulsar, stick it to the top
 9D12  01
 9D13  D0                                  bne     can_stick_to_top
 9D14  0E
  [ =9D23 ]

 9D15  AD                                  lda     enemies_pending         
                   ; But even pulsars stick when no pending enemies are 
                   left
 9D16  AB 03
 9D18  F0                                  beq     can_stick_to_top
 9D19  09
  [ =9D23 ]

 9D1A  BD          JustBounceBack:         lda     active_enemy_info,x     
                   ; Switch direction by flipping the $80 bit in the 
                   enemy's state info
 9D1B  8A 02
 9D1D  49                                  eor     #$80
 9D1E  80
 9D1F  9D                                  sta     active_enemy_info,x
 9D20  8A 02
 9D22  60                                  rts

 9D23  BD          can_stick_to_top:       lda     enemy_type_info,x       
                   ; If this is a flipper or pulsar and it's between 
                   segments, push it back down the 
 9D24  83 02
 9D26  10                                  bpl     StickToTopRail          
                   ;    tube a notch so that it will have time to finish 
                   rotation before sticking to a segment
 9D27  04
  [ =9D2C ]
 9D28  FE                                  inc     enemy_along,x           
                   ;    I guess also ensures a captured player is captured 
                   by a flipper done flipping
 9D29  DF 02
 9D2B  60                                  rts

 9D2C  CE          StickToTopRail:         dec     NumEnemiesInTube        
                   ; Move one enemy count from tube to top
 9D2D  08 01
 9D2F  AD                                  lda     NumEnemiesOnTop
 9D30  09 01
 9D32  C9                                  cmp     #$01                    
                   ; If there's already exactly one enemy up top, don't 
                   bother aiming
 9D33  01
 9D34  F0                                  beq     skip_aiming
 9D35  06
  [ =9D3C ]
 9D36  20                                  jsr     PC_AimTowardsPlayerLR
 9D37  67 9D
 9D39  B8                                  clv
 9D3A  50                                  bvc     loc9d5e
 9D3B  22
  [ =9D5E ]

 9D3C  A0          skip_aiming:            ldy     #MAX_ACTIVE_ENEMIES - 1 
                   ; 
 9D3D  06
 9D3E  B9          loc9d3e:                lda     enemy_along,y
 9D3F  DF 02
 9D41  F0                                  beq     loc9d51
 9D42  0E
  [ =9D51 ]
 9D43  84                                  sty     $38
 9D44  38
 9D45  E4                                  cpx     $38
 9D46  38
 9D47  F0                                  beq     loc9d51
 9D48  08
  [ =9D51 ]
 9D49  B9                                  lda     enemy_along,y
 9D4A  DF 02
 9D4C  CD                                  cmp     player_along
 9D4D  02 02
 9D4F  F0                                  beq     loc9d54
 9D50  03
  [ =9D54 ]
 9D51  88          loc9d51:                dey
 9D52  10                                  bpl     loc9d3e
 9D53  EA
  [ =9D3E ]

 9D54  B9          loc9d54:                lda     enemy_type_info,y       
                   ; BUGBUG is this the code that changes pulsars to 
                   flippers because it wipes out
 9D55  83 02
 9D57  29                                  and     #$40                    
                   ;        the low bits which would contain it's type 
                   information?  I think the
 9D58  40
 9D59  49                                  eor     #$40                    
                   ;        author may have wanted or/eor, not and/eor.  
                   That's typically how he
 9D5A  40
 9D5B  9D                                  sta     enemy_type_info,x       
                   ;        clears individual bits in similar cases (set 
                   the flip rather than mask).
 9D5C  83 02
                                                                           
                   ;        Could very well be code emitted by their 
                   macros as well.
 9D5E  A9          loc9d5e:                lda     #$41
 9D5F  41
 9D60  8D                                  sta     pcode_pc
 9D61  0B 01
 9D63  EE                                  inc     NumEnemiesOnTop
 9D64  09 01
 9D66  60                                  rts

                   PC_AimTowardsPlayerLR:

 9D67  BD                                  lda     enemy_seg,x
 9D68  B9 02
 9D6A  A8                                  tay
 9D6B  AD                                  lda     player_seg
 9D6C  00 02
 9D6E  20                                  jsr     SubYFromAWithWrap       
                   ; Figure out which direction player is (left or right)
 9D6F  A6 A7
 9D71  0A                                  asl     a
 9D72  BD                                  lda     enemy_type_info,x       
                   ; Now point the enemy in the correct direction
 9D73  83 02
 9D75  B0                                  bcs     loc9d7c
 9D76  05
  [ =9D7C ]
 9D77  09                                  ora     #$40                    
                   ; Enemy segment value will now be increasing
 9D78  40
 9D79  B8                                  clv
 9D7A  50                                  bvc     loc9d7e
 9D7B  02
  [ =9D7E ]
 9D7C  29          loc9d7c:                and     #~$40                   
                   ; Enemy segment value will now be decreasing
 9D7D  BF
 9D7E  9D          loc9d7e:                sta     enemy_type_info,x
 9D7F  83 02
 9D81  60                                  rts

                   ; This code is used to continue and maybe end a 
                   flipper's flip, or other
                   ; enemy movement from one segment to the next.

 9D82  BC          PC_ContFinishFlip:      ldy     more_enemy_info,x
 9D83  CC 02
 9D85  BD                                  lda     enemy_type_info,x
 9D86  83 02
 9D88  29                                  and     #$40
 9D89  40
 9D8A  D0                                  bne     loc9d90
 9D8B  04
  [ =9D90 ]
 9D8C  C8                                  iny
 9D8D  B8                                  clv
 9D8E  50                                  bvc     loc9d91
 9D8F  01
  [ =9D91 ]
 9D90  88          loc9d90:                dey
 9D91  98          loc9d91:                tya
 9D92  29                                  and     #$0f
 9D93  0F
 9D94  09                                  ora     #$80
 9D95  80
 9D96  9D                                  sta     more_enemy_info,x
 9D97  CC 02
 9D99  BD                                  lda     enemy_type_info,x
 9D9A  83 02
 9D9C  29                                  and     #ENEMY_TYPE_MASK
 9D9D  07
 9D9E  C9                                  cmp     #$04                    
                       ; fuseball
 9D9F  04
 9DA0  D0                                  bne     loc9dee
 9DA1  4C
  [ =9DEE ]
 9DA2  BD                                  lda     more_enemy_info,x
 9DA3  CC 02
 9DA5  29                                  and     #$07
 9DA6  07
 9DA7  D0                                  bne     loc9deb
 9DA8  42
  [ =9DEB ]
 9DA9  BD                                  lda     more_enemy_info,x
 9DAA  CC 02
 9DAC  29                                  and     #$08
 9DAD  08
 9DAE  F0                                  beq     loc9dbb
 9DAF  0B
  [ =9DBB ]
 9DB0  BD                                  lda     enemy_seg,x
 9DB1  B9 02
 9DB3  18                                  clc
 9DB4  69                                  adc     #$01
 9DB5  01
 9DB6  29                                  and     #$0f
 9DB7  0F
 9DB8  9D                                  sta     enemy_seg,x
 9DB9  B9 02
 9DBB  BD          loc9dbb:                lda     enemy_type_info,x
 9DBC  83 02
 9DBE  29                                  and     #$7f
 9DBF  7F
 9DC0  9D                                  sta     enemy_type_info,x
 9DC1  83 02
 9DC3  A9                                  lda     #$20
 9DC4  20
 9DC5  9D                                  sta     more_enemy_info,x
 9DC6  CC 02
 9DC8  BD                                  lda     active_enemy_info,x
 9DC9  8A 02
 9DCB  49                                  eor     #$80
 9DCC  80
 9DCD  9D                                  sta     active_enemy_info,x
 9DCE  8A 02
 9DD0  AD                                  lda     enemies_pending
 9DD1  AB 03
 9DD3  D0                                  bne     loc9deb
 9DD4  16
  [ =9DEB ]
 9DD5  BD                                  lda     enemy_along,x
 9DD6  DF 02
 9DD8  CD                                  cmp     player_along
 9DD9  02 02
 9DDB  D0                                  bne     loc9de3
 9DDC  06
  [ =9DE3 ]
 9DDD  20                                  jsr     loc9f81
 9DDE  81 9F
 9DE0  B8                                  clv
 9DE1  50                                  bvc     loc9deb
 9DE2  08
  [ =9DEB ]
 9DE3  BD          loc9de3:                lda     active_enemy_info,x
 9DE4  8A 02
 9DE6  29                                  and     #$80
 9DE7  80
 9DE8  9D                                  sta     active_enemy_info,x
 9DE9  8A 02
 9DEB  B8          loc9deb:                clv
 9DEC  50                                  bvc     loc9e26
 9DED  38
  [ =9E26 ]

                   ; check if flip ended

 9DEE  BC          loc9dee:                ldy     enemy_seg,x
 9DEF  B9 02
 9DF1  BD                                  lda     enemy_type_info,x
 9DF2  83 02
 9DF4  49                                  eor     #$40
 9DF5  40
 9DF6  20                                  jsr     get_angle
 9DF7  D7 9E
 9DF9  DD                                  cmp     more_enemy_info,x
 9DFA  CC 02
 9DFC  D0                                  bne     loc9e26
 9DFD  28
  [ =9E26 ]

                   ; yes, stop flipping

 9DFE  BD                                  lda     enemy_type_info,x
 9DFF  83 02
 9E01  29                                  and     #$7f
 9E02  7F
 9E03  9D                                  sta     enemy_type_info,x
 9E04  83 02
 9E06  29                                  and     #$40
 9E07  40
 9E08  D0                                  bne     loc9e1b
 9E09  11
  [ =9E1B ]
 9E0A  BD                                  lda     enemy_seg,x
 9E0B  B9 02
 9E0D  9D                                  sta     more_enemy_info,x
 9E0E  CC 02
 9E10  38                                  sec
 9E11  E9                                  sbc     #$01
 9E12  01
 9E13  29                                  and     #$0f
 9E14  0F
 9E15  9D                                  sta     enemy_seg,x
 9E16  B9 02
 9E18  B8                                  clv
 9E19  50                                  bvc     loc9e26
 9E1A  0B
  [ =9E26 ]
 9E1B  BD          loc9e1b:                lda     enemy_seg,x
 9E1C  B9 02
 9E1E  18                                  clc
 9E1F  69                                  adc     #$01
 9E20  01
 9E21  29                                  and     #$0f
 9E22  0F
 9E23  9D                                  sta     more_enemy_info,x
 9E24  CC 02
 9E26  BD          loc9e26:                lda     enemy_type_info,x
 9E27  83 02
 9E29  29                                  and     #$80
 9E2A  80
 9E2B  8D                                  sta     $010c
 9E2C  0C 01
 9E2E  60                                  rts

 9E2F  BD          PC_CheckGrabPlayer:     lda     enemy_type_info,x
 9E30  83 02
 9E32  30                                  bmi     loc9e47
 9E33  13
  [ =9E47 ]
 9E34  BD                                  lda     enemy_seg,x
 9E35  B9 02
 9E37  CD                                  cmp     player_seg
 9E38  00 02
 9E3A  D0                                  bne     loc9e47
 9E3B  0B
  [ =9E47 ]
 9E3C  BD                                  lda     more_enemy_info,x
 9E3D  CC 02
 9E3F  CD                                  cmp     player_state
 9E40  01 02
 9E42  D0                                  bne     loc9e47
 9E43  03
  [ =9E47 ]
 9E44  20                                  jsr     loca33a
 9E45  3A A3
 9E47  60          loc9e47:                rts

 9E48  BD          PC_CheckPlayerColl:     lda     enemy_along,x
 9E49  DF 02
 9E4B  CD                                  cmp     player_along
 9E4C  02 02
 9E4E  D0                                  bne     loc9e5b
 9E4F  0B
  [ =9E5B ]
 9E50  BD                                  lda     enemy_seg,x
 9E51  B9 02
 9E53  CD                                  cmp     player_seg
 9E54  00 02
 9E56  D0                                  bne     loc9e5b
 9E57  03
  [ =9E5B ]
 9E58  20                                  jsr     loca343
 9E59  43 A3
 9E5B  60          loc9e5b:                rts

 9E5C  20          PC_StartFlip:           jsr     rev_if_edge
 9E5D  AB 9E
 9E5F  BD          loc9e5f:                lda     enemy_type_info,x
 9E60  83 02
 9E62  09                                  ora     #$80
 9E63  80
 9E64  9D                                  sta     enemy_type_info,x
 9E65  83 02
 9E67  29                                  and     #ENEMY_TYPE_MASK
 9E68  07
 9E69  C9                                  cmp     #ENEMY_TYPE_FUSEBALL
 9E6A  04
 9E6B  D0                                  bne     loc9e8c
 9E6C  1F
  [ =9E8C ]
 9E6D  BD                                  lda     enemy_type_info,x
 9E6E  83 02
 9E70  29                                  and     #$40
 9E71  40
 9E72  D0                                  bne     loc9e79
 9E73  05
  [ =9E79 ]
 9E74  A9                                  lda     #$81
 9E75  81
 9E76  B8                                  clv
 9E77  50                                  bvc     loc9e86
 9E78  0D
  [ =9E86 ]
 9E79  BD          loc9e79:                lda     enemy_seg,x
 9E7A  B9 02
 9E7C  38                                  sec
 9E7D  E9                                  sbc     #$01
 9E7E  01
 9E7F  29                                  and     #$0f
 9E80  0F
 9E81  9D                                  sta     enemy_seg,x
 9E82  B9 02
 9E84  A9                                  lda     #$87
 9E85  87
 9E86  9D          loc9e86:                sta     more_enemy_info,x
 9E87  CC 02
 9E89  B8                                  clv
 9E8A  50                                  bvc     loc9eaa
 9E8B  1E
  [ =9EAA ]
 9E8C  BD          loc9e8c:                lda     enemy_type_info,x
 9E8D  83 02
 9E8F  29                                  and     #$40
 9E90  40
 9E91  F0                                  beq     loc9e9e
 9E92  0B
  [ =9E9E ]
 9E93  BD                                  lda     enemy_seg,x
 9E94  B9 02
 9E96  18                                  clc
 9E97  69                                  adc     #$01
 9E98  01
 9E99  29                                  and     #$0f
 9E9A  0F
 9E9B  9D                                  sta     enemy_seg,x
 9E9C  B9 02
 9E9E  BD          loc9e9e:                lda     enemy_type_info,x
 9E9F  83 02
 9EA1  BC                                  ldy     enemy_seg,x
 9EA2  B9 02
 9EA4  20                                  jsr     get_angle
 9EA5  D7 9E
 9EA7  9D                                  sta     more_enemy_info,x
 9EA8  CC 02
 9EAA  60          loc9eaa:                rts

                   ; Reverse motion direction if level open and we've run 
                   into an edge.

 9EAB  AD          rev_if_edge:            lda     open_level
 9EAC  11 01
 9EAE  F0                                  beq     loc9ed6
 9EAF  26
  [ =9ED6 ]
 9EB0  BD                                  lda     enemy_type_info,x
 9EB1  83 02
 9EB3  29                                  and     #$40
 9EB4  40
 9EB5  F0                                  beq     loc9ec9
 9EB6  12
  [ =9EC9 ]
 9EB7  BD                                  lda     enemy_seg,x
 9EB8  B9 02
 9EBA  C9                                  cmp     #$0e
 9EBB  0E
 9EBC  90                                  bcc     loc9ec6
 9EBD  08
  [ =9EC6 ]
 9EBE  BD                                  lda     enemy_type_info,x
 9EBF  83 02
 9EC1  29                                  and     #$bf
 9EC2  BF
 9EC3  9D                                  sta     enemy_type_info,x
 9EC4  83 02
 9EC6  B8          loc9ec6:                clv
 9EC7  50                                  bvc     loc9ed6
 9EC8  0D
  [ =9ED6 ]
 9EC9  BD          loc9ec9:                lda     enemy_seg,x
 9ECA  B9 02
 9ECC  D0                                  bne     loc9ed6
 9ECD  08
  [ =9ED6 ]
 9ECE  BD                                  lda     enemy_type_info,x
 9ECF  83 02
 9ED1  09                                  ora     #$40
 9ED2  40
 9ED3  9D                                  sta     enemy_type_info,x
 9ED4  83 02
 9ED6  60          loc9ed6:                rts

                   ; Enter with motion value in A, segment number in Y; 
                   returns with angle
                   ; value ($0-$f) in A, |ed with $80.

 9ED7  29          get_angle:              and     #$40
 9ED8  40
 9ED9  F0                                  beq     loc9eeb
 9EDA  10
  [ =9EEB ]
 9EDB  88                                  dey
 9EDC  98                                  tya
 9EDD  29                                  and     #$0f
 9EDE  0F
 9EDF  A8                                  tay
 9EE0  B9                                  lda     tube_angle,y
 9EE1  EE 03
 9EE3  18                                  clc
 9EE4  69                                  adc     #$08
 9EE5  08
 9EE6  29                                  and     #$0f
 9EE7  0F
 9EE8  B8                                  clv
 9EE9  50                                  bvc     loc9eee
 9EEA  03
  [ =9EEE ]
 9EEB  B9          loc9eeb:                lda     tube_angle,y
 9EEC  EE 03
 9EEE  09          loc9eee:                ora     #$80
 9EEF  80
 9EF0  60                                  rts

 9EF1  A0          PC_FuseballMove:        ldy     #$04
 9EF2  04
 9EF3  BD                                  lda     active_enemy_info,x
 9EF4  8A 02
 9EF6  30                                  bmi     loc9f43
 9EF7  4B
  [ =9F43 ]
 9EF8  BD                                  lda     enemy_along_lsb,x
 9EF9  9F 02
 9EFB  18                                  clc
 9EFC  6D                                  adc     spd_fuseball_lsb
 9EFD  64 01
 9EFF  9D                                  sta     enemy_along_lsb,x
 9F00  9F 02
 9F02  BD                                  lda     enemy_along,x
 9F03  DF 02
 9F05  6D                                  adc     spd_fuseball_msb
 9F06  69 01
 9F08  9D                                  sta     enemy_along,x
 9F09  DF 02
 9F0B  CD                                  cmp     player_along
 9F0C  02 02
 9F0E  B0                                  bcs     loc9f19
 9F0F  09
  [ =9F19 ]
 9F10  AD                                  lda     player_along
 9F11  02 02
 9F13  9D                                  sta     enemy_along,x
 9F14  DF 02
 9F16  B8                                  clv
 9F17  50                                  bvc     loc9f2a
 9F18  11
  [ =9F2A ]
 9F19  AC          loc9f19:                ldy     enemies_pending         
                   ; if no pending, rush to top
 9F1A  AB 03
 9F1C  F0                                  beq     loc9f29
 9F1D  0B
  [ =9F29 ]
 9F1E  A4                                  ldy     curlevel
 9F1F  9F
 9F20  C0                                  cpy     #$11
 9F21  11
 9F22  B0                                  bcs     loc9f26                 
                   ; branch if level >= 17
 9F23  02
  [ =9F26 ]
 9F24  C9                                  cmp     #$20
 9F25  20
 9F26  B8          loc9f26:                clv
 9F27  50                                  bvc     loc9f2a
 9F28  01
  [ =9F2A ]
 9F29  60          loc9f29:                rts

 9F2A  B0          loc9f2a:                bcs     loc9f3d
 9F2B  11
  [ =9F3D ]
 9F2C  AD                                  lda     fuse_move_flg
 9F2D  59 01
 9F2F  10                                  bpl     loc9f37
 9F30  06
  [ =9F37 ]
 9F31  20                                  jsr     loc9f81
 9F32  81 9F
 9F34  B8                                  clv
 9F35  50                                  bvc     loc9f3a
 9F36  03
  [ =9F3A ]
 9F37  20          loc9f37:                jsr     loc9f8a
 9F38  8A 9F
 9F3A  B8          loc9f3a:                clv
 9F3B  50                                  bvc     loc9f40
 9F3C  03
  [ =9F40 ]
 9F3D  20          loc9f3d:                jsr     loc9f5f
 9F3E  5F 9F
 9F40  B8          loc9f40:                clv
 9F41  50                                  bvc     loc9f5e
 9F42  1B
  [ =9F5E ]
 9F43  20          loc9f43:                jsr     MoveTowardsFarEnd       
                   ; move away per speed for type Y
 9F44  99 9C
 9F46  C9                                  cmp     #$80
 9F47  80
 9F48  90                                  bcc     loc9f5b
 9F49  11
  [ =9F5B ]
 9F4A  2C                                  bit     fuse_move_flg
 9F4B  59 01
 9F4D  50                                  bvc     loc9f55                 
                   ; branch if level < 17
 9F4E  06
  [ =9F55 ]
 9F4F  20                                  jsr     loc9f81
 9F50  81 9F
 9F52  B8                                  clv
 9F53  50                                  bvc     loc9f58
 9F54  03
  [ =9F58 ]
 9F55  20          loc9f55:                jsr     loc9f8a
 9F56  8A 9F
 9F58  B8          loc9f58:                clv
 9F59  50                                  bvc     loc9f5e
 9F5A  03
  [ =9F5E ]
 9F5B  20          loc9f5b:                jsr     loc9f5f
 9F5C  5F 9F
 9F5E  60          loc9f5e:                rts
 9F5F  BD          loc9f5f:                lda     enemy_along,x
 9F60  DF 02
 9F62  29                                  and     #$20
 9F63  20
 9F64  F0                                  beq     loc9f80
 9F65  1A
  [ =9F80 ]
 9F66  AD                                  lda     pokey2_rand
 9F67  DA 60
 9F69  CD                                  cmp     fuse_move_prb
 9F6A  5F 01
 9F6C  90                                  bcc     loc9f80
 9F6D  12
  [ =9F80 ]
 9F6E  2C                                  bit     fuse_move_flg
 9F6F  59 01
 9F71  50                                  bvc     loc9f7d
 9F72  0A
  [ =9F7D ]
 9F73  8A                                  txa
 9F74  4A                                  lsr     a
 9F75  90                                  bcc     loc9f8a
 9F76  13
  [ =9F8A ]
 9F77  20                                  jsr     loc9f81
 9F78  81 9F
 9F7A  B8                                  clv
 9F7B  50                                  bvc     loc9f80
 9F7C  03
  [ =9F80 ]
 9F7D  20          loc9f7d:                jsr     loc9f8a
 9F7E  8A 9F
 9F80  60          loc9f80:                rts

 9F81  20          loc9f81:                jsr     PC_AimTowardsPlayerLR   
                       ; Aim then reverse == move away from player?
 9F82  67 9D
 9F84  20                                  jsr     PC_ReverseLeftRightDir
 9F85  4F 9C
 9F87  4C                                  jmp     loc9f99
 9F88  99 9F
 9F8A  BD          loc9f8a:                lda     enemy_type_info,x
 9F8B  83 02
 9F8D  29                                  and     #$bf
 9F8E  BF
 9F8F  2C                                  bit     pokey1_rand
 9F90  CA 60
 9F92  50                                  bvc     loc9f96
 9F93  02
  [ =9F96 ]
 9F94  09                                  ora     #$40
 9F95  40
 9F96  9D          loc9f96:                sta     enemy_type_info,x
 9F97  83 02
 9F99  AD          loc9f99:                lda     open_level
 9F9A  11 01
 9F9C  F0                                  beq     loc9fbc
 9F9D  1E
  [ =9FBC ]
 9F9E  BD                                  lda     enemy_type_info,x
 9F9F  83 02
 9FA1  29                                  and     #$40
 9FA2  40
 9FA3  D0                                  bne     loc9faf
 9FA4  0A
  [ =9FAF ]
 9FA5  BD                                  lda     enemy_seg,x
 9FA6  B9 02
 9FA8  C9                                  cmp     #$0f
 9FA9  0F
 9FAA  B0                                  bcs     loc9fb4
 9FAB  08
  [ =9FB4 ]
 9FAC  B8                                  clv
 9FAD  50                                  bvc     loc9fbc
 9FAE  0D
  [ =9FBC ]
 9FAF  BD          loc9faf:                lda     enemy_seg,x
 9FB0  B9 02
 9FB2  D0                                  bne     loc9fbc
 9FB3  08
  [ =9FBC ]
 9FB4  BD          loc9fb4:                lda     enemy_type_info,x
 9FB5  83 02
 9FB7  49                                  eor     #$40
 9FB8  40
 9FB9  9D                                  sta     enemy_type_info,x
 9FBA  83 02
 9FBC  A9          loc9fbc:                lda     #$66
 9FBD  66
 9FBE  8D                                  sta     pcode_pc
 9FBF  0B 01
 9FC1  4C                                  jmp     loc9e5f
 9FC2  5F 9E

 9FC4  A9          PC_SpikerStuff:         lda     #$01
 9FC5  01
 9FC6  8D                                  sta     $010c
 9FC7  0C 01
 9FC9  BC                                  ldy     enemy_seg,x
 9FCA  B9 02
 9FCC  B9                                  lda     lane_spike_height,y
 9FCD  AC 03
 9FCF  D0                                  bne     loc9fd6
 9FD0  05
  [ =9FD6 ]
 9FD1  A9                                  lda     #$f1
 9FD2  F1
 9FD3  99                                  sta     lane_spike_height,y
 9FD4  AC 03
 9FD6  BD          loc9fd6:                lda     enemy_along,x
 9FD7  DF 02
 9FD9  D9                                  cmp     lane_spike_height,y
 9FDA  AC 03
 9FDC  B0                                  bcs     loc9fe6
 9FDD  08
  [ =9FE6 ]
 9FDE  99                                  sta     lane_spike_height,y
 9FDF  AC 03
 9FE1  A9                                  lda     #$80
 9FE2  80
 9FE3  99                                  sta     $039a,y
 9FE4  9A 03
 9FE6  BD          loc9fe6:                lda     enemy_along,x
 9FE7  DF 02
 9FE9  C9                                  cmp     #$20
 9FEA  20
 9FEB  B0                                  bcs     loc9ffd
 9FEC  10
  [ =9FFD ]
 9FED  BD                                  lda     active_enemy_info,x
 9FEE  8A 02
 9FF0  09                                  ora     #$80
 9FF1  80
 9FF2  9D                                  sta     active_enemy_info,x
 9FF3  8A 02
 9FF5  A9                                  lda     #$20
 9FF6  20
 9FF7  9D                                  sta     enemy_along,x
 9FF8  DF 02
 9FFA  B8                                  clv
 9FFB  50                                  bvc     loca027
 9FFC  2A
  [ =A027 ]
 9FFD  C9          loc9ffd:                cmp     #$f2
 9FFE  F2
 9FFF  90                                  bcc     loca027
 A000  26
  [ =A027 ]
 A001  20                                  jsr     spiker_hop
 A002  28 A0
 A004  A9                                  lda     #$f0
 A005  F0
 A006  9D                                  sta     enemy_along,x
 A007  DF 02

 A009  AD                                  lda     enemies_pending
 A00A  AB 03
 A00C  D0                                  bne     loca027
 A00D  19
  [ =A027 ]

                   ; If no enemies pending, turn it into a flipper-holding 
                   tanker.  This is the code that causes that single last 
                   enemy to always
                   ; come out as a tanker.

 A00E  BD                                  lda     active_enemy_info,x
 A00F  8A 02
 A011  29                                  and     #$fc
 A012  FC
 A013  09                                  ora     #$01
 A014  01
 A015  9D                                  sta     active_enemy_info,x
 A016  8A 02
 A018  BD                                  lda     enemy_type_info,x
 A019  83 02
 A01B  29                                  and     #~ENEMY_TYPE_MASK
 A01C  F8
 A01D  09                                  ora     #ENEMY_TYPE_TANKER
 A01E  02
 A01F  9D                                  sta     enemy_type_info,x
 A020  83 02
 A022  A9                                  lda     #$00
 A023  00
 A024  8D                                  sta     $010c
 A025  0C 01
 A027  60          loca027:                rts

 A028  A9          spiker_hop:             lda     #$00
 A029  00
 A02A  85                                  sta     $2d
 A02B  2D
 A02C  A9                                  lda     #$0f
 A02D  0F
 A02E  8D                                  sta     avl_spikers
 A02F  40 01
 A031  AD                                  lda     pokey2_rand
 A032  DA 60
 A034  29                                  and     #$0f
 A035  0F
 A036  A8                                  tay
 A037  C0          loca037:                cpy     #$0f
 A038  0F
 A039  D0                                  bne     loca040
 A03A  05
  [ =A040 ]
 A03B  AD                                  lda     open_level
 A03C  11 01
 A03E  D0                                  bne     loca04f
 A03F  0F
  [ =A04F ]
 A040  B9          loca040:                lda     lane_spike_height,y
 A041  AC 03
 A043  D0                                  bne     loca047
 A044  02
  [ =A047 ]
 A045  A9                                  lda     #$ff
 A046  FF
 A047  C5          loca047:                cmp     $2d
 A048  2D
 A049  90                                  bcc     loca04f
 A04A  04
  [ =A04F ]
 A04B  85                                  sta     $2d
 A04C  2D
 A04D  84                                  sty     $29
 A04E  29
 A04F  88          loca04f:                dey
 A050  10                                  bpl     loca054
 A051  02
  [ =A054 ]
 A052  A0                                  ldy     #$0f
 A053  0F
 A054  CE          loca054:                dec     avl_spikers
 A055  40 01
 A057  10                                  bpl     loca037
 A058  DE
  [ =A037 ]
 A059  A5                                  lda     $29
 A05A  29
 A05B  9D                                  sta     enemy_seg,x
 A05C  B9 02
 A05E  18                                  clc
 A05F  69                                  adc     #$01
 A060  01
 A061  29                                  and     #$0f
 A062  0F
 A063  9D                                  sta     more_enemy_info,x
 A064  CC 02
 A066  BD                                  lda     active_enemy_info,x
 A067  8A 02
 A069  29                                  and     #$7f
 A06A  7F
 A06B  9D                                  sta     active_enemy_info,x
 A06C  8A 02
 A06E  60                                  rts

                   ; Enemy has reached the $20 point in the tube.  Handle 
                   it.

 A06F  B9          loca06f:                lda     enemy_along,y
 A070  DF 02
 A072  85                                  sta     $29
 A073  29
 A074  CD                                  cmp     player_along
 A075  02 02
 A077  D0                                  bne     loca088
 A078  0F
  [ =A088 ]
 A079  B9                                  lda     enemy_type_info,y
 A07A  83 02
 A07C  29                                  and     #ENEMY_TYPE_MASK
 A07D  07
 A07E  C9                                  cmp     #ENEMY_TYPE_FUSEBALL
 A07F  04
 A080  F0                                  beq     loca088
 A081  06
  [ =A088 ]
 A082  CE                                  dec     NumEnemiesOnTop         
                           ; All enemies except fuseballs dec enemy 
                   topcount
 A083  09 01
 A085  B8                                  clv
 A086  50                                  bvc     +
 A087  03
  [ =A08B ]
 A088  CE          loca088:                dec     NumEnemiesInTube
 A089  08 01
 A08B  A9          +                       lda     #$00
 A08C  00
 A08D  99                                  sta     enemy_along,y
 A08E  DF 02
 A090  B9                                  lda     enemy_type_info,y
 A091  83 02
 A093  29                                  and     #ENEMY_TYPE_MASK
 A094  07
 A095  86                                  stx     $35
 A096  35
 A097  AA                                  tax
 A098  DE                                  dec     n_enemy_by_type,x
 A099  42 01
 A09B  A6                                  ldx     $35
 A09C  35
 A09D  B9                                  lda     active_enemy_info,y
 A09E  8A 02
 A0A0  29                                  and     #$03
 A0A1  03
 A0A2  F0                                  beq     loca0f6
 A0A3  52
  [ =A0F6 ]
 A0A4  38                                  sec
 A0A5  E9                                  sbc     #$01
 A0A6  01
 A0A7  C9                                  cmp     #$02
 A0A8  02
 A0A9  D0                                  bne     loca0ad
 A0AA  02
  [ =A0AD ]
 A0AB  A9                                  lda     #$04
 A0AC  04
 A0AD  85          loca0ad:                sta     $2b
 A0AE  2B
 A0AF  B9                                  lda     enemy_seg,y
 A0B0  B9 02
 A0B2  38                                  sec
 A0B3  E9                                  sbc     #$01
 A0B4  01
 A0B5  29                                  and     #$0f
 A0B6  0F
 A0B7  C9                                  cmp     #$0f
 A0B8  0F
 A0B9  90                                  bcc     loca0c2
 A0BA  07
  [ =A0C2 ]
 A0BB  2C                                  bit     open_level
 A0BC  11 01
 A0BE  10                                  bpl     loca0c2
 A0BF  02
  [ =A0C2 ]
 A0C0  A9                                  lda     #$00
 A0C1  00
 A0C2  85          loca0c2:                sta     $2a
 A0C3  2A
 A0C4  20                                  jsr     loc9b07
 A0C5  07 9B
 A0C7  A5                                  lda     $2d
 A0C8  2D
 A0C9  8D                                  sta     pcode_pc
 A0CA  0B 01
 A0CC  CE                                  dec     pcode_pc
 A0CD  0B 01
 A0CF  A9                                  lda     #$00
 A0D0  00
 A0D1  8D                                  sta     pcode_run
 A0D2  0A 01
 A0D4  20                                  jsr     loc994d
 A0D5  4D 99
 A0D7  F0                                  beq     loca0f6
 A0D8  1D
  [ =A0F6 ]
 A0D9  A5                                  lda     $2a
 A0DA  2A
 A0DB  18                                  clc
 A0DC  69                                  adc     #$02
 A0DD  02
 A0DE  29                                  and     #$0f
 A0DF  0F
 A0E0  C9                                  cmp     #$0f
 A0E1  0F
 A0E2  D0                                  bne     loca0eb
 A0E3  07
  [ =A0EB ]
 A0E4  2C                                  bit     open_level
 A0E5  11 01
 A0E7  10                                  bpl     loca0eb
 A0E8  02
  [ =A0EB ]
 A0E9  A9                                  lda     #$0e
 A0EA  0E
 A0EB  85          loca0eb:                sta     $2a
 A0EC  2A
 A0ED  A5                                  lda     $2b
 A0EE  2B
 A0EF  09                                  ora     #$40
 A0F0  40
 A0F1  85                                  sta     $2b
 A0F2  2B
 A0F3  20                                  jsr     loc994d
 A0F4  4D 99
 A0F6  60          loca0f6:                rts

                   ; See the comments on $9b3a for what this is.

                   ;-------------------------------------------------------
                   ---------------------------------------------------
                   ; PCode Program
                   ;-------------------------------------------------------
                   ---------------------------------------------------
                   ; The following is the "program" that is executed in 
                   PCode.  In order to make it readable, I've added a
                   ; macro that yields the relative address of a label 
                   (relative to the beginning of the PCode Program) less
                   ; one, which is how the table was coded by Atari.  I've 
                   opeted NOT to do the entire PCode program because
                   ; I do not want to introduce a huge dependency on a 
                   macro, and the first few blocks can be returned to
                   ; "normal" fairly easily.  The rest I left in binary as 
                   an exercise for the reader :-)
                   ;-------------------------------------------------------
                   ---------------------------------------------------

                   .MACRO  PCADDR, ?arg
                       .byte ?arg-PCodeProgram-1
                   .ENDM

                   PCodeProgram:

 A0F7  0C          SpikerEntry:            .byte   PCOP_MoveTowardsTop     
                    ; 00:                move per speed
 A0F8  0E          DoSpikerStuff:          .byte   PCOP_SpikerStuff        
                    ; 01:                spike, reverse, convert to tanker
 A0F9  1A                                  .byte   PCOP_BranchOnZero       
                    ; 02:                branch conditional (if converted 
                   to tanker)
                                            pcaddr JustMoveUp              
                    ; 03:                   to 07
^A0FA  06              .byte JustMoveUp-PCodeProgram-1
 A0FB  00                                  .byte   PCOP_Halt               
                    ; 04:                done
 A0FC  06                                  .byte   PCOP_Jump               
                    ; 05:                branch
                                            pcaddr PCodeProgram            
                    ; 06:                   to 00
^A0FD  FF              .byte PCodeProgram-PCodeProgram-1

                   ; Entry point for "just move up".  Used for tankers, 
                   for flippers on some
                   ; levels (shape 14 and shape 1, for example) and in 
                   some cases for the pieces when a tanker splits...

 A0FE  0C          JustMoveUp:             .byte   PCOP_MoveTowardsTop     
                    ; 07:                move per speed  <--+
 A0FF  00                                  .byte   PCOP_Halt               
                    ; 08:                done               |
 A100  06                                  .byte   PCOP_Jump               
                    ; 09:                branch             |
                                            pcaddr JustMoveUp              
                    ; 0a:                   to 07 ----------+
^A101  06              .byte JustMoveUp-PCodeProgram-1

                   ; Flipper entry point:                move 8 times, 
                   flip, repeat.  Don't move during flip.

 A102  02          FlipperEntry:           .byte   PCOP_Store              
                    ; 0b:                store in enm_pc_storage,x...
 A103  08                                  .byte   $08                     
                    ; 0c:                   ...08
 A104  0C          MoveUp:                 .byte   PCOP_MoveTowardsTop     
                    ; 0d:                move per speed
 A105  00                                  .byte   PCOP_Halt               
                    ; 0e:                done
 A106  08                                  .byte   PCOP_DecBranchIfElse    
                    ; 0f:                if --enm_pc_storage,x then branch
                                            pcaddr MoveUp                  
                    ; 10:                   to 0d
^A107  0C              .byte MoveUp-PCodeProgram-1
 A108  12                                  .byte   PCOP_StartFlip          
                    ; 11:                start flip
 A109  00          HaltFlipper:            .byte   PCOP_Halt               
                    ; 12:                done
 A10A  14                                  .byte   PCOP_ContFInishFlip     
                    ; 13:                continue/end flip
 A10B  04                                  .byte   PCOP_Skip2IfZero        
                    ; 14:                if $010c == 0, skip to 17
 A10C  06                                  .byte   PCOP_Jump               
                    ; 15:                branch
                                            pcaddr HaltFlipper             
                    ; 16:                   to 12
^A10D  11              .byte HaltFlipper-PCodeProgram-1
 A10E  06                                  .byte   PCOP_Jump               
                    ; 17:                branch
                                            pcaddr FlipperEntry            
                    ; 18:                   to 0b
^A10F  0A              .byte FlipperEntry-PCodeProgram-1

                   ; Flipper entry point:                flip constantly, 
                   moving for one tick between flips.

 A110  0C                                  .byte   $0c ; 19:               
                    move per speed
 A111  00                                  .byte   $00 ; 1a:               
                    done
 A112  12                                  .byte   $12 ; 1b:               
                    start flip
 A113  00                                  .byte   $00 ; 1c:               
                    done
 A114  14                                  .byte   $14 ; 1d:               
                    continue/end flip
 A115  0C                                  .byte   $0c ; 1e:               
                    move per speed
 A116  04                                  .byte   $04 ; 1f: if $010c == 0,
                    skip to 22
 A117  06                                  .byte   $06 ; 20:               
                    branch
 A118  1B                                  .byte   $1b ; 21:   to 1c
 A119  06                                  .byte   $06 ; 22:               
                    branch
 A11A  18                                  .byte   $18 ; 23:   to 19

                   ; Flipper entry point:                flips twice one 
                   way, three times the other, twice,
                   ; three times, twice, three times, etc.  Move on every 
                   tick except the
                   ; ones on which we start a flip.

 A11B  0C                                  .byte   $0c ; 24:               
                    move per speed
 A11C  00                                  .byte   $00 ; 25:               
                    done
 A11D  02                                  .byte   $02 ; 26:               
                    store in enm_pc_storage,x...
 A11E  02                                  .byte   $02 ; 27:   ...02
 A11F  12                                  .byte   $12 ; 28:               
                    start flip
 A120  00                                  .byte   $00 ; 29:               
                    done
 A121  14                                  .byte   $14 ; 2a:               
                    continue/end flip
 A122  0C                                  .byte   $0c ; 2b:               
                    move per speed
 A123  04                                  .byte   $04 ; 2c: if $010c == 0,
                    skip to 2f
 A124  06                                  .byte   $06 ; 2d:               
                    branch
 A125  28                                  .byte   $28 ; 2e:   to 29
 A126  00                                  .byte   $00 ; 2f:               
                    done
 A127  08                                  .byte   $08 ; 30: if 
                   --enm_pc_storage,x then branch
 A128  27                                  .byte   $27 ; 31:   to 28
 A129  16                                  .byte   $16 ; 32:               
                    reverse direction
 A12A  02                                  .byte   $02 ; 33:               
                    store in enm_pc_storage,x...
 A12B  03                                  .byte   $03 ; 34:   ...03
 A12C  12                                  .byte   $12 ; 35:               
                    start flip
 A12D  00                                  .byte   $00 ; 36:               
                    done
 A12E  14                                  .byte   $14 ; 37:               
                    continue/end flip
 A12F  0C                                  .byte   $0c ; 38:               
                    move per speed
 A130  04                                  .byte   $04 ; 39: if $010c == 0,
                    skip to 3c
 A131  06                                  .byte   $06 ; 3a:               
                    branch
 A132  35                                  .byte   $35 ; 3b:   to 36
 A133  00                                  .byte   $00 ; 3c:               
                    done
 A134  08                                  .byte   $08 ; 3d: if 
                   --enm_pc_storage,x then branch
 A135  34                                  .byte   $34 ; 3e:   to 35
 A136  16                                  .byte   $16 ; 3f:               
                    reverse direction
 A137  06                                  .byte   $06 ; 40:               
                    branch
 A138  23                                  .byte   $23 ; 41:   to 24

                   ; Action 0c jumps here upon reaching top-of-tube.

 A139  02                                  .byte   $02 ; 42:               
                    store in enm_pc_storage,x...
 A13A  04                                  .byte   $04 ; 43:   ...04
 A13B  18                                  .byte   $18 ; 44:               
                    check and maybe grab player
 A13C  00                                  .byte   $00 ; 45:               
                    done
 A13D  08                                  .byte   $08 ; 46: if 
                   --enm_pc_storage,x then branch
 A13E  43                                  .byte   $43 ; 47:   to 44
 A13F  12                                  .byte   $12 ; 48:               
                    start flip
 A140  00                                  .byte   $00 ; 49:               
                    done
 A141  10                                  .byte   $10 ; 4a:               
                    flip_top_accel -> enm_pc_storage,x
 A142  B3                                  .byte   $b3 ; 4b:   (value for 
                   previous)
 A143  14                                  .byte   $14 ; 4c:               
                    continue/end flip
 A144  1A                                  .byte   $1a ; 4d: if $010c == 0,
                    branch
 A145  41                                  .byte   $41 ; 4e:   to 42
 A146  08                                  .byte   $08 ; 4f: if 
                   --enm_pc_storage,x then branch
 A147  4B                                  .byte   $4b ; 50:   to 4c
 A148  06                                  .byte   $06 ; 51:               
                    branch
 A149  48                                  .byte   $48 ; 52:   to 49

                   ; Flipper entry point: for levels where flippers ride 
                   spikes.
                   ; Move every tick.

 A14A  00                                  .byte   $00 ; 53:               
                    done
 A14B  0C                                  .byte   $0c ; 54:               
                    move per speed
 A14C  1C                                  .byte   $1c ; 55:               
                    set $010c to enemy-above-spike-p
 A14D  1A                                  .byte   $1a ; 56: if $010c == 0,
                    branch
 A14E  52                                  .byte   $52 ; 57:   to 53
 A14F  12                                  .byte   $12 ; 58:               
                    start flip
 A150  00                                  .byte   $00 ; 59:               
                    done
 A151  0C                                  .byte   $0c ; 5a:               
                    move per speed
 A152  14                                  .byte   $14 ; 5b:               
                    continue/end flip
 A153  1A                                  .byte   $1a ; 5c: if $010c == 0,
                    branch
 A154  52                                  .byte   $52 ; 5d:   to 53
 A155  00                                  .byte   $00 ; 5e:               
                    done
 A156  06                                  .byte   $06 ; 5f:               
                    branch
 A157  5A                                  .byte   $5a ; 60:   to 5b

                   ; fuseball entry point.

 A158  1E                                  .byte   $1e ; 61:               
                    fuseball movement?
 A159  20                                  .byte   $20 ; 62:               
                    check for enemy-touches-player death
 A15A  00                                  .byte   $00 ; 63:               
                    done
 A15B  06                                  .byte   $06 ; 64:               
                    branch
 A15C  60                                  .byte   $60 ; 65:   to 61
 A15D  00                                  .byte   $00 ; 66:               
                    done

                   ; PC_FuseballMove sets pc to here under some 
                   circumstances; see $9fbc.

 A15E  02                                  .byte   $02 ; 67:               
                    store in enm_pc_storage,x...
 A15F  03                                  .byte   $03 ; 68:   ...03
 A160  20                                  .byte   $20 ; 69:               
                    check for enemy-touches-player death
 A161  00                                  .byte   $00 ; 6a:               
                    done
 A162  08                                  .byte   $08 ; 6b: if 
                   --enm_pc_storage,x then branch
 A163  68                                  .byte   $68 ; 6c:   to 69
 A164  14                                  .byte   $14 ; 6d:               
                    continue/end flip
 A165  1A                                  .byte   $1a ; 6e: if $010c == 0,
                    branch
 A166  60                                  .byte   $60 ; 6f:   to 61
 A167  06                                  .byte   $06 ; 70:               
                    branch
 A168  65                                  .byte   $65 ; 71:   to 66

                   ; Pulsar entry point.

 A169  10                                  .byte   $10 ; 72:               
                    pulsar_speed -> enm_pc_storage,x
 A16A  B2                                  .byte   $b2 ; 73:   (value for 
                   previous)
 A16B  22                                  .byte   $22 ; 74: do pulsar 
                   motion
 A16C  00                                  .byte   $00 ; 75:               
                    done
 A16D  08                                  .byte   $08 ; 76: if 
                   --enm_pc_storage,x then branch
 A16E  73                                  .byte   $73 ; 77:   to 74
 A16F  26                                  .byte   $26 ; 78:               
                    check if pulsing
 A170  1A                                  .byte   $1a ; 79: if not 
                   pulsing, branch
 A171  7E                                  .byte   $7e ; 7a:   to 7f
 A172  22                                  .byte   $22 ; 7b: do pulsar 
                   motion
 A173  00                                  .byte   $00 ; 7c:               
                    done
 A174  06                                  .byte   $06 ; 7d:               
                    branch
 A175  77                                  .byte   $77 ; 7e:   to 78
 A176  24                                  .byte   $24 ; 7f:               
                    enemy attract to player
 A177  12                                  .byte   $12 ; 80:               
                    start flip
 A178  00                                  .byte   $00 ; 81:               
                    done
 A179  14                                  .byte   $14 ; 82:               
                    continue/end flip
 A17A  1A                                  .byte   $1a ; 83: if $010c == 0,
                    branch
 A17B  71                                  .byte   $71 ; 84:   to 72
 A17C  06                                  .byte   $06 ; 85:               
                    branch
 A17D  80                                  .byte   $80 ; 86:   to 81

                   ; Flipper entry point:                flip away from 
                   player, move four ticks, repeat.
                   ; Move on every tick except those on which we start 
                   flips.

 A17E  24                                  .byte   $24 ; 87:               
                    enemy attract to player
 A17F  16                                  .byte   $16 ; 88:               
                    reverse enemy direction
 A180  12                                  .byte   $12 ; 89:               
                    start flip
 A181  00                                  .byte   $00 ; 8a:               
                    done
 A182  0C                                  .byte   $0c ; 8b:               
                    move per speed
 A183  14                                  .byte   $14 ; 8c:               
                    continue/end flip
 A184  04                                  .byte   $04 ; 8d: if $010c == 0,
                    skip to 90
 A185  06                                  .byte   $06 ; 8e:               
                    branch
 A186  89                                  .byte   $89 ; 8f:   to 8a
 A187  02                                  .byte   $02 ; 90:               
                    store in enm_pc_storage,x...
 A188  04                                  .byte   $04 ; 91:   ...04
 A189  00                                  .byte   $00 ; 92:               
                    done
 A18A  0C                                  .byte   $0c ; 93:               
                    move per speed
 A18B  08                                  .byte   $08 ; 94: if 
                   --enm_pc_storage,x then branch
 A18C  91                                  .byte   $91 ; 95:   to 92
 A18D  06                                  .byte   $06 ; 96:               
                    branch
 A18E  86                                  .byte   $86 ; 97:   to 87

                   ; Handle shots

 A18F  A2          move_shots:             ldx     #MAX_TOTAL_SHOTS-1
 A190  0B
 A191  86                                  stx     $37
 A192  37
 A193  A6          loca193:                ldx     $37
 A194  37
 A195  BD                                  lda     PlayerShotPositions,x
 A196  D3 02
 A198  F0                                  beq     loca1df                 
                   ; branch if this shot doesn't exist
 A199  45
  [ =A1DF ]
 A19A  E0                                  cpx     #MAX_PLAYER_SHOTS       
                   ; enemy or friendly?
 A19B  08
 A19C  B0                                  bcs     loca1c0                 
                   ; branch if enemy shot
 A19D  22
  [ =A1C0 ]

                   ; Friendly shot.  Move it down the tube.  $02f2, if set,
                    appears to slow
                   ; the shot down, presumably so it doesn't go off the 
                   back wall before it
                   ; gets a chance to hit a spiker.

 A19E  69                                  adc     #$09
 A19F  09
 A1A0  BC                                  ldy     $02f2,x
 A1A1  F2 02
 A1A3  F0                                  beq     loca1a8
 A1A4  03
  [ =A1A8 ]
 A1A5  38                                  sec
 A1A6  E9                                  sbc     #$04
 A1A7  04
 A1A8  9D          loca1a8:                sta     PlayerShotPositions,x
 A1A9  D3 02

                   ; Check to see if it has gone off the end of the tube

 A1AB  20                                  jsr     loca1fa
 A1AC  FA A1
 A1AE  BD                                  lda     PlayerShotPositions,x
 A1AF  D3 02
 A1B1  C9                                  cmp     #END_OF_TUNNEL
 A1B2  F0
 A1B3  90                                  bcc     loca1bd
 A1B4  08
  [ =A1BD ]

                   ; Shot went off back end of tube; destroy it

 A1B5  CE                                  dec     PlayerShotCount
 A1B6  35 01
 A1B8  A9                                  lda     #$00
 A1B9  00
 A1BA  9D                                  sta     PlayerShotPositions,x
 A1BB  D3 02
 A1BD  B8          loca1bd:                clv
 A1BE  50                                  bvc     loca1df
 A1BF  1F
  [ =A1DF ]

                   ; Enemy shot

 A1C0  BD          loca1c0:                lda     $02e6,x                 
                   ; enm_shot_lsb-8
 A1C1  E6 02
 A1C3  18                                  clc
 A1C4  6D                                  adc     enm_shotspd_lsb
 A1C5  20 01
 A1C7  9D                                  sta     $02e6,x                 
                   ; enm_shot_lsb-8
 A1C8  E6 02
 A1CA  BD                                  lda     PlayerShotPositions,x
 A1CB  D3 02
 A1CD  6D                                  adc     enm_shotspd_msb
 A1CE  18 01

                   ; Reached player's end of tube yet?

 A1D0  CD                                  cmp     player_along
 A1D1  02 02
 A1D3  B0                                  bcs     loca1dc
 A1D4  07
  [ =A1DC ]

                   ; Yes, at this end of tube

 A1D5  C6                                  dec     EnemyShotCount
 A1D6  A6
 A1D7  20                                  jsr     loca1e4 ; check to see 
                   if hit player
 A1D8  E4 A1
 A1DA  A9                                  lda     #$00
 A1DB  00
 A1DC  9D          loca1dc:                sta     PlayerShotPositions,x
 A1DD  D3 02

                   ; Next shot

 A1DF  C6          loca1df:                dec     $37
 A1E0  37
 A1E1  10                                  bpl     loca193
 A1E2  B0
  [ =A193 ]
 A1E3  60                                  rts

                   ; Called to see if enemy shot hit player.  Enemy shot 
                   number is in X,
                   ; offset by 8 (which is why we see PlayerShotSegments,x 
                   here instead of the
                   ; EnemyShotSegments,x we'd expect to).

 A1E4  AD          loca1e4:                lda     player_seg
 A1E5  00 02
 A1E7  DD                                  cmp     
                   EnemyShotSegments-MAX_PLAYER_SHOTS,x        ; BUGBUG I 
                   doubt this really wants to go backwards of 
                   EnemyShotSegments!
 A1E8  AD 02
 A1EA  D0                                  bne     loca1f9
 A1EB  0D
  [ =A1F9 ]
 A1EC  AD                                  lda     player_state
 A1ED  01 02
 A1EF  30                                  bmi     loca1f9
 A1F0  08
  [ =A1F9 ]
 A1F1  20                                  jsr     loca34b
 A1F2  4B A3
 A1F4  A9                                  lda     #$81
 A1F5  81
 A1F6  8D                                  sta     player_state
 A1F7  01 02
 A1F9  60          loca1f9:                rts

                   ; Called to see if player shot hit a spike.

 A1FA  BC          loca1fa:                ldy     PlayerShotSegments,x
 A1FB  AD 02
 A1FD  B9                                  lda     lane_spike_height,y
 A1FE  AC 03
 A200  F0                                  beq     nospikehit              
                       ; Spike height 0 in this lane, so cannot hit
 A201  3C
  [ =A23E ]
 A202  BD                                  lda     PlayerShotPositions,x
 A203  D3 02
 A205  D9                                  cmp     lane_spike_height,y
 A206  AC 03
 A208  90                                  bcc     loca22f
 A209  25
  [ =A22F ]
 A20A  C9                                  cmp     #END_OF_TUNNEL
 A20B  F0
 A20C  90                                  bcc     loca210
 A20D  02
  [ =A210 ]

 A20E  A9                                  lda     #$00                    
                       ; If shot at end of tunnel, spike is now gone
 A20F  00
 A210  99          loca210:                sta     lane_spike_height,y     
                       ; Shot position becomes the new spike height
 A211  AC 03
 A213  FE                                  inc     $02f2,x
 A214  F2 02
 A216  A9                                  lda     #$c0
 A217  C0
 A218  99                                  sta     $039a,y
 A219  9A 03
 A21B  20                                  jsr     locccf6
 A21C  F6 CC
 A21E  A2                                  ldx     #$ff
 A21F  FF

 A220  A9                                  lda     #$00                    
                       ; Add 1 to score
 A221  00
 A222  85                                  sta     $2a
 A223  2A
 A224  85                                  sta     $2b
 A225  2B
 A226  A9                                  lda     #$01
 A227  01
 A228  85                                  sta     $29
 A229  29
 A22A  20                                  jsr     inc_score
 A22B  6C CA
 A22D  A6                                  ldx     $37
 A22E  37

 A22F  BD          loca22f:                lda     $02f2,x
 A230  F2 02
 A232  C9                                  cmp     #$02
 A233  02
 A234  90                                  bcc     nospikehit
 A235  08
  [ =A23E ]
 A236  A9                                  lda     #$00
 A237  00
 A238  9D                                  sta     PlayerShotPositions,x
 A239  D3 02
 A23B  CE                                  dec     PlayerShotCount
 A23C  35 01
 A23E  60          nospikehit:             rts

                   ; Check to see if player fires?

 A23F  AD          CheckPlayerFire:        lda     player_state            
                   ; Check to see if player has died
 A240  01 02
 A242  30                                  bmi     loca2a5
 A243  61
  [ =A2A5 ]
 A244  A5                                  lda     game_mode
 A245  05
 A246  30                                  bmi     FireShot                
                       ; Could this be attract mode decision to fire?
 A247  28
  [ =A270 ]
 A248  AD                                  lda     $0106
 A249  06 01
 A24B  85                                  sta     $29
 A24C  29
 A24D  A2                                  ldx     #$0a                    
                   ; BUGBUG Why 10?  There are only 4 max enemy shots, and 
                   the playershot table
 A24E  0A
 A24F  BD          loca24f:                lda     EnemyShotPositions,x    
                   ;                 comes first so it's not an 
                   intentional overreach into that...
 A250  DB 02
 A252  F0                                  beq     loca268
 A253  14
  [ =A268 ]
 A254  BD                                  lda     EnemyShotSegments,x
 A255  B5 02
 A257  38                                  sec
 A258  ED                                  sbc     player_seg
 A259  00 02
 A25B  10                                  bpl     loca262
 A25C  05
  [ =A262 ]
 A25D  49                                  eor     #$ff
 A25E  FF
 A25F  18                                  clc
 A260  69                                  adc     #$01
 A261  01
 A262  C9          loca262:                cmp     #$02
 A263  02
 A264  B0                                  bcs     loca268
 A265  02
  [ =A268 ]
 A266  E6                                  inc     $29
 A267  29
 A268  CA          loca268:                dex
 A269  10                                  bpl     loca24f
 A26A  E4
  [ =A24F ]
 A26B  A5                                  lda     $29
 A26C  29
 A26D  B8                                  clv
 A26E  50                                  bvc     loca274
 A26F  04
  [ =A274 ]

 A270  A5          FireShot:               lda     zap_fire_debounce
 A271  4D
 A272  29                                  and     #$10                    
                               ; fire
 A273  10
 A274  F0          loca274:                beq     loca2a5
 A275  2F
  [ =A2A5 ]
 A276  A2                                  ldx     #MAX_PLAYER_SHOTS-1
 A277  07
 A278  BD          loca278:                lda     PlayerShotPositions,x
 A279  D3 02
 A27B  D0                                  bne     loca2a2
 A27C  25
  [ =A2A2 ]
 A27D  EE                                  inc     PlayerShotCount
 A27E  35 01
 A280  AD                                  lda     player_along
 A281  02 02
 A283  9D                                  sta     PlayerShotPositions,x
 A284  D3 02
 A286  AD                                  lda     player_seg
 A287  00 02
 A289  9D                                  sta     PlayerShotSegments,x
 A28A  AD 02
 A28C  AD                                  lda     player_state
 A28D  01 02
 A28F  9D                                  sta     $02c0,x
 A290  C0 02
 A292  A9                                  lda     #$00
 A293  00
 A294  9D                                  sta     $02f2,x
 A295  F2 02
 A297  20                                  jsr     locccea
 A298  EA CC
 A29A  AD                                  lda     player_along
 A29B  02 02
 A29D  20                                  jsr     CheckPlayerShot
 A29E  63 A4
 A2A0  A2                                  ldx     #$00
 A2A1  00
 A2A2  CA          loca2a2:                dex
 A2A3  10                                  bpl     loca278
 A2A4  D3
  [ =A278 ]
 A2A5  60          loca2a5:                rts

 A2A6  AD          enm_shoot:              lda     player_state
 A2A7  01 02
 A2A9  30                                  bmi     CannotShoot             
                           ; High bit seems to mean death in progress, so 
                   no enemies shoot
 A2AA  58
  [ =A303 ]
 A2AB  A2                                  ldx     #$06
 A2AC  06
 A2AD  BD          CheckIfShouldShoot:     lda     enemy_along,x
 A2AE  DF 02
 A2B0  F0                                  beq     NoShot
 A2B1  4E
  [ =A300 ]
 A2B2  C9                                  cmp     #$30
 A2B3  30
 A2B4  90                                  bcc     NoShot
 A2B5  4A
  [ =A300 ]
 A2B6  BD                                  lda     active_enemy_info,x
 A2B7  8A 02
 A2B9  29                                  and     #$40                    
                           ; if $40 is not set (fuseball, some pulsars) 
                   then it doesn't shoot at all
 A2BA  40
 A2BB  F0                                  beq     NoShot
 A2BC  43
  [ =A300 ]
 A2BD  DE                                  dec     shot_delay,x
 A2BE  A6 02
 A2C0  10                                  bpl     NoShot
 A2C1  3E
  [ =A300 ]
 A2C2  FE                                  inc     shot_delay,x            
                           ; Reset to zero, since it rolled under
 A2C3  A6 02
 A2C5  BD                                  lda     enemy_type_info,x
 A2C6  83 02
 A2C8  29                                  and     #$80
 A2C9  80
 A2CA  D0                                  bne     NoShot                  
                           ; Don't shoot while moving away from player
 A2CB  34
  [ =A300 ]
 A2CC  AD                                  lda     pokey1_rand
 A2CD  CA 60
 A2CF  A4                                  ldy     EnemyShotCount          
                           ; Our chance of a new enemey shot is 
                   probabilistic, with the probability
 A2D0  A6
 A2D1  D9                                  cmp     enm_shot_prob,y         
                           ;   taken from this table depending on how many 
                   active shots there already are
 A2D2  04 A3
 A2D4  90                                  bcc     NoShot
 A2D5  2A
  [ =A300 ]

 A2D6  AC                                  ldy     MaxEnemyShots
 A2D7  1A 01
 A2D9  B9          LookForAvailShot:       lda     EnemyShotPositions,y    
                           ; Look for an unused enemy shot, indicated by a 
                   zero position
 A2DA  DB 02
 A2DC  D0                                  bne     shot_not_avail
 A2DD  1F
  [ =A2FD ]
 A2DE  BD                                  lda     enemy_along,x           
                           ; Set shot position to wherever the enemy is
 A2DF  DF 02
 A2E1  99                                  sta     EnemyShotPositions,y
 A2E2  DB 02
 A2E4  BD                                  lda     enemy_seg,x
 A2E5  B9 02
 A2E7  99                                  sta     EnemyShotSegments,y     
                               ; Set the shot segment to the same as the 
                   enemy who fired it
 A2E8  B5 02
 A2EA  BD                                  lda     more_enemy_info,x
 A2EB  CC 02
 A2ED  99                                  sta     $02c8,y
 A2EE  C8 02
 A2F0  AD                                  lda     shot_holdoff
 A2F1  19 01
 A2F3  9D                                  sta     shot_delay,x            
                           ; Start the "shot_delay" countdown by setting 
                   to initial 'shot_holdoff' value
 A2F4  A6 02
 A2F6  20                                  jsr     locccbd
 A2F7  BD CC
 A2F9  E6                                  inc     EnemyShotCount
 A2FA  A6
 A2FB  A0                                  ldy     #$00
 A2FC  00
 A2FD  88          shot_not_avail:         dey
 A2FE  10                                  bpl     LookForAvailShot
 A2FF  D9
  [ =A2D9 ]
 A300  CA          NoShot:                 dex
 A301  10                                  bpl     CheckIfShouldShoot
 A302  AA
  [ =A2AD ]
 A303  60          CannotShoot:            rts

                   ; Chance of a new shot, indexed by number of existing 
                   shots.  See $a2cc.

 A304  00          enm_shot_prob:          .byte   $00
 A305  E0                                  .byte   $e0
 A306  F0                                  .byte   $f0
 A307  FA                                  .byte   $fa
 A308  FF                                  .byte   $ff

 A309  86          loca309:                stx     $37
 A30A  37
 A30B  A9                                  lda     #$ff
 A30C  FF
 A30D  9D                                  sta     $02f2,x
 A30E  F2 02
 A310  98                                  tya
 A311  38                                  sec
 A312  E9                                  sbc     #$04
 A313  04
 A314  A8                                  tay
 A315  B9                                  lda     enemy_seg,y
 A316  B9 02
 A318  85                                  sta     $2d
 A319  2D
 A31A  AD                                  lda     pokey2_rand
 A31B  DA 60
 A31D  29                                  and     #$07
 A31E  07
 A31F  C9                                  cmp     #$03
 A320  03
 A321  90                                  bcc     loca325
 A322  02
  [ =A325 ]
 A323  A9                                  lda     #$00
 A324  00
 A325  48          loca325:                pha
 A326  18                                  clc
 A327  69                                  adc     #$02
 A328  02
 A329  20                                  jsr     loca3ca
 A32A  CA A3
 A32C  20                                  jsr     loca06f
 A32D  6F A0
 A32F  68                                  pla
 A330  18                                  clc
 A331  69                                  adc     #$05
 A332  05
 A333  AA                                  tax
 A334  20                                  jsr     inc_score
 A335  6C CA
 A337  A6                                  ldx     $37
 A338  37
 A339  60                                  rts
 A33A  A9          loca33a:                lda     #$05
 A33B  05
 A33C  20                                  jsr     loca352
 A33D  52 A3
 A33F  CE                                  dec     player_state
 A340  01 02
 A342  60                                  rts
 A343  A9          loca343:                lda     #$09
 A344  09
 A345  D0                                  bne     loca34d
 A346  06
  [ =A34D ]

 A347  A9          pieces_death:           lda     #$07
 A348  07
 A349  D0                                  bne     loca34d
 A34A  02
  [ =A34D ]

 A34B  A9          loca34b:                lda     #$ff
 A34C  FF
 A34D  8D          loca34d:                sta     $013b
 A34E  3B 01
 A350  A9                                  lda     #$01
 A351  01
 A352  85          loca352:                sta     $2c
 A353  2C
 A354  AD                                  lda     player_along
 A355  02 02
 A357  85                                  sta     $29
 A358  29
 A359  AD                                  lda     player_seg
 A35A  00 02
 A35C  85                                  sta     $2d
 A35D  2D
 A35E  20                                  jsr     locccb0
 A35F  B0 CC
 A361  20                                  jsr     loca3d6
 A362  D6 A3
 A364  A9                                  lda     #$81
 A365  81
 A366  8D                                  sta     player_state
 A367  01 02
 A369  A9                                  lda     #$01
 A36A  01
 A36B  8D                                  sta     $013c
 A36C  3C 01
 A36E  60                                  rts

 A36F  20          loca36f:                jsr     locccc1
 A370  C1 CC
 A372  B9                                  lda     EnemyShotPositions,y
 A373  DB 02
 A375  85                                  sta     $29
 A376  29
 A377  B9                                  lda     EnemyShotSegments,y
 A378  B5 02
 A37A  85                                  sta     $2d
 A37B  2D
 A37C  A9                                  lda     #$00
 A37D  00
 A37E  20                                  jsr     loca3d4
 A37F  D4 A3
 A381  A9                                  lda     #$00
 A382  00
 A383  99                                  sta     EnemyShotPositions,y
 A384  DB 02
 A386  C6                                  dec     EnemyShotCount
 A387  A6
 A388  A9                                  lda     #$ff
 A389  FF
 A38A  9D                                  sta     $02f2,x
 A38B  F2 02
 A38D  60                                  rts

 A38E  A9          loca38e:                lda     #$ff
 A38F  FF
 A390  9D                                  sta     $02f2,x
 A391  F2 02
 A393  98                                  tya
 A394  38                                  sec
 A395  E9                                  sbc     #$04
 A396  04
 A397  A8                                  tay

                   ;-------------------------------------------------------
                   ----------------------
                   ; Kill Enemy
                   ;-------------------------------------------------------
                   ----------------------
                   ; Enemy number provided in Y register.  Adds score.
                   ;-------------------------------------------------------
                   ----------------------

 A398  B9          ZapEnemy:               lda     enemy_type_info,y
 A399  83 02
 A39B  29                                  and     #$c0
 A39C  C0
 A39D  C9                                  cmp     #$c0
 A39E  C0
 A39F  F0                                  beq     loca3a7
 A3A0  06
  [ =A3A7 ]
 A3A1  B9                                  lda     enemy_seg,y
 A3A2  B9 02
 A3A4  B8                                  clv
 A3A5  50                                  bvc     loca3af
 A3A6  08
  [ =A3AF ]
 A3A7  B9          loca3a7:                lda     enemy_seg,y
 A3A8  B9 02
 A3AA  38                                  sec
 A3AB  E9                                  sbc     #$01
 A3AC  01
 A3AD  29                                  and     #$0f
 A3AE  0F
 A3AF  85          loca3af:                sta     $2d
 A3B0  2D
 A3B1  A9                                  lda     #$00
 A3B2  00
 A3B3  20                                  jsr     loca3ca
 A3B4  CA A3
 A3B6  20                                  jsr     loca06f
 A3B7  6F A0
 A3B9  B9                                  lda     enemy_type_info,y
 A3BA  83 02
 A3BC  29                                  and     #ENEMY_TYPE_MASK
 A3BD  07
 A3BE  A8                                  tay
 A3BF  BE                                  ldx     loca3c5,y
 A3C0  C5 A3
 A3C2  4C                                  jmp     inc_score
 A3C3  6C CA

 A3C5  01          loca3c5:                .byte   $01                 ; 
                   Flipper   150
 A3C6  02                                  .byte   $02                 ; 
                   Pulsar    200
 A3C7  03                                  .byte   $03                 ; 
                   Tanker    100
 A3C8  04                                  .byte   $04                 ; 
                   Spiker     50
 A3C9  01                                  .byte   $01                 ; 
                   Fuseball  150 - Note that fuseballs are 150 for 
                   Superzap instead of 250/500/750 when shot

 A3CA  48          loca3ca:                pha
 A3CB  20                                  jsr     locccc1
 A3CC  C1 CC
 A3CE  B9                                  lda     enemy_along,y
 A3CF  DF 02
 A3D1  85                                  sta     $29
 A3D2  29
 A3D3  68                                  pla
 A3D4  85          loca3d4:                sta     $2c
 A3D5  2C
 A3D6  86          loca3d6:                stx     $35
 A3D7  35
 A3D8  84                                  sty     $36
 A3D9  36
 A3DA  A9                                  lda     #$00
 A3DB  00
 A3DC  85                                  sta     $2a
 A3DD  2A
 A3DE  85                                  sta     $2b
 A3DF  2B
 A3E0  A2                                  ldx     #$07
 A3E1  07
 A3E2  BD          loca3e2:                lda     $030a,x
 A3E3  0A 03
 A3E5  F0                                  beq     loca3fa
 A3E6  13
  [ =A3FA ]
 A3E7  BD                                  lda     $0312,x
 A3E8  12 03
 A3EA  C5                                  cmp     $2a
 A3EB  2A
 A3EC  90                                  bcc     loca3f2
 A3ED  04
  [ =A3F2 ]
 A3EE  85                                  sta     $2a
 A3EF  2A
 A3F0  86                                  stx     $2b
 A3F1  2B
 A3F2  CA          loca3f2:                dex
 A3F3  10                                  bpl     loca3e2
 A3F4  ED
  [ =A3E2 ]
 A3F5  CE                                  dec     $0116
 A3F6  16 01
 A3F8  A6                                  ldx     $2b
 A3F9  2B
 A3FA  A9          loca3fa:                lda     #$00
 A3FB  00
 A3FC  9D                                  sta     $0312,x
 A3FD  12 03
 A3FF  A5                                  lda     $2c
 A400  2C
 A401  9D                                  sta     $0302,x
 A402  02 03
 A404  A5                                  lda     $29
 A405  29
 A406  9D                                  sta     $030a,x
 A407  0A 03
 A409  A5                                  lda     $2d
 A40A  2D
 A40B  9D                                  sta     $02fa,x
 A40C  FA 02
 A40E  EE                                  inc     $0116
 A40F  16 01
 A411  A6                                  ldx     $35
 A412  35
 A413  A4                                  ldy     $36
 A414  36
 A415  60                                  rts

 A416  AD          loca416:                lda     $0116
 A417  16 01
 A419  F0                                  beq     loca447
 A41A  2C
  [ =A447 ]
 A41B  A9                                  lda     #$00
 A41C  00
 A41D  8D                                  sta     $0116
 A41E  16 01
 A420  A2                                  ldx     #$07
 A421  07
 A422  BD          loca422:                lda     $030a,x
 A423  0A 03
 A425  F0                                  beq     loca444
 A426  1D
  [ =A444 ]
 A427  BD                                  lda     $0312,x
 A428  12 03
 A42A  BC                                  ldy     $0302,x
 A42B  02 03
 A42D  18                                  clc
 A42E  79                                  adc     loca44e,y
 A42F  4E A4
 A431  9D                                  sta     $0312,x
 A432  12 03
 A434  D9                                  cmp     loca448,y
 A435  48 A4
 A437  90                                  bcc     loca441
 A438  08
  [ =A441 ]
 A439  A9                                  lda     #$00
 A43A  00
 A43B  9D                                  sta     $030a,x
 A43C  0A 03
 A43E  B8                                  clv
 A43F  50                                  bvc     loca444
 A440  03
  [ =A444 ]
 A441  EE          loca441:                inc     $0116
 A442  16 01
 A444  CA          loca444:                dex
 A445  10                                  bpl     loca422
 A446  DB
  [ =A422 ]
 A447  60          loca447:                rts

 A448  10          loca448:                .byte   $10
 A449  15                                  .byte   $15
 A44A  20                                  .byte   $20
 A44B  20                                  .byte   $20
 A44C  20                                  .byte   $20
 A44D  10                                  .byte   $10
 A44E  03          loca44e:                .byte   $03
 A44F  01                                  .byte   $01
 A450  03                                  .byte   $03
 A451  03                                  .byte   $03
 A452  03                                  .byte   $03
 A453  03                                  .byte   $03

                   ; Check player shots to see if they hit anything.

 A454  A2          CheckAllPlayerShots:    ldx     #MAX_PLAYER_SHOTS-1
 A455  07
 A456  BD          loca456:                lda     PlayerShotPositions,x
 A457  D3 02
 A459  F0                                  beq     loca45e
 A45A  03
  [ =A45E ]
 A45B  20                                  jsr     CheckPlayerShot
 A45C  63 A4
 A45E  CA          loca45e:                dex
 A45F  10                                  bpl     loca456
 A460  F5
  [ =A456 ]
 A461  60                                  rts

 A462  AB                                  .byte   $ab

                   ; Check to see if a player shot hit an enemy or enemy 
                   shot.  X is player
                   ; shot number, A is player shot position.

 A463  85          CheckPlayerShot:        sta     $2e
 A464  2E
 A465  A0                                  ldy     #MAX_TOTAL_SHOTS-2      
                   ; check enemies as well as their shots
 A466  0A
 A467  B9          loca467:                lda     EnemyShotPositions,y
 A468  DB 02
 A46A  F0                                  beq     loca4eb
 A46B  7F
  [ =A4EB ]
 A46C  C5                                  cmp     $2e
 A46D  2E
 A46E  90                                  bcc     loca475
 A46F  05
  [ =A475 ]
 A470  E5                                  sbc     $2e
 A471  2E
 A472  B8                                  clv
 A473  50                                  bvc     loca47b
 A474  06
  [ =A47B ]
 A475  A5          loca475:                lda     $2e
 A476  2E
 A477  38                                  sec
 A478  F9                                  sbc     EnemyShotPositions,y
 A479  DB 02
 A47B  C0          loca47b:                cpy     #MAX_ENEMY_SHOTS        
                   ; enemy, or enemy shot?
 A47C  04
 A47D  B0                                  bcs     loca491
 A47E  12
  [ =A491 ]
 A47F  C5                                  cmp     $a7
 A480  A7
 A481  B0                                  bcs     loca48e
 A482  0B
  [ =A48E ]
 A483  B9                                  lda     EnemyShotSegments,y
 A484  B5 02
 A486  5D                                  eor     PlayerShotSegments,x
 A487  AD 02
 A489  D0                                  bne     loca48e
 A48A  03
  [ =A48E ]
 A48B  20                                  jsr     loca36f
 A48C  6F A3
 A48E  B8          loca48e:                clv
 A48F  50                                  bvc     loca4eb
 A490  5A
  [ =A4EB ]
 A491  48          loca491:                pha
 A492  84                                  sty     $38
 A493  38
 A494  B9                                  lda     $027f,y                 
                   ; enemy_type_info - 4
 A495  7F 02
 A497  29                                  and     #ENEMY_TYPE_MASK
 A498  07
 A499  A8                                  tay
 A49A  68                                  pla
 A49B  D9                                  cmp     hit_tol_by_enm_type,y
 A49C  51 01
 A49E  B0                                  bcs     loca4e9
 A49F  49
  [ =A4E9 ]
 A4A0  C0                                  cpy     #ENEMY_TYPE_FUSEBALL
 A4A1  04
 A4A2  D0                                  bne     loca4c1
 A4A3  1D
  [ =A4C1 ]
 A4A4  A4                                  ldy     $38
 A4A5  38
 A4A6  B9                                  lda     EnemyShotPositions,y    
                   ; enemy_along - 4
 A4A7  DB 02
 A4A9  CD                                  cmp     player_along
 A4AA  02 02
 A4AC  F0                                  beq     loca4be
 A4AD  10
  [ =A4BE ]
 A4AE  BD                                  lda     PlayerShotSegments,x
 A4AF  AD 02
 A4B1  D9                                  cmp     EnemyShotSegments,y     
                   ; enemy_seg - 4
 A4B2  B5 02
 A4B4  D0                                  bne     loca4be
 A4B5  08
  [ =A4BE ]
 A4B6  B9                                  lda     $02c8,y                 
                   ; more_enemy_info - 4
 A4B7  C8 02
 A4B9  10                                  bpl     loca4be
 A4BA  03
  [ =A4BE ]
 A4BB  20                                  jsr     loca309
 A4BC  09 A3
 A4BE  B8          loca4be:                clv
 A4BF  50                                  bvc     loca4e9
 A4C0  28
  [ =A4E9 ]
 A4C1  A4          loca4c1:                ldy     $38
 A4C2  38
 A4C3  B9                                  lda     $02c8,y                 
                   ; more_enemy_info - 4
 A4C4  C8 02
 A4C6  10                                  bpl     loca4d2
 A4C7  0A
  [ =A4D2 ]
 A4C8  B9                                  lda     EnemyShotSegments,y     
                   ; enemy_seg - 4
 A4C9  B5 02
 A4CB  DD                                  cmp     $02c0,x                 
                   ; what segment player was on when this shot was fired - 
                   but why not player_shot_seg, I don't know
 A4CC  C0 02
 A4CE  F0                                  beq     loca4e2
 A4CF  12
  [ =A4E2 ]
 A4D0  D0                                  bne     loca4da
 A4D1  08
  [ =A4DA ]
 A4D2  B9          loca4d2:                lda     EnemyShotPositions,y    
                   ; enemy_along - 4
 A4D3  DB 02
 A4D5  CD                                  cmp     player_along
 A4D6  02 02
 A4D8  F0                                  beq     loca4e9
 A4D9  0F
  [ =A4E9 ]
 A4DA  B9          loca4da:                lda     EnemyShotSegments,y     
                   ; enemy_seg - 4
 A4DB  B5 02
 A4DD  DD                                  cmp     PlayerShotSegments,x
 A4DE  AD 02
 A4E0  D0                                  bne     loca4e9
 A4E1  07
  [ =A4E9 ]
 A4E2  86          loca4e2:                stx     $37
 A4E3  37
 A4E4  20                                  jsr     loca38e
 A4E5  8E A3
 A4E7  A6                                  ldx     $37
 A4E8  37
 A4E9  A4          loca4e9:                ldy     $38
 A4EA  38
 A4EB  88          loca4eb:                dey
 A4EC  30                                  bmi     loca4f1
 A4ED  03
  [ =A4F1 ]
 A4EE  4C                                  jmp     loca467
 A4EF  67 A4
 A4F1  BD          loca4f1:                lda     $02f2,x
 A4F2  F2 02
 A4F4  C9                                  cmp     #$ff
 A4F5  FF
 A4F6  D0                                  bne     loca503
 A4F7  0B
  [ =A503 ]
 A4F8  A9                                  lda     #$00
 A4F9  00
 A4FA  9D                                  sta     PlayerShotPositions,x
 A4FB  D3 02
 A4FD  CE                                  dec     PlayerShotCount
 A4FE  35 01
 A500  9D                                  sta     $02f2,x
 A501  F2 02
 A503  60          loca503:                rts
 A504  AD          loca504:                lda     player_state
 A505  01 02
 A507  10                                  bpl     loca581
 A508  78
  [ =A581 ]
 A509  AD                                  lda     PlayerShotCount
 A50A  35 01
 A50C  05                                  ora     EnemyShotCount
 A50D  A6
 A50E  0D                                  ora     $0116
 A50F  16 01
 A511  D0                                  bne     loca57e
 A512  6B
  [ =A57E ]
 A513  AE                                  ldx     MaxActiveEnemies
 A514  1C 01
 A516  BD          loca516:                lda     enemy_along,x
 A517  DF 02
 A519  F0                                  beq     loca529
 A51A  0E
  [ =A529 ]
 A51B  18                                  clc
 A51C  69                                  adc     #$0f
 A51D  0F
 A51E  B0                                  bcs     loca522
 A51F  02
  [ =A522 ]
 A520  C9                                  cmp     #$f0
 A521  F0
 A522  90          loca522:                bcc     loca526
 A523  02
  [ =A526 ]
 A524  A9                                  lda     #$00
 A525  00
 A526  9D          loca526:                sta     enemy_along,x
 A527  DF 02
 A529  CA          loca529:                dex
 A52A  10                                  bpl     loca516
 A52B  EA
  [ =A516 ]
 A52C  A6                                  ldx     curplayer
 A52D  3D
 A52E  B5                                  lda     p1_lives,x
 A52F  48
 A530  C9                                  cmp     #$01
 A531  01
 A532  D0                                  bne     loca554
 A533  20
  [ =A554 ]
 A534  A9                                  lda     #$00
 A535  00
 A536  8D                                  sta     $010f
 A537  0F 01
 A539  A9                                  lda     #$01
 A53A  01
 A53B  8D                                  sta     $0114
 A53C  14 01
 A53E  A5                                  lda     $5f
 A53F  5F
 A540  38                                  sec
 A541  E9                                  sbc     #$20
 A542  20
 A543  85                                  sta     $5f
 A544  5F
 A545  A5                                  lda     $5b
 A546  5B
 A547  E9                                  sbc     #$00
 A548  00
 A549  85                                  sta     $5b
 A54A  5B
 A54B  C9                                  cmp     #$fa
 A54C  FA
 A54D  18                                  clc
 A54E  D0                                  bne     loca551
 A54F  01
  [ =A551 ]
 A550  38                                  sec
 A551  B8          loca551:                clv
 A552  50                                  bvc     loca561
 A553  0D
  [ =A561 ]
 A554  AD          loca554:                lda     player_along
 A555  02 02
 A557  18                                  clc
 A558  69                                  adc     #$0f
 A559  0F
 A55A  8D                                  sta     player_along
 A55B  02 02
 A55D  B0                                  bcs     loca561
 A55E  02
  [ =A561 ]
 A55F  C9                                  cmp     #$f0
 A560  F0
 A561  90          loca561:                bcc     loca57e
 A562  1B
  [ =A57E ]
 A563  A9                                  lda     #GS_Death
 A564  06
 A565  85                                  sta     gamestate
 A566  00
 A567  20                                  jsr     ClearAllShots
 A568  8F 92
 A56A  AD                                  lda     NumEnemiesInTube
 A56B  08 01
 A56D  18                                  clc
 A56E  6D                                  adc     NumEnemiesOnTop
 A56F  09 01
 A571  18                                  clc
 A572  6D                                  adc     enemies_pending
 A573  AB 03
 A575  C9                                  cmp     #$3f
 A576  3F
 A577  90                                  bcc     loca57b
 A578  02
  [ =A57B ]
 A579  A9                                  lda     #$3f
 A57A  3F
 A57B  8D          loca57b:                sta     enemies_pending
 A57C  AB 03
 A57E  B8          loca57e:                clv
 A57F  50                                  bvc     loca5ca
 A580  49
  [ =A5CA ]

                   ; Apparent anti-piracy provision.  If either checksum 
                   of the video RAM that
                   ; holds the copyright message is wrong, and the P1 
                   score is 17xxxx,
                   ; increment one.byte of page zero, based on the low two 
                   digits of the score.
                   ; See also $b1df and $b27d.

 A581  AD          loca581:                lda     copyr_vid_cksum2
 A582  55 04
 A584  0D                                  ora     copyr_vid_cksum1
 A585  1B 01
 A587  F0                                  beq     loca593
 A588  0A
  [ =A593 ]
 A589  A9                                  lda     #$17                ; 
                   Score must be at least 17XXXX
 A58A  17
 A58B  C5                                  cmp     p1_score_h
 A58C  42
 A58D  B0                                  bcs     loca593
 A58E  04
  [ =A593 ]
 A58F  A6                                  ldx     p1_score_l          ; 
                   Take last 2 digits of score..,
 A590  40
 A591  F6                                  inc     gamestate,x         ; 
                   ...Intentionally trash zero page!
 A592  00

                   ; End apparent anti-piracy code

 A593  AD          loca593:                lda     $0106
 A594  06 01
 A596  D0                                  bne     loca5ca
 A597  32
  [ =A5CA ]
 A598  AD                                  lda     enemies_pending
 A599  AB 03
 A59B  0D                                  ora     $0116
 A59C  16 01
 A59E  D0                                  bne     loca5b5
 A59F  15
  [ =A5B5 ]
 A5A0  AC                                  ldy     MaxActiveEnemies
 A5A1  1C 01
 A5A3  B9          loca5a3:                lda     enemy_along,y
 A5A4  DF 02
 A5A6  F0                                  beq     loca5ac
 A5A7  04
  [ =A5AC ]
 A5A8  C9                                  cmp     #$11
 A5A9  11
 A5AA  B0                                  bcs     loca5b5
 A5AB  09
  [ =A5B5 ]
 A5AC  88          loca5ac:                dey
 A5AD  10                                  bpl     loca5a3
 A5AE  F4
  [ =A5A3 ]
 A5AF  20                                  jsr     loca5cb
 A5B0  CB A5
 A5B2  20                                  jsr     ClearAllShots
 A5B3  8F 92
 A5B5  A5          loca5b5:                lda     zap_fire_debounce
 A5B6  4D
 A5B7  29                                  and     #$60                    
                   ; start1, start2
 A5B8  60
 A5B9  F0                                  beq     loca5ca
 A5BA  0F
  [ =A5CA ]
 A5BB  24                                  bit     game_mode
 A5BC  05
 A5BD  10                                  bpl     loca5ca
 A5BE  0B
  [ =A5CA ]
 A5BF  A5                                  lda     coinage_shadow
 A5C0  09
 A5C1  29                                  and     #$43
 A5C2  43
 A5C3  C9                                  cmp     #$40
 A5C4  40
 A5C5  D0                                  bne     loca5ca
 A5C6  03
  [ =A5CA ]
 A5C7  20                                  jsr     loca5cb
 A5C8  CB A5
 A5CA  60          loca5ca:                rts

                   ; Level "over"; start zooming down tube.

 A5CB  A9          loca5cb:                lda     #GS_ZoomingDown
 A5CC  20
 A5CD  85                                  sta     gamestate
 A5CE  00
 A5CF  AD                                  lda     $0106
 A5D0  06 01
 A5D2  09                                  ora     #$80
 A5D3  80
 A5D4  8D                                  sta     $0106
 A5D5  06 01
 A5D7  A9                                  lda     #$00
 A5D8  00
 A5D9  8D                                  sta     zoomspd_lsb
 A5DA  04 01
 A5DC  8D                                  sta     along_lsb
 A5DD  07 01
 A5DF  85                                  sta     $5c
 A5E0  5C
 A5E1  8D                                  sta     $0123
 A5E2  23 01
 A5E4  A9                                  lda     #$02
 A5E5  02
 A5E6  8D                                  sta     zoomspd_msb
 A5E7  05 01

                   ; Check to see if there are any spikes of nonzero 
                   height.

 A5E9  A2                                  ldx     #$0f
 A5EA  0F
 A5EB  BD          loca5eb:                lda     lane_spike_height,x
 A5EC  AC 03
 A5EE  F0                                  beq     loca5f3
 A5EF  03
  [ =A5F3 ]
 A5F0  EE                                  inc     $0123
 A5F1  23 01
 A5F3  CA          loca5f3:                dex
 A5F4  10                                  bpl     loca5eb
 A5F5  F5
  [ =A5EB ]
 A5F6  AD                                  lda     $0123
 A5F7  23 01
 A5F9  F0                                  beq     NoSpikeWarning
 A5FA  17
  [ =A612 ]

                   ; If there are any spikes, check level.

 A5FB  A5                                  lda     curlevel
 A5FC  9F
 A5FD  C9                                  cmp     #$07                    
                   ; On level 8 or below
 A5FE  07
 A5FF  B0                                  bcs     NoSpikeWarning
 A600  11
  [ =A612 ]

                   ; If level is low enough and there are spikes, display 
                   "AVOID SPIKES".

 A601  A9                                  lda     #$1e                    
                   ; time delay
 A602  1E
 A603  85                                  sta     countdown_timer
 A604  04
 A605  A9                                  lda     #GS_Delay               
                   ; Start the short delay...
 A606  0A
 A607  85                                  sta     gamestate
 A608  00
 A609  A9                                  lda     #GS_ZoomingDown         
                   ; ...after which we'll switch to zooming down the tube
 A60A  20
 A60B  85                                  sta     state_after_delay
 A60C  02
 A60D  A9                                  lda     #$80
 A60E  80
 A60F  8D                                  sta     $0123
 A610  23 01
 A612  A9          NoSpikeWarning:         lda     #$ff
 A613  FF
 A614  8D                                  sta     zap_running
 A615  25 01
 A617  60                                  rts

                   State_HighScoreExplosion: 
 A618  AD                                  lda     $010e
 A619  0E 01
 A61B  8D                                  sta     $010d
 A61C  0D 01
 A61E  A2                                  ldx     #$0f
 A61F  0F
 A620  86                                  stx     $37
 A621  37
 A622  A6          loca622:                ldx     $37
 A623  37
 A624  BD                                  lda     enemy_type_info,x
 A625  83 02
 A627  D0                                  bne     loca634
 A628  0B
  [ =A634 ]
 A629  AD                                  lda     $010e
 A62A  0E 01
 A62C  F0                                  beq     loca631
 A62D  03
  [ =A631 ]
 A62E  20                                  jsr     loca65b
 A62F  5B A6
 A631  B8          loca631:                clv
 A632  50                                  bvc     loca63f
 A633  0B
  [ =A63F ]
 A634  20          loca634:                jsr     loca6a9
 A635  A9 A6
 A637  20                                  jsr     loca721
 A638  21 A7
 A63A  A9                                  lda     #$ff
 A63B  FF
 A63C  8D                                  sta     $010d
 A63D  0D 01
 A63F  C6          loca63f:                dec     $37
 A640  37
 A641  10                                  bpl     loca622
 A642  DF
  [ =A622 ]
 A643  A5                                  lda     timectr
 A644  03
 A645  29                                  and     #$01
 A646  01
 A647  D0                                  bne     loca651
 A648  08
  [ =A651 ]
 A649  AD                                  lda     $010e
 A64A  0E 01
 A64C  F0                                  beq     loca651
 A64D  03
  [ =A651 ]
 A64E  CE                                  dec     $010e
 A64F  0E 01
 A651  AD          loca651:                lda     $010d
 A652  0D 01
 A654  D0                                  bne     loca65a
 A655  04
  [ =A65A ]
 A656  A9                                  lda     #GS_EnterInitials
 A657  12
 A658  85                                  sta     gamestate
 A659  00
 A65A  60          loca65a:                rts

 A65B  A5          loca65b:                lda     timectr
 A65C  03
 A65D  29                                  and     #$00
 A65E  00
 A65F  D0                                  bne     loca69a
 A660  39
  [ =A69A ]
 A661  A9                                  lda     #$80
 A662  80
 A663  9D                                  sta     $0263,x
 A664  63 02
 A666  9D                                  sta     enemy_type_info,x
 A667  83 02
 A669  9D                                  sta     $02a3,x
 A66A  A3 02
 A66C  AD                                  lda     pokey2_rand
 A66D  DA 60
 A66F  9D                                  sta     $02c3,x
 A670  C3 02
 A672  20                                  jsr     plusminus_7
 A673  9B A6
 A675  9D                                  sta     $0323,x
 A676  23 03
 A678  AD                                  lda     pokey1_rand
 A679  CA 60
 A67B  9D                                  sta     $02e3,x
 A67C  E3 02
 A67E  20                                  jsr     plusminus_7
 A67F  9B A6

                   ; Why this rigamarole instead of just "lda #$00" or 
                   "and #$fe" before
                   ; calling plusminus_7, I have no idea.

 A681  30                                  bmi     loca688
 A682  05
  [ =A688 ]
 A683  49                                  eor     #$ff
 A684  FF
 A685  18                                  clc
 A686  69                                  adc     #$01
 A687  01
 A688  9D          loca688:                sta     $0343,x
 A689  43 03
 A68B  AD                                  lda     pokey1_rand
 A68C  CA 60
 A68E  9D                                  sta     $0303,x
 A68F  03 03
 A691  20                                  jsr     plusminus_7
 A692  9B A6
 A694  9D                                  sta     $0363,x
 A695  63 03
 A697  20                                  jsr     locccc1
 A698  C1 CC
 A69A  60          loca69a:                rts

                   ; Return with a random number in A, from 00-07 (if 
                   input A low bit is clear)
                   ; or $f9-$00 (if input A low bit is set).

 A69B  4A          plusminus_7:            lsr     a
 A69C  AD                                  lda     pokey2_rand
 A69D  DA 60
 A69F  29                                  and     #$07
 A6A0  07
 A6A1  90                                  bcc     loca6a8
 A6A2  05
  [ =A6A8 ]
 A6A3  49                                  eor     #$ff
 A6A4  FF
 A6A5  18                                  clc
 A6A6  69                                  adc     #$01
 A6A7  01
 A6A8  60          loca6a8:                rts
 A6A9  BD          loca6a9:                lda     $02e3,x
 A6AA  E3 02
 A6AC  18                                  clc
 A6AD  7D                                  adc     $0223,x
 A6AE  23 02
 A6B0  9D                                  sta     $0223,x
 A6B1  23 02
 A6B3  BD                                  lda     $0343,x
 A6B4  43 03
 A6B6  30                                  bmi     loca6c4
 A6B7  0C
  [ =A6C4 ]
 A6B8  7D                                  adc     enemy_type_info,x
 A6B9  83 02
 A6BB  C9                                  cmp     #$f0
 A6BC  F0
 A6BD  90                                  bcc     loca6c1
 A6BE  02
  [ =A6C1 ]
 A6BF  A9                                  lda     #$00
 A6C0  00
 A6C1  B8          loca6c1:                clv
 A6C2  50                                  bvc     loca6cd
 A6C3  09
  [ =A6CD ]
 A6C4  7D          loca6c4:                adc     enemy_type_info,x
 A6C5  83 02
 A6C7  C9                                  cmp     #$10
 A6C8  10
 A6C9  B0                                  bcs     loca6cd
 A6CA  02
  [ =A6CD ]
 A6CB  A9                                  lda     #$00
 A6CC  00
 A6CD  A8          loca6cd:                tay
 A6CE  BD                                  lda     $02c3,x
 A6CF  C3 02
 A6D1  18                                  clc
 A6D2  7D                                  adc     pending_seg,x
 A6D3  03 02
 A6D5  9D                                  sta     pending_seg,x
 A6D6  03 02
 A6D8  BD                                  lda     $0323,x
 A6D9  23 03
 A6DB  30                                  bmi     loca6e9
 A6DC  0C
  [ =A6E9 ]
 A6DD  7D                                  adc     $0263,x
 A6DE  63 02
 A6E0  C9                                  cmp     #$f0
 A6E1  F0
 A6E2  90                                  bcc     loca6e6
 A6E3  02
  [ =A6E6 ]
 A6E4  A0                                  ldy     #$00
 A6E5  00
 A6E6  B8          loca6e6:                clv
 A6E7  50                                  bvc     loca6f2
 A6E8  09
  [ =A6F2 ]
 A6E9  7D          loca6e9:                adc     $0263,x
 A6EA  63 02
 A6EC  C9                                  cmp     #$10
 A6ED  10
 A6EE  B0                                  bcs     loca6f2
 A6EF  02
  [ =A6F2 ]
 A6F0  A0                                  ldy     #$00
 A6F1  00
 A6F2  9D          loca6f2:                sta     $0263,x
 A6F3  63 02
 A6F5  BD                                  lda     $0303,x
 A6F6  03 03
 A6F8  18                                  clc
 A6F9  7D                                  adc     pending_vid,x
 A6FA  43 02
 A6FC  9D                                  sta     pending_vid,x
 A6FD  43 02
 A6FF  BD                                  lda     $0363,x
 A700  63 03
 A702  30                                  bmi     loca710
 A703  0C
  [ =A710 ]
 A704  7D                                  adc     $02a3,x
 A705  A3 02
 A707  C9                                  cmp     #$f0
 A708  F0
 A709  90                                  bcc     loca70d
 A70A  02
  [ =A70D ]
 A70B  A0                                  ldy     #$00
 A70C  00
 A70D  B8          loca70d:                clv
 A70E  50                                  bvc     loca719
 A70F  09
  [ =A719 ]
 A710  7D          loca710:                adc     $02a3,x
 A711  A3 02
 A713  C9                                  cmp     #$10
 A714  10
 A715  B0                                  bcs     loca719
 A716  02
  [ =A719 ]
 A717  A0                                  ldy     #$00
 A718  00
 A719  9D          loca719:                sta     $02a3,x
 A71A  A3 02
 A71C  98                                  tya
 A71D  9D                                  sta     enemy_type_info,x
 A71E  83 02
 A720  60                                  rts

 A721  A9          loca721:                lda     #$fd
 A722  FD
 A723  85                                  sta     $29
 A724  29
 A725  BD                                  lda     $02c3,x
 A726  C3 02
 A728  BC                                  ldy     $0323,x
 A729  23 03
 A72B  20                                  jsr     loca75d
 A72C  5D A7
 A72E  9D                                  sta     $02c3,x
 A72F  C3 02
 A731  98                                  tya
 A732  9D                                  sta     $0323,x
 A733  23 03
 A735  BD                                  lda     $02e3,x
 A736  E3 02
 A738  BC                                  ldy     $0343,x
 A739  43 03
 A73B  20                                  jsr     loca75d
 A73C  5D A7
 A73E  9D                                  sta     $02e3,x
 A73F  E3 02
 A741  98                                  tya
 A742  9D                                  sta     $0343,x
 A743  43 03
 A745  BD                                  lda     $0303,x
 A746  03 03
 A748  BC                                  ldy     $0363,x
 A749  63 03
 A74B  20                                  jsr     loca75d
 A74C  5D A7
 A74E  9D                                  sta     $0303,x
 A74F  03 03
 A751  98                                  tya
 A752  9D                                  sta     $0363,x
 A753  63 03
 A755  A5                                  lda     $29
 A756  29
 A757  D0                                  bne     loca75c
 A758  03
  [ =A75C ]
 A759  9D                                  sta     enemy_type_info,x
 A75A  83 02
 A75C  60          loca75c:                rts

 A75D  84          loca75d:                sty     $2b
 A75E  2B
 A75F  24                                  bit     $2b
 A760  2B
 A761  30                                  bmi     loca772
 A762  0F
  [ =A772 ]
 A763  38                                  sec
 A764  ED                                  sbc     twenty_hex
 A765  88 A7
 A767  85                                  sta     $2a
 A768  2A
 A769  A5                                  lda     $2b
 A76A  2B
 A76B  E9                                  sbc     #$00
 A76C  00
 A76D  90                                  bcc     loca77e
 A76E  0F
  [ =A77E ]
 A76F  B8                                  clv
 A770  50                                  bvc     loca784
 A771  12
  [ =A784 ]
 A772  18          loca772:                clc
 A773  6D                                  adc     twenty_hex
 A774  88 A7
 A776  85                                  sta     $2a
 A777  2A
 A778  A5                                  lda     $2b
 A779  2B
 A77A  69                                  adc     #$00
 A77B  00
 A77C  90                                  bcc     loca784
 A77D  06
  [ =A784 ]
 A77E  E6          loca77e:                inc     $29
 A77F  29
 A780  A9                                  lda     #$00
 A781  00
 A782  85                                  sta     $2a
 A783  2A
 A784  A8          loca784:                tay
 A785  A5                                  lda     $2a
 A786  2A
 A787  60                                  rts

 A788  20          twenty_hex:             .byte   $20             ; Why 
                   not immediate mode? Why this byte?  Who knows.

 A789  A2          loca789:                ldx     #$0f
 A78A  0F
 A78B  A9          loca78b:                lda     #$00
 A78C  00
 A78D  9D                                  sta     enemy_type_info,x
 A78E  83 02
 A790  CA                                  dex
 A791  10                                  bpl     loca78b
 A792  F8
  [ =A78B ]
 A793  A9                                  lda     #$20
 A794  20
 A795  8D                                  sta     $010e
 A796  0E 01
 A798  8D                                  sta     $010d
 A799  0D 01
 A79B  A9                                  lda     #$04
 A79C  04
 A79D  85                                  sta     $01
 A79E  01
 A79F  A9                                  lda     #$00
 A7A0  00
 A7A1  85                                  sta     $68
 A7A2  68
 A7A3  85                                  sta     $69
 A7A4  69
 A7A5  60                                  rts

                   ; Subtract Y from A, returning (in A) the signed 
                   difference.  If the level
                   ; is closed, do wraparound processing; if open, don't.

 A7A6  84          SubYFromAWithWrap:      sty     $2a
 A7A7  2A
 A7A8  38                                  sec
 A7A9  E5                                  sbc     $2a
 A7AA  2A
 A7AB  85                                  sta     $2a
 A7AC  2A
 A7AD  2C                                  bit     open_level
 A7AE  11 01
 A7B0  30                                  bmi     open_level_nowrap
 A7B1  09
  [ =A7BB ]
 A7B2  29                                  and     #$0f
 A7B3  0F
 A7B4  2C                                  bit     loca7bc
 A7B5  BC A7
 A7B7  F0                                  beq     open_level_nowrap
 A7B8  02
  [ =A7BB ]
 A7B9  09                                  ora     #$f8
 A7BA  F8
 A7BB  60          open_level_nowrap:      rts

 A7BC  08          loca7bc:                .byte   $08

 A7BD  A2          loca7bd:                ldx     #$07
 A7BE  07
 A7BF  A9                                  lda     #$00
 A7C0  00
 A7C1  9D          loca7c1:                sta     $03fe,x
 A7C2  FE 03
 A7C4  CA                                  dex
 A7C5  10                                  bpl     loca7c1
 A7C6  FA
  [ =A7C1 ]
 A7C7  A9                                  lda     #$f0
 A7C8  F0
 A7C9  8D                                  sta     $0405
 A7CA  05 04
 A7CC  A9                                  lda     #$ff
 A7CD  FF
 A7CE  8D                                  sta     $0115
 A7CF  15 01
 A7D1  60                                  rts
 A7D2  AD          loca7d2:                lda     $0115
 A7D3  15 01
 A7D5  F0                                  beq     loca830
 A7D6  59
  [ =A830 ]
 A7D7  A9                                  lda     #$00
 A7D8  00
 A7D9  85                                  sta     $29
 A7DA  29

                   ; There appears to be a loop beginning here
                   ; for ($37=7;$37>=0;$37--) running from here through 
                   a827.  I'm not sure
                   ; just what goes on inside it, yet, though.

 A7DB  A2                                  ldx     #$07
 A7DC  07
 A7DD  86                                  stx     $37
 A7DE  37
 A7DF  A6          loca7df:                ldx     $37
 A7E0  37
 A7E1  BD                                  lda     $03fe,x
 A7E2  FE 03
 A7E4  F0                                  beq     loca7fe
 A7E5  18
  [ =A7FE ]
 A7E6  38                                  sec
 A7E7  E9                                  sbc     #$07
 A7E8  07
 A7E9  90                                  bcc     loca7ed
 A7EA  02
  [ =A7ED ]
 A7EB  C9                                  cmp     #$10
 A7EC  10
 A7ED  B0          loca7ed:                bcs     loca7fb
 A7EE  0C
  [ =A7FB ]
 A7EF  AC                                  ldy     $0115
 A7F0  15 01
 A7F2  10                                  bpl     loca7f9
 A7F3  05
  [ =A7F9 ]
 A7F4  A9                                  lda     #$f0
 A7F5  F0
 A7F6  B8                                  clv
 A7F7  50                                  bvc     loca7fb
 A7F8  02
  [ =A7FB ]
 A7F9  A9          loca7f9:                lda     #$00
 A7FA  00
 A7FB  B8          loca7fb:                clv
 A7FC  50                                  bvc     loca81e
 A7FD  20
  [ =A81E ]
 A7FE  AC          loca7fe:                ldy     $0115
 A7FF  15 01
 A801  10                                  bpl     loca81e
 A802  1B
  [ =A81E ]
 A803  8A                                  txa
 A804  18                                  clc
 A805  69                                  adc     #$01
 A806  01
 A807  C9                                  cmp     #$08
 A808  08
 A809  90                                  bcc     loca80d
 A80A  02
  [ =A80D ]
 A80B  A9                                  lda     #$00
 A80C  00
 A80D  A8          loca80d:                tay
 A80E  B9                                  lda     $03fe,y
 A80F  FE 03
 A811  F0                                  beq     loca81e
 A812  0B
  [ =A81E ]
 A813  C9                                  cmp     #$d5
 A814  D5
 A815  B0                                  bcs     loca81c
 A816  05
  [ =A81C ]
 A817  A9                                  lda     #$f0
 A818  F0
 A819  B8                                  clv
 A81A  50                                  bvc     loca81e
 A81B  02
  [ =A81E ]
 A81C  A9          loca81c:                lda     #$00
 A81D  00
 A81E  9D          loca81e:                sta     $03fe,x
 A81F  FE 03
 A821  05                                  ora     $29
 A822  29
 A823  85                                  sta     $29
 A824  29
 A825  C6                                  dec     $37
 A826  37
 A827  10                                  bpl     loca7df
 A828  B6
  [ =A7DF ]
 A829  A5                                  lda     $29
 A82A  29
 A82B  D0                                  bne     loca830
 A82C  03
  [ =A830 ]
 A82D  8D                                  sta     $0115
 A82E  15 01
 A830  60          loca830:                rts

 A831  A9          InitSuperzapper:        lda     #$00
 A832  00
 A833  8D                                  sta     zap_uses
 A834  AA 03
 A836  8D                                  sta     zap_running
 A837  25 01
 A839  60                                  rts

 A83A  A5          check_zap:              lda     game_mode
 A83B  05
 A83C  10                                  bpl     loca87c
 A83D  3E
  [ =A87C ]
 A83E  AD                                  lda     zap_running
 A83F  25 01
 A841  D0                                  bne     ZapIsRunning
 A842  23
  [ =A866 ]
 A843  AD                                  lda     player_state
 A844  01 02
 A846  30                                  bmi     loca863             ; 
                   High bit means grabbed by pulsar or flipper
 A847  1B
  [ =A863 ]
 A848  A5                                  lda     zap_fire_new
 A849  4E
 A84A  29                                  and     #$08                ; 
                   zap
 A84B  08
 A84C  F0                                  beq     loca863
 A84D  15
  [ =A863 ]
 A84E  AD                                  lda     zap_uses
 A84F  AA 03
 A851  C9                                  cmp     #MAX_ZAP_USES       ; 2
 A852  02
 A853  B0                                  bcs     loca85d
 A854  08
  [ =A85D ]
 A855  EE                                  inc     zap_uses
 A856  AA 03
 A858  A9                                  lda     #$01
 A859  01
 A85A  8D                                  sta     zap_running
 A85B  25 01
 A85D  A5          loca85d:                lda     zap_fire_new
 A85E  4E
 A85F  29                                  and     #$77                ; 
                   clear zap
 A860  77
 A861  85                                  sta     zap_fire_new
 A862  4E
 A863  B8          loca863:                clv
 A864  50                                  bvc     loca87c
 A865  16
  [ =A87C ]

 A866  EE          ZapIsRunning:           inc     zap_running
 A867  25 01
 A869  AE                                  ldx     zap_uses
 A86A  AA 03
 A86C  AD                                  lda     zap_running
 A86D  25 01
 A86F  DD                                  cmp     zap_length,x
 A870  83 A8
 A872  90                                  bcc     run_longer
 A873  05
  [ =A879 ]

 A874  A9                                  lda     #$00                ; 
                   Zap use done
 A875  00
 A876  8D                                  sta     zap_running
 A877  25 01
 A879  20          run_longer:             jsr     DoSuperZap
 A87A  88 A8
 A87C  A5          loca87c:                lda     zap_fire_new
 A87D  4E
 A87E  29                                  and     #$7f
 A87F  7F
 A880  85                                  sta     zap_fire_new
 A881  4E
 A882  60                                  rts

 A883  00          zap_length:             .byte   $00                 ; 
                   Indexed by zapper use count

 A884  13                                  .byte   $13                 ; 
                   First zap runs a longer time
 A885  05                                  .byte   $05                 ; 
                   Second just long enough to kill one thing
 A886  00                                  .byte   $00
 A887  00                                  .byte   $00

 A888  AD          DoSuperZap:             lda     zap_running
 A889  25 01
 A88B  C9                                  cmp     #$03
 A88C  03
 A88D  90                                  bcc     donezapwork
 A88E  14
  [ =A8A3 ]
 A88F  29                                  and     #$01                ; 
                   Maybe zap only kills every second frame?
 A890  01
 A891  D0                                  bne     donezapwork
 A892  10
  [ =A8A3 ]

 A893  AC                                  ldy     MaxActiveEnemies    
 A894  1C 01
 A896  B9          look_for_enemy_to_zap:  lda     enemy_along,y       
 A897  DF 02
 A899  D0                                  bne     found_enemy             
 A89A  09
  [ =A8A4 ]
 A89B  88                                  dey
 A89C  10                                  bpl     look_for_enemy_to_zap
 A89D  F8
  [ =A896 ]

 A89E  A9                                  lda     #$00
 A89F  00
 A8A0  8D                                  sta     zap_running
 A8A1  25 01
 A8A3  60          donezapwork:            rts

 A8A4  B9          found_enemy:            lda     active_enemy_info,y     
                       ; Clear tanker payload bits so it doesn't split
 A8A5  8A 02
 A8A7  29                                  and     #%11111100
 A8A8  FC
 A8A9  99                                  sta     active_enemy_info,y
 A8AA  8A 02
 A8AC  4C                                  jmp     ZapEnemy
 A8AD  98 A3

 A8AF  E1                                  .byte   $e1

                   ; These are distances into the message table 

 A8B0  24          coinage_msgs:           .byte   ibMsgFreePlay           
                       ; FREE PLAY
 A8B1  26                                  .byte   ibMsg1Coin2Crd          
                       ; 1 COIN 2 PLAYS
 A8B2  28                                  .byte   ibMsg1Coin1Crd          
                       ; 1 COIN 1 PLAY
 A8B3  2A                                  .byte   ibMsg2Coin1Crd          
                       ; 2 COINS 1 PLAY

 A8B4  A9          loca8b4:                lda     #$01
 A8B5  01
 A8B6  85                                  sta     curscale
 A8B7  72
 A8B8  20                                  jsr     vapp_scale_A_0
 A8B9  6A DF
 A8BB  A0                                  ldy     #$05
 A8BC  05
 A8BD  20                                  jsr     vapp_setcolor
 A8BE  D1 B0
 A8C0  A5                                  lda     game_mode
 A8C1  05
 A8C2  30                                  bmi     loca8ea
 A8C3  26
  [ =A8EA ]
 A8C4  A2                                  ldx     #ibMsgGameOver          
                               ; "GAME OVER"
 A8C5  00
 A8C6  A5                                  lda     timectr
 A8C7  03
 A8C8  29                                  and     #$20
 A8C9  20
 A8CA  D0                                  bne     loca8d8
 A8CB  0C
  [ =A8D8 ]
 A8CC  A2                                  ldx     #ibMsgInsCoin           
                               ; "INSERT COINS"
 A8CD  22
 A8CE  A5                                  lda     credits
 A8CF  06
 A8D0  F0                                  beq     loca8d8
 A8D1  06
  [ =A8D8 ]
 A8D2  24                                  bit     $a2
 A8D3  A2
 A8D4  30                                  bmi     loca8d8
 A8D5  02
  [ =A8D8 ]
 A8D6  A2                                  ldx     #ibMsgStart             
                               ; "PRESS START"
 A8D7  06
 A8D8  20          loca8d8:                jsr     vapp_msg
 A8D9  14 AB
 A8DB  20                                  jsr     vapp_vcentre_1
 A8DC  0D AB
 A8DE  AD                                  lda     char_jsrtbl
 A8DF  E4 31
 A8E1  8D                                  sta     $2fa6
 A8E2  A6 2F
 A8E4  8D                                  sta     $2fa8
 A8E5  A8 2F
 A8E7  20          loca8e7:                jsr     show_coin_stuff
 A8E8  A8 AA
 A8EA  A9          loca8ea:                lda     #$01
 A8EB  01
 A8EC  A0                                  ldy     #$00
 A8ED  00
 A8EE  20                                  jsr     show_player_stuff
 A8EF  7F A9
 A8F1  24                                  bit     game_mode
 A8F2  05
 A8F3  30                                  bmi     loca8fe
 A8F4  09
  [ =A8FE ]
 A8F5  A5                                  lda     p2_score_l
 A8F6  43
 A8F7  05                                  ora     p2_score_m
 A8F8  44
 A8F9  05                                  ora     p2_score_h
 A8FA  45
 A8FB  B8                                  clv
 A8FC  50                                  bvc     loca900
 A8FD  02
  [ =A900 ]
 A8FE  A5          loca8fe:                lda     twoplayer
 A8FF  3E
 A900  F0          loca900:                beq     loca908
 A901  06
  [ =A908 ]
 A902  A9                                  lda     #$01
 A903  01
 A904  A8                                  tay
 A905  20                                  jsr     show_player_stuff
 A906  7F A9
 A908  A5          loca908:                lda     gamestate
 A909  00
 A90A  C9                                  cmp     #GS_Playing
 A90B  04
 A90C  F0                                  beq     loca943
 A90D  35
  [ =A943 ]
 A90E  A9                                  lda     #<endofhiscores
 A90F  1D
 A910  85                                  sta     $3b
 A911  3B
 A912  A9                                  lda     #>endofhiscores
 A913  07
 A914  85                                  sta     $3c
 A915  3C
 A916  AE                                  ldx     HiScoreOffset
 A917  E4 CD
 A919  20                                  jsr     loca9d7
 A91A  D7 A9

                   ; Checksum the code which displays the copyright 
                   message; see $aace
                   ; See also $c8f5.

 A91C  A0                                  ldy     #$0a
 A91D  0A
 A91E  A9                                  lda     #$a7
 A91F  A7
 A920  59          loca920:                eor     locaace,y
 A921  CE AA
 A923  88                                  dey
 A924  10                                  bpl     loca920
 A925  FA
  [ =A920 ]
 A926  8D                                  sta     copyr_disp_cksum1
 A927  6C 01
 A929  AE                                  ldx     hsinitidx
 A92A  E5 CD
 A92C  A9                                  lda     #$02
 A92D  02
 A92E  85                                  sta     $38
 A92F  38
 A930  A4          loca930:                ldy     $38
 A931  38
 A932  B9                                  lda     hs_initials_1,y
 A933  1B 06
 A935  0A                                  asl     a
 A936  A8                                  tay
 A937  B9                                  lda     ltr_jsrtbl,y
 A938  FA 31
 A93A  9D                                  sta     $2f60,x
 A93B  60 2F
 A93D  E8                                  inx
 A93E  E8                                  inx
 A93F  C6                                  dec     $38
 A940  38
 A941  10                                  bpl     loca930
 A942  ED
  [ =A930 ]
 A943  A9          loca943:                lda     #>video_data
 A944  2F
 A945  A2                                  ldx     #<video_data
 A946  60
 A947  20                                  jsr     vapp_vjsr_AX
 A948  39 DF
 A94A  AD                                  lda     $0123
 A94B  23 01
 A94D  10                                  bpl     loca954
 A94E  05
  [ =A954 ]
 A94F  A2                                  ldx     #ibMsgAvoidSpk          
                        ; "AVOID SPIKES"
 A950  36
 A951  20                                  jsr     vapp_msg
 A952  14 AB
 A954  A5          loca954:                lda     gamestate
 A955  00
 A956  C9                                  cmp     #GS_ZoomOntoNew
 A957  18
 A958  D0                                  bne     loca97c
 A959  22
  [ =A97C ]
 A95A  A5                                  lda     game_mode
 A95B  05
 A95C  10                                  bpl     loca97c
 A95D  1E
  [ =A97C ]
 A95E  A6                                  ldx     curplayer
 A95F  3D
 A960  BD                                  lda     p1_startchoice,x
 A961  02 01
 A963  F0                                  beq     loca972
 A964  0D
  [ =A972 ]
 A965  A2                                  ldx     #ibMsgBonusSpc          
                        ; "BONUS "
 A966  30
 A967  20                                  jsr     vapp_msg
 A968  14 AB
 A96A  A4                                  ldy     curplayer
 A96B  3D
 A96C  BE                                  ldx     p1_startchoice,y
 A96D  02 01
 A96F  20                                  jsr     vapp_startbonus
 A970  C6 B0
 A972  A2          loca972:                ldx     #ibMsgRecharge          
                        ; "SUPERZAPPER RECHARGE"
 A973  3A
 A974  20                                  jsr     vapp_msg
 A975  14 AB
 A977  A2                                  ldx     #ibMsgLevelNS           
                        ; "LEVEL"
 A978  38
 A979  20                                  jsr     vapp_msg
 A97A  14 AB
 A97C  60          loca97c:                rts

                   ; Indexed by player number; see $a9ce

 A97D  42          p1scorepos:             .byte   p1_score_h
 A97E  45          p2scorepos              .byte   p2_score_h

                   ; On entry, A=1 and Y=player number

 A97F  A6          show_player_stuff:      ldx     gamestate
 A980  00
 A981  E0                                  cpx     #GS_Playing
 A982  04
 A983  84                                  sty     $2b
 A984  2B
 A985  C4                                  cpy     curplayer
 A986  3D
 A987  D0                                  bne     loca98f
 A988  06
  [ =A98F ]
 A989  24                                  bit     game_mode
 A98A  05
 A98B  10                                  bpl     loca98f
 A98C  02
  [ =A98F ]
 A98D  A9                                  lda     #$00
 A98E  00
 A98F  09          loca98f:                ora     #$70
 A990  70
 A991  BE                                  ldx     ScaleOffset,y
 A992  DE CD
 A994  9D                                  sta     video_data,x
 A995  60 2F
 A997  BE                                  ldx     ShipsLeftOffset,y
 A998  E0 CD
 A99A  B9                                  lda     p1_lives,y
 A99B  48 00
 A99D  85                                  sta     $38
 A99E  38
 A99F  F0                                  beq     loca9a7
 A9A0  06
  [ =A9A7 ]
 A9A1  C4                                  cpy     curplayer
 A9A2  3D
 A9A3  D0                                  bne     loca9a7
 A9A4  02
  [ =A9A7 ]
 A9A5  C6                                  dec     $38
 A9A6  38
 A9A7  A0          loca9a7:                ldy     #$01
 A9A8  01
 A9A9  AD          loca9a9:                lda     $3284
 A9AA  84 32
 A9AC  C4                                  cpy     $38
 A9AD  38
 A9AE  90                                  bcc     loca9b5
 A9AF  05
  [ =A9B5 ]
 A9B0  F0                                  beq     loca9b5
 A9B1  03
  [ =A9B5 ]
 A9B2  AD                                  lda     $3286
 A9B3  86 32
 A9B5  9D          loca9b5:                sta     video_data,x
 A9B6  60 2F
 A9B8  E8                                  inx
 A9B9  E8                                  inx
 A9BA  C8                                  iny
 A9BB  C0                                  cpy     #$07
 A9BC  07
 A9BD  90                                  bcc     loca9a9
 A9BE  EA
  [ =A9A9 ]
 A9BF  A4                                  ldy     $2b
 A9C0  2B
 A9C1  A5                                  lda     gamestate
 A9C2  00
 A9C3  C9                                  cmp     #$04
 A9C4  04
 A9C5  D0                                  bne     loca9cb
 A9C6  04
  [ =A9CB ]
 A9C7  C4                                  cpy     curplayer
 A9C8  3D
 A9C9  D0                                  bne     loca9fb
 A9CA  30
  [ =A9FB ]
 A9CB  BE          loca9cb:                ldx     ScoresOffset,y
 A9CC  E2 CD
 A9CE  B9                                  lda     p1scorepos,y
 A9CF  7D A9
 A9D1  85                                  sta     $3b
 A9D2  3B
 A9D3  A9                                  lda     #$00
 A9D4  00
 A9D5  85                                  sta     $3c
 A9D6  3C
 A9D7  A0          loca9d7:                ldy     #$02
 A9D8  02
 A9D9  84                                  sty     $2a
 A9DA  2A
 A9DB  38                                  sec
 A9DC  08          loca9dc:                php
 A9DD  A0                                  ldy     #$00
 A9DE  00
 A9DF  B1                                  lda     ($3b),y
 A9E0  3B
 A9E1  4A                                  lsr     a
 A9E2  4A                                  lsr     a
 A9E3  4A                                  lsr     a
 A9E4  4A                                  lsr     a
 A9E5  28                                  plp
 A9E6  20                                  jsr     loca9fc
 A9E7  FC A9
 A9E9  A5                                  lda     $2a
 A9EA  2A
 A9EB  D0                                  bne     loca9ee
 A9EC  01
  [ =A9EE ]
 A9ED  18                                  clc
 A9EE  A0          loca9ee:                ldy     #$00
 A9EF  00
 A9F0  B1                                  lda     ($3b),y
 A9F1  3B
 A9F2  20                                  jsr     loca9fc
 A9F3  FC A9
 A9F5  C6                                  dec     $3b
 A9F6  3B
 A9F7  C6                                  dec     $2a
 A9F8  2A
 A9F9  10                                  bpl     loca9dc
 A9FA  E1
  [ =A9DC ]
 A9FB  60          loca9fb:                rts
 A9FC  29          loca9fc:                and     #$0f
 A9FD  0F
 A9FE  A8                                  tay
 A9FF  F0                                  beq     locaa02
 AA00  01
  [ =AA02 ]
 AA01  18                                  clc
 AA02  B0          locaa02:                bcs     locaa05
 AA03  01
  [ =AA05 ]
 AA04  C8                                  iny
 AA05  08          locaa05:                php
 AA06  98                                  tya
 AA07  0A                                  asl     a
 AA08  A8                                  tay
 AA09  B9                                  lda     char_jsrtbl,y
 AA0A  E4 31
 AA0C  9D                                  sta     video_data,x
 AA0D  60 2F
 AA0F  E8                                  inx
 AA10  E8                                  inx
 AA11  28                                  plp
 AA12  60                                  rts

                   ; Sets up the header for the text at the top of the 
                   screen.  Plugs in the
                   ; level number, but none of the other variable pieces.

 AA13  A6          locaa13:                ldx     twoplayer
 AA14  3E
 AA15  24                                  bit     game_mode
 AA16  05
 AA17  30                                  bmi     locaa23
 AA18  0A
  [ =AA23 ]
 AA19  A5                                  lda     p2_score_l
 AA1A  43
 AA1B  05                                  ora     p2_score_m
 AA1C  44
 AA1D  05                                  ora     p2_score_h
 AA1E  45
 AA1F  F0                                  beq     locaa23
 AA20  02
  [ =AA23 ]
 AA21  A2                                  ldx     #$01
 AA22  01
 AA23  A9          locaa23:                lda     #<video_data
 AA24  60
 AA25  85                                  sta     vidptr_l
 AA26  74
 AA27  A9                                  lda     #>video_data
 AA28  2F
 AA29  85                                  sta     vidptr_h
 AA2A  75
 AA2B  BD                                  lda     hdr_template_len,x
 AA2C  66 CE
 AA2E  A8                                  tay
 AA2F  38                                  sec
 AA30  65                                  adc     vidptr_l
 AA31  74
 AA32  48                                  pha
 AA33  B9          locaa33:                lda     hdr_template,y
 AA34  E6 CD
 AA36  91                                  sta     (vidptr_l),y
 AA37  74
 AA38  88                                  dey
 AA39  D0                                  bne     locaa33
 AA3A  F8
  [ =AA33 ]
 AA3B  B9                                  lda     hdr_template,y
 AA3C  E6 CD
 AA3E  91                                  sta     (vidptr_l),y
 AA3F  74
 AA40  A5                                  lda     game_mode
 AA41  05
 AA42  10                                  bpl     locaa54
 AA43  10
  [ =AA54 ]

                   ; 2fa6 holds the vjsr for the tens digit of the level 
                   number

 AA44  A9                                  lda     #>video_data
 AA45  2F
 AA46  85                                  sta     vidptr_h
 AA47  75

                                           ; BUGBUG the length can never 
                   be more than enough to wrap past FF of that memory page 
                   (from 2fa6 past 3000)

 AA48  A9                                  lda     
                   #(levelnumoffset-hdr_template+<video_data)  
 AA49  A6
 AA4A  85                                  sta     vidptr_l
 AA4B  74
 AA4C  A5                                  lda     curlevel
 AA4D  9F
 AA4E  18                                  clc
 AA4F  69                                  adc     #$01
 AA50  01
 AA51  20                                  jsr     vapp_2dig_bin
 AA52  77 AF
 AA54  68          locaa54:                pla
 AA55  85                                  sta     vidptr_l
 AA56  74
 AA57  4C                                  jmp     vapp_rts
 AA58  09 DF
 AA5A  A2          locaa5a:                ldx     #ibMsgPlay              
                        ; "PLAY"
 AA5B  08
 AA5C  20                                  jsr     vapp_msg
 AA5D  14 AB
 AA5F  4C                                  jmp     locaa69
 AA60  69 AA
 AA62  A9          locaa62:                lda     #$30
 AA63  30
 AA64  A2                                  ldx     #ibMsgGameOver          
                        ; "GAME OVER"
 AA65  00
 AA66  20                                  jsr     vapp_msg_at_y
 AA67  17 AB
 AA69  20          locaa69:                jsr     show_plyno
 AA6A  92 AA
 AA6C  4C                                  jmp     loca8e7
 AA6D  E7 A8
 AA6F  20          locaa6f:                jsr     loca8b4
 AA70  B4 A8
 AA72  A9                                  lda     #$00
 AA73  00
 AA74  A2                                  ldx     #ibMsgStart             
                       ; "PRESS START"
 AA75  06
 AA76  4C                                  jmp     vapp_msg_at_y
 AA77  17 AB
 AA79  A9          locaa79:                lda     #$00
 AA7A  00
 AA7B  A2                                  ldx     #ibMsg2CrdMin           
                       ; "2 CREDIT MINIMUM"
 AA7C  32
 AA7D  20                                  jsr     vapp_msg_at_y
 AA7E  17 AB
 AA80  A5                                  lda     timectr
 AA81  03
 AA82  29                                  and     #$1f
 AA83  1F
 AA84  C9                                  cmp     #$10
 AA85  10
 AA86  B0                                  bcs     locaa8f
 AA87  07
  [ =AA8F ]
 AA88  A9                                  lda     #$e0
 AA89  E0
 AA8A  A2                                  ldx     #ibMsgInsCoin           
                       ; "INSERT COINS"
 AA8B  22
 AA8C  20                                  jsr     vapp_msg_at_y
 AA8D  17 AB
 AA8F  4C          locaa8f:                jmp     loca8b4
 AA90  B4 A8

                   ; show PLAYER and current player number

 AA92  A2          show_plyno:             ldx     #ibMsgPlayer            
                       ; "PLAYER "
 AA93  02
 AA94  20                                  jsr     vapp_msg
 AA95  14 AB
 AA97  A9          locaa97:                lda     #$00
 AA98  00
 AA99  20                                  jsr     vapp_setscale
 AA9A  DD B0
 AA9C  A6                                  ldx     curplayer
 AA9D  3D
 AA9E  E8          locaa9e:                inx
 AA9F  86                                  stx     $61
 AAA0  61
 AAA1  A9                                  lda     #$61
 AAA2  61
 AAA3  A0                                  ldy     #$01
 AAA4  01
 AAA5  4C                                  jmp     vapp_multdig_y_a
 AAA6  B1 DF

 AAA8  A5          show_coin_stuff:        lda     coinage_shadow
 AAA9  09
 AAAA  29                                  and     #$03 ; coinage
 AAAB  03
 AAAC  AA                                  tax
 AAAD  BD                                  lda     coinage_msgs,x
 AAAE  B0 A8
 AAB0  AA                                  tax
 AAB1  20                                  jsr     vapp_msg
 AAB2  14 AB
 AAB4  CE                                  dec     $016e
 AAB5  6E 01
 AAB7  A5                                  lda     optsw2_shadow
 AAB8  0A
 AAB9  29                                  and     #$01                    
                       ; 2-credit minimum
 AABA  01
 AABB  F0                                  beq     locaacb
 AABC  0E
  [ =AACB ]
 AABD  A5                                  lda     timectr
 AABE  03
 AABF  29                                  and     #$20 ; flash
 AAC0  20
 AAC1  D0                                  bne     locaacb
 AAC2  08
  [ =AACB ]
 AAC3  A2                                  ldx     #ibMsg2CrdMin           
                       ; "2 CREDIT MINIMUM"
 AAC4  32
 AAC5  20                                  jsr     vapp_msg
 AAC6  14 AB
 AAC8  B8                                  clv
 AAC9  50                                  bvc     locaace
 AACA  03
  [ =AACE ]
 AACB  20          locaacb:                jsr     locaeca
 AACC  CA AE
 AACE  A2          locaace:                ldx     #ibMsgAtari             
                       ; "(c) MCMLXXX ATARI"
 AACF  2C
 AAD0  20                                  jsr     vapp_msg
 AAD1  14 AB
 AAD3  A2                                  ldx     #ibMsgCredits           
                       ; "CREDITS "
 AAD4  2E
 AAD5  20                                  jsr     vapp_msg
 AAD6  14 AB
 AAD8  A5                                  lda     credits
 AAD9  06
 AADA  C9                                  cmp     #MAX_CREDITS            
                       ; normally 40
 AADB  28
 AADC  90                                  bcc     locaae2
 AADD  04
  [ =AAE2 ]
 AADE  A9                                  lda     #MAX_CREDITS            
                       ; normally 40
 AADF  28
 AAE0  85                                  sta     credits
 AAE1  06
 AAE2  20          locaae2:                jsr     vapp_2dig_bin
 AAE3  77 AF
 AAE5  A5                                  lda     uncredited
 AAE6  17
 AAE7  F0                                  beq     locaaf2
 AAE8  09
  [ =AAF2 ]
 AAE9  AD                                  lda     locaaf3+1
 AAEA  F4 AA
 AAEC  AE                                  ldx     locaaf3
 AAED  F3 AA
 AAEF  20                                  jsr     vapp_vjsr_AX
 AAF0  39 DF
 AAF2  60          locaaf2:                rts

 AAF3  5C 32       locaaf3:                .word   $0325c ; 1/2

                   ; Converts number in accumulator (binary) to BCD, 
                   storing two-digit BCD
                   ; in $29 (and leaving it in $2c) on return.  Discards 
                   the hundreds digit.

 AAF5  F8          bin_to_bcd:             sed
 AAF6  85                                  sta     $29
 AAF7  29
 AAF8  A9                                  lda     #$00
 AAF9  00
 AAFA  85                                  sta     $2c
 AAFB  2C
 AAFC  A0                                  ldy     #$07
 AAFD  07
 AAFE  06          locaafe:                asl     $29
 AAFF  29
 AB00  A5                                  lda     $2c
 AB01  2C
 AB02  65                                  adc     $2c
 AB03  2C
 AB04  85                                  sta     $2c
 AB05  2C
 AB06  88                                  dey
 AB07  10                                  bpl     locaafe
 AB08  F5
  [ =AAFE ]
 AB09  D8                                  cld
 AB0A  85                                  sta     $29
 AB0B  29
 AB0C  60                                  rts

                   ; $20 $80 = vcentre (why $20? who knows.)

 AB0D  A9          vapp_vcentre_1:         lda     #$20
 AB0E  20
 AB0F  A2                                  ldx     #$80
 AB10  80
 AB11  4C                                  jmp     vapp_A_X_Y_0
 AB12  57 DF
 AB14  BD          vapp_msg:               lda     aMsgsColorAndYPos+1,x
 AB15  22 D1
 AB17  86          vapp_msg_at_y:          stx     $35
 AB18  35
 AB19  85                                  sta     $2b
 AB1A  2B
 AB1B  A4                                  ldy     $35
 AB1C  35
 AB1D  B1                                  lda     (strtbl),y
 AB1E  AC
 AB1F  85                                  sta     $3b
 AB20  3B
 AB21  C8                                  iny
 AB22  B1                                  lda     (strtbl),y
 AB23  AC
 AB24  85                                  sta     $3c
 AB25  3C

                   ; If we're displaying the copyright message, save the 
                   location in video RAM
                   ; where it's displayed, for the checksumming code at 
                   $b1df and $b27d.

 AB26  E0                                  cpx     #ibMsgAtari         ; 
                   "(c) MCMLXXX ATARI"
 AB27  2C
 AB28  D0                                  bne     locab32
 AB29  08
  [ =AB32 ]
 AB2A  A5                                  lda     vidptr_l
 AB2B  74
 AB2C  85                                  sta     copyr_vid_loc
 AB2D  B6
 AB2E  A5                                  lda     vidptr_h
 AB2F  75
 AB30  85                                  sta     copyr_vid_loc+1
 AB31  B7
 AB32  A0          locab32:                ldy     #$00
 AB33  00
 AB34  B1                                  lda     ($3b),y
 AB35  3B
 AB36  85                                  sta     $2a
 AB37  2A
 AB38  20                                  jsr     vapp_vcentre_1
 AB39  0D AB
 AB3B  A9          locab3b:                lda     #$00
 AB3C  00
 AB3D  85                                  sta     draw_z
 AB3E  73
 AB3F  A9                                  lda     #$01
 AB40  01
 AB41  85                                  sta     curscale
 AB42  72
 AB43  20                                  jsr     vapp_scale_A_0
 AB44  6A DF
 AB46  A5                                  lda     $2a
 AB47  2A
 AB48  A6                                  ldx     $2b
 AB49  2B
 AB4A  20                                  jsr     vapp_ldraw_A_X
 AB4B  75 DF
 AB4D  A4                                  ldy     $35
 AB4E  35
 AB4F  B1                                  lda     (strtbl),y
 AB50  AC
 AB51  85                                  sta     $3b
 AB52  3B
 AB53  C8                                  iny
 AB54  B1                                  lda     (strtbl),y
 AB55  AC
 AB56  85                                  sta     $3c
 AB57  3C
 AB58  A6                                  ldx     $35
 AB59  35
 AB5A  BD                                  lda     aMsgsColorAndYPos,x
 AB5B  21 D1
 AB5D  48                                  pha
 AB5E  4A                                  lsr     a
 AB5F  4A                                  lsr     a
 AB60  4A                                  lsr     a
 AB61  4A                                  lsr     a
 AB62  A8                                  tay
 AB63  20                                  jsr     vapp_setcolor
 AB64  D1 B0
 AB66  68                                  pla
 AB67  29                                  and     #$0f
 AB68  0F
 AB69  20                                  jsr     vapp_setscale
 AB6A  DD B0
 AB6C  A0                                  ldy     #$01
 AB6D  01
 AB6E  A9                                  lda     #$00
 AB6F  00
 AB70  85                                  sta     $2a
 AB71  2A
 AB72  B1          locab72:                lda     ($3b),y
 AB73  3B
 AB74  85                                  sta     $2b
 AB75  2B
 AB76  29                                  and     #$7f
 AB77  7F
 AB78  C8                                  iny
 AB79  84                                  sty     $2c
 AB7A  2C
 AB7B  AA                                  tax
 AB7C  BD                                  lda     char_jsrtbl,x
 AB7D  E4 31
 AB7F  A4                                  ldy     $2a
 AB80  2A
 AB81  91                                  sta     (vidptr_l),y
 AB82  74
 AB83  C8                                  iny
 AB84  BD                                  lda     char_jsrtbl+1,x
 AB85  E5 31
 AB87  91                                  sta     (vidptr_l),y
 AB88  74
 AB89  C8                                  iny
 AB8A  84                                  sty     $2a
 AB8B  2A
 AB8C  A4                                  ldy     $2c
 AB8D  2C
 AB8E  24                                  bit     $2b
 AB8F  2B
 AB90  10                                  bpl     locab72
 AB91  E0
  [ =AB72 ]
 AB92  A4                                  ldy     $2a
 AB93  2A
 AB94  88                                  dey
 AB95  4C                                  jmp     inc_vi.word
 AB96  5F DF

                   ; Append a message.  X holds message number, A holds 
                   delta-x from current
                   ; position (delta-y is zero).

 AB98  86          locab98:                stx     $35
 AB99  35
 AB9A  85                                  sta     $2a
 AB9B  2A
 AB9C  A9                                  lda     #$00
 AB9D  00
 AB9E  85                                  sta     $2b
 AB9F  2B
 ABA0  F0                                  beq     locab3b
 ABA1  99
  [ =AB3B ]

                   ; Initialize the high-score list if either of the 
                   please-init bits is set.

 ABA2  20          maybe_init_hs:          jsr     check_settings
 ABA3  20 AC
 ABA5  AD                                  lda     hs_initflag
 ABA6  C9 01
 ABA8  29                                  and     #$03
 ABA9  03
 ABAA  F0                                  beq     locac07
 ABAB  5B
  [ =AC07 ]

                   ; Initialize the low five scores on the high-score list,
                    and if the
                   ; please-init bits are set, the upper three as well.

 ABAC  20          init_hs:                jsr     check_settings
 ABAD  20 AC
 ABAF  A9                                  lda     #$08
 ABB0  08
 ABB1  8D                                  sta     $0100
 ABB2  00 01
 ABB4  AD                                  lda     hs_score_1
 ABB5  1B 07
 ABB7  0D                                  ora     hs_score_1+1
 ABB8  1C 07
 ABBA  0D                                  ora     hs_score_1+2
 ABBB  1D 07
 ABBD  D0                                  bne     locabc2
 ABBE  03
  [ =ABC2 ]
 ABBF  20                                  jsr     hs_needs_init
 ABC0  36 AC
 ABC2  A2          locabc2:                ldx     #$17
 ABC3  17
 ABC4  AD                                  lda     hs_initflag
 ABC5  C9 01
 ABC7  29                                  and     #$01
 ABC8  01
 ABC9  D0                                  bne     locabcd
 ABCA  02
  [ =ABCD ]
 ABCB  A2                                  ldx     #$0e
 ABCC  0E
 ABCD  BD          locabcd:                lda     DefaultScoreInitials,x
 ABCE  08 AC
 ABD0  9D                                  sta     hs_initials_8,x
 ABD1  06 06
 ABD3  CA                                  dex
 ABD4  10                                  bpl     locabcd
 ABD5  F7
  [ =ABCD ]
 ABD6  A2                                  ldx     #$17
 ABD7  17
 ABD8  AD                                  lda     hs_initflag
 ABD9  C9 01
 ABDB  29                                  and     #$02
 ABDC  02
 ABDD  D0                                  bne     locabe1
 ABDE  02
  [ =ABE1 ]
 ABDF  A2                                  ldx     #$0e
 ABE0  0E
 ABE1  A9          locabe1:                lda     #$01
 ABE2  01
 ABE3  9D                                  sta     hs_score_8,x
 ABE4  06 07
 ABE6  CA                                  dex
 ABE7  10                                  bpl     locabe1
 ABE8  F8
  [ =ABE1 ]
 ABE9  AD                                  lda     hs_initflag
 ABEA  C9 01
 ABEC  29                                  and     #$03
 ABED  03
 ABEE  F0                                  beq     locabff
 ABEF  0F
  [ =ABFF ]
 ABF0  A5                                  lda     optsw2_shadow
 ABF1  0A
 ABF2  29                                  and     #$f8
 ABF3  F8
 ABF4  8D                                  sta     life_settings
 ABF5  1E 07
 ABF7  AD                                  lda     diff_bits
 ABF8  6A 01
 ABFA  29                                  and     #$03 ; difficulty
 ABFB  03
 ABFC  8D                                  sta     diff_settings
 ABFD  1F 07
 ABFF  AD          locabff:                lda     hs_initflag
 AC00  C9 01
 AC02  29                                  and     #$fc
 AC03  FC
 AC04  8D                                  sta     hs_initflag
 AC05  C9 01
 AC07  60          locac07:                rts

                   ; Default high score initials.

                   ;.bytes are reversed compared to the order they're 
                   displayed in.

 AC08  07          DefaultScoreInitials:   .byte    7,  4,  1      ; BEH
 AC09  04
 AC0A  01
 AC0B  0F                                  .byte   15,  9, 12      ; MJP
 AC0C  09
 AC0D  0C
 AC0E  0B                                  .byte   11,  3, 18      ; SDL   
                   ??? (Sam Lee)
 AC0F  03
 AC10  12
 AC11  13                                  .byte   19,  5,  3      ; DFT   
                   (David Frank Theurer, programmer)
 AC12  05
 AC13  03
 AC14  07                                  .byte    7, 15, 12      ; MPH   
                   ??? (Morgan Hoff)
 AC15  0F
 AC16  0C
 AC17  11                                  .byte   17, 17, 17      ; RRR
 AC18  11
 AC19  11
 AC1A  12                                  .byte   18,  4,  3      ; DES   
                   ??? (Doug Snyder - hardware, or Daver Sherman or 
                   Stubben or Storie)
 AC1B  04
 AC1C  03
 AC1D  03                                  .byte    3,  9,  4      ; EJD   
                   ??? (Eric Durgrey - technician)
 AC1E  09
 AC1F  04

 AC20  20          check_settings:         jsr     read_optsws
 AC21  BB D6
 AC23  A5                                  lda     optsw2_shadow
 AC24  0A
 AC25  29                                  and     #$f8                ; 
                   initial lives & points per life
 AC26  F8
 AC27  CD                                  cmp     life_settings
 AC28  1E 07
 AC2A  D0                                  bne     locac34
 AC2B  08
  [ =AC34 ]
 AC2C  AD                                  lda     diff_bits
 AC2D  6A 01
 AC2F  29                                  and     #$03                ; 
                   difficulty
 AC30  03
 AC31  CD                                  cmp     diff_settings
 AC32  1F 07
 AC34  F0          locac34:                beq     locac3e
 AC35  08
  [ =AC3E ]

 AC36  AD          hs_needs_init:          lda     hs_initflag
 AC37  C9 01
 AC39  09                                  ora     #$03
 AC3A  03
 AC3B  8D                                  sta     hs_initflag
 AC3C  C9 01
 AC3E  60          locac3e:                rts

 AC3F  A5          state_10:               lda     game_mode
 AC40  05
 AC41  29                                  and     #$bf                ; 
                   mask out second high bit
 AC42  BF
 AC43  85                                  sta     game_mode
 AC44  05
 AC45  A5                                  lda     coinage_shadow
 AC46  09
 AC47  29                                  and     #$43
 AC48  43
 AC49  C9                                  cmp     #$40
 AC4A  40
 AC4B  D0                                  bne     locac50
 AC4C  03
  [ =AC50 ]
 AC4D  20                                  jsr     locca62
 AC4E  62 CA
 AC50  20          locac50:                jsr     locddfb
 AC51  FB DD
 AC53  A9                                  lda     #$00
 AC54  00
 AC55  8D                                  sta     $0601
 AC56  01 06
 AC58  A6                                  ldx     twoplayer
 AC59  3E
 AC5A  F0                                  beq     locac5e
 AC5B  02
  [ =AC5E ]
 AC5C  A2                                  ldx     #$03
 AC5D  03
 AC5E  B5          locac5e:                lda     p1_score_h,x
 AC5F  42
 AC60  85                                  sta     $2c
 AC61  2C
 AC62  B5                                  lda     p1_score_m,x
 AC63  41
 AC64  85                                  sta     $2d
 AC65  2D
 AC66  B5                                  lda     p1_score_l,x
 AC67  40
 AC68  85                                  sta     $2e
 AC69  2E
 AC6A  8A                                  txa
 AC6B  29                                  and     #$01
 AC6C  01
 AC6D  85                                  sta     $36
 AC6E  36
 AC6F  A9                                  lda     #$00
 AC70  00
 AC71  85                                  sta     $2b
 AC72  2B
 AC73  A9                                  lda     #$1a
 AC74  1A
 AC75  85                                  sta     $2a
 AC76  2A
 AC77  85                                  sta     $29
 AC78  29
 AC79  A9                                  lda     #$00
 AC7A  00
 AC7B  8D                                  sta     hs_timer
 AC7C  05 06
 AC7E  A0                                  ldy     #$fd
 AC7F  FD
 AC80  B9          locac80:                lda     $0620,y
 AC81  20 06
 AC83  C5                                  cmp     $2c
 AC84  2C
 AC85  D0                                  bne     locac9b
 AC86  14
  [ =AC9B ]
 AC87  B9                                  lda     $061f,y
 AC88  1F 06
 AC8A  C5                                  cmp     $2d
 AC8B  2D
 AC8C  D0                                  bne     locac9b
 AC8D  0D
  [ =AC9B ]
 AC8E  C0                                  cpy     #$52
 AC8F  52
 AC90  90                                  bcc     locac9a
 AC91  08
  [ =AC9A ]
 AC92  B9                                  lda     $061e,y
 AC93  1E 06
 AC95  C5                                  cmp     $2e
 AC96  2E
 AC97  B8                                  clv
 AC98  50                                  bvc     locac9b
 AC99  01
  [ =AC9B ]
 AC9A  38          locac9a:                sec
 AC9B  B0          locac9b:                bcs     locacec
 AC9C  4F
  [ =ACEC ]
 AC9D  C0          locac9d:                cpy     #$e8
 AC9E  E8
 AC9F  90                                  bcc     locacbf
 ACA0  1E
  [ =ACBF ]
 ACA1  A5                                  lda     $29
 ACA2  29
 ACA3  BE                                  ldx     $051e,y
 ACA4  1E 05
 ACA6  99                                  sta     $051e,y
 ACA7  1E 05
 ACA9  86                                  stx     $29
 ACAA  29
 ACAB  A5                                  lda     $2a
 ACAC  2A
 ACAD  BE                                  ldx     $051f,y
 ACAE  1F 05
 ACB0  99                                  sta     $051f,y
 ACB1  1F 05
 ACB3  86                                  stx     $2a
 ACB4  2A
 ACB5  A5                                  lda     $2b
 ACB6  2B
 ACB7  BE                                  ldx     $0520,y
 ACB8  20 05
 ACBA  99                                  sta     $0520,y
 ACBB  20 05
 ACBD  86                                  stx     $2b
 ACBE  2B
 ACBF  A5          locacbf:                lda     $2d
 ACC0  2D
 ACC1  BE                                  ldx     $061f,y
 ACC2  1F 06
 ACC4  99                                  sta     $061f,y
 ACC5  1F 06
 ACC7  86                                  stx     $2d
 ACC8  2D
 ACC9  A5                                  lda     $2c
 ACCA  2C
 ACCB  BE                                  ldx     $0620,y
 ACCC  20 06
 ACCE  99                                  sta     $0620,y
 ACCF  20 06
 ACD1  86                                  stx     $2c
 ACD2  2C
 ACD3  C0                                  cpy     #$52
 ACD4  52
 ACD5  90                                  bcc     locace1
 ACD6  0A
  [ =ACE1 ]
 ACD7  A5                                  lda     $2e
 ACD8  2E
 ACD9  BE                                  ldx     $061e,y
 ACDA  1E 06
 ACDC  99                                  sta     $061e,y
 ACDD  1E 06
 ACDF  86                                  stx     $2e
 ACE0  2E
 ACE1  C0          locace1:                cpy     #$55
 ACE2  55
 ACE3  90                                  bcc     locace6
 ACE4  01
  [ =ACE6 ]
 ACE5  88                                  dey
 ACE6  88          locace6:                dey
 ACE7  88                                  dey
 ACE8  D0                                  bne     locac9d
 ACE9  B3
  [ =AC9D ]
 ACEA  A0                                  ldy     #$02
 ACEB  02
 ACEC  EE          locacec:                inc     hs_timer
 ACED  05 06
 ACEF  C0                                  cpy     #$55
 ACF0  55
 ACF1  90                                  bcc     locacf4
 ACF2  01
  [ =ACF4 ]
 ACF3  88                                  dey
 ACF4  88          locacf4:                dey
 ACF5  88                                  dey
 ACF6  D0                                  bne     locac80
 ACF7  88
  [ =AC80 ]
 ACF8  A6                                  ldx     $36
 ACF9  36
 ACFA  AD                                  lda     hs_timer
 ACFB  05 06
 ACFD  9D                                  sta     $0600,x
 ACFE  00 06
 AD00  CA                                  dex
 AD01  30                                  bmi     locad06
 AD02  03
  [ =AD06 ]
 AD03  4C                                  jmp     locac5e
 AD04  5E AC
 AD06  AD          locad06:                lda     $0601
 AD07  01 06
 AD09  CD                                  cmp     $0600
 AD0A  00 06
 AD0C  90                                  bcc     locad15
 AD0D  07
  [ =AD15 ]
 AD0E  C9                                  cmp     #$63
 AD0F  63
 AD10  B0                                  bcs     locad15
 AD11  03
  [ =AD15 ]
 AD12  EE                                  inc     $0601
 AD13  01 06
 AD15  A5          locad15:                lda     curplayer
 AD16  3D
 AD17  49                                  eor     #$01
 AD18  01
 AD19  0A                                  asl     a
 AD1A  0A                                  asl     a
 AD1B  05                                  ora     curplayer
 AD1C  3D
 AD1D  69                                  adc     #$05
 AD1E  05
 AD1F  8D                                  sta     $0603
 AD20  03 06
 AD22  A0          locad22:                ldy     #$14
 AD23  14
 AD24  AD                                  lda     $0603
 AD25  03 06
 AD27  F0                                  beq     locad6b
 AD28  42
  [ =AD6B ]
 AD29  29                                  and     #$03
 AD2A  03
 AD2B  85                                  sta     curplayer
 AD2C  3D
 AD2D  C6                                  dec     curplayer
 AD2E  3D
 AD2F  4E                                  lsr     $0603
 AD30  03 06
 AD32  4E                                  lsr     $0603
 AD33  03 06
 AD35  A6                                  ldx     curplayer
 AD36  3D
 AD37  BD                                  lda     $0600,x
 AD38  00 06
 AD3A  F0                                  beq     locad68
 AD3B  2C
  [ =AD68 ]
 AD3C  C9                                  cmp     #$09
 AD3D  09
 AD3E  B0                                  bcs     locad68
 AD3F  28
  [ =AD68 ]
 AD40  0A                                  asl     a
 AD41  18                                  clc
 AD42  7D                                  adc     $0600,x
 AD43  00 06
 AD45  49                                  eor     #$ff
 AD46  FF
 AD47  38                                  sec
 AD48  E9                                  sbc     #$e5
 AD49  E5
 AD4A  8D                                  sta     hs_whichletter
 AD4B  02 06
 AD4D  20                                  jsr     locca48
 AD4E  48 CA

                   ; Entering high score?

 AD50  A9                                  lda     #$60                    
                   ; 60 second window for entering high score
 AD51  60
 AD52  8D                                  sta     hs_timer
 AD53  05 06
 AD55  A9                                  lda     #$00
 AD56  00
 AD57  85                                  sta     zap_fire_new
 AD58  4E
 AD59  85                                  sta     $50
 AD5A  50
 AD5B  A9                                  lda     #$02
 AD5C  02
 AD5D  8D                                  sta     $0604
 AD5E  04 06
 AD60  20                                  jsr     loca789 
 AD61  89 A7
 AD63  A0                                  ldy     #GS_HighScoreExplosion
 AD64  24
 AD65  84                                  sty     gamestate
 AD66  00
 AD67  60                                  rts
 AD68  4C          locad68:                jmp     locad22
 AD69  22 AD
 AD6B  84          locad6b:                sty     gamestate
 AD6C  00
 AD6D  60                                  rts

                   ; High score entry

 AD6E  A9          State_EnterInitials:    lda     #$06
 AD6F  06
 AD70  85                                  sta     $01
 AD71  01
 AD72  A5                                  lda     timectr
 AD73  03
 AD74  29                                  and     #$1f
 AD75  1F
 AD76  D0                                  bne     locad82
 AD77  0A
  [ =AD82 ]
 AD78  CE                                  dec     hs_timer
 AD79  05 06
 AD7B  D0                                  bne     locad82
 AD7C  05
  [ =AD82 ]
 AD7D  A0                                  ldy     #GS_Unknown14
 AD7E  14
 AD7F  84                                  sty     gamestate
 AD80  00
 AD81  60                                  rts
 AD82  AE          locad82:                ldx     hs_whichletter
 AD83  02 06
 AD85  BD                                  lda     hs_initials_8,x
 AD86  06 06
 AD88  20                                  jsr     track_spinner
 AD89  CE AD

                   ; enforce 0..$1a (0-26, A through.ds) range

 AD8B  A8                                  tay
 AD8C  10                                  bpl     locad93
 AD8D  05
  [ =AD93 ]
 AD8E  A9                                  lda     #$1a
 AD8F  1A
 AD90  B8                                  clv
 AD91  50                                  bvc     locad99
 AD92  06
  [ =AD99 ]
 AD93  C9          locad93:                cmp     #$1b
 AD94  1B
 AD95  90                                  bcc     locad99
 AD96  02
  [ =AD99 ]
 AD97  A9                                  lda     #$00
 AD98  00
 AD99  AE          locad99:                ldx     hs_whichletter
 AD9A  02 06
 AD9C  9D                                  sta     hs_initials_8,x
 AD9D  06 06
 AD9F  A5                                  lda     zap_fire_new
 ADA0  4E
 ADA1  29                                  and     #$18
 ADA2  18
 ADA3  A8                                  tay
 ADA4  A5                                  lda     zap_fire_new
 ADA5  4E
 ADA6  29                                  and     #$67
 ADA7  67
 ADA8  85                                  sta     zap_fire_new
 ADA9  4E
 ADAA  98                                  tya
 ADAB  F0                                  beq     locadcd
 ADAC  20
  [ =ADCD ]
 ADAD  CE                                  dec     hs_whichletter
 ADAE  02 06
 ADB0  CE                                  dec     $0604
 ADB1  04 06
 ADB3  10                                  bpl     locadc7
 ADB4  12
  [ =ADC7 ]
 ADB5  A6                                  ldx     curplayer
 ADB6  3D
 ADB7  BD                                  lda     $0600,x
 ADB8  00 06
 ADBA  C9                                  cmp     #$04
 ADBB  04
 ADBC  B0                                  bcs     locadc1
 ADBD  03
  [ =ADC1 ]
 ADBE  20                                  jsr     locddf7
 ADBF  F7 DD
 ADC1  20          locadc1:                jsr     locad22
 ADC2  22 AD
 ADC4  B8                                  clv
 ADC5  50                                  bvc     locadcd
 ADC6  06
  [ =ADCD ]
 ADC7  CA          locadc7:                dex
 ADC8  A9                                  lda     #$00
 ADC9  00
 ADCA  9D                                  sta     hs_initials_8,x
 ADCB  06 06
 ADCD  60          locadcd:                rts

                   ; Track the spinner, maybe?  Input value in A, return 
                   value in A is either
                   ; unchanged, one higher, or one lower.  Adds $50 into 
                   $51 and clears $50.

 ADCE  48          track_spinner:          pha
 ADCF  A5                                  lda     $50
 ADD0  50
 ADD1  0A                                  asl     a
 ADD2  0A                                  asl     a
 ADD3  0A                                  asl     a
 ADD4  18                                  clc
 ADD5  65                                  adc     $51
 ADD6  51
 ADD7  85                                  sta     $51
 ADD8  51
 ADD9  68                                  pla
 ADDA  A4                                  ldy     $50
 ADDB  50
 ADDC  30                                  bmi     locade3
 ADDD  05
  [ =ADE3 ]
 ADDE  69                                  adc     #$00
 ADDF  00
 ADE0  B8                                  clv
 ADE1  50                                  bvc     locade5
 ADE2  02
  [ =ADE5 ]
 ADE3  69          locade3:                adc     #$ff
 ADE4  FF
 ADE5  A0          locade5:                ldy     #$00
 ADE6  00
 ADE7  84                                  sty     $50
 ADE8  50
 ADE9  60                                  rts
 ADEA  20          locadea:                jsr     loca8b4
 ADEB  B4 A8
 ADED  A9                                  lda     #$c0
 ADEE  C0
 ADEF  A2                                  ldx     #ibMsgPlayer            
                   ; "PLAYER "
 ADF0  02
 ADF1  20                                  jsr     vapp_msg_at_y
 ADF2  17 AB
 ADF4  CE                                  dec     $016e
 ADF5  6E 01
 ADF7  20                                  jsr     locaa97
 ADF8  97 AA
 ADFA  A2                                  ldx     #ibMsgInitials          
                   ; "ENTER YOUR INITIALS"
 ADFB  0A
 ADFC  20                                  jsr     vapp_msg
 ADFD  14 AB
 ADFF  A9                                  lda     #$a6
 AE00  A6
 AE01  A2                                  ldx     #ibMsgSpinKnob          
                   ; "SPIN KNOB TO CHANGE"
 AE02  0C
 AE03  20                                  jsr     vapp_msg_at_y
 AE04  17 AB
 AE06  A9                                  lda     #$9c
 AE07  9C
 AE08  A2                                  ldx     #ibMsgPressFire         
                   ; "PRESS FIRE TO SELECT"
 AE09  0E
 AE0A  20                                  jsr     vapp_msg_at_y
 AE0B  17 AB
 AE0D  A2                                  ldx     #ibMsgAtari             
                   ; "(c) MCMLXXX ATARI"
 AE0E  2C
 AE0F  20                                  jsr     vapp_msg
 AE10  14 AB
 AE12  AD                                  lda     hs_whichletter
 AE13  02 06
 AE15  38                                  sec
 AE16  ED                                  sbc     $0604
 AE17  04 06
 AE19  4C                                  jmp     locae4e
 AE1A  4E AE
 AE1C  20          locae1c:                jsr     loca8b4
 AE1D  B4 A8
 AE1F  78                                  sei
 AE20  AD                                  lda     pokey1_rand
 AE21  CA 60
 AE23  AC                                  ldy     pokey1_rand
 AE24  CA 60
 AE26  84                                  sty     $29
 AE27  29
 AE28  4A                                  lsr     a
 AE29  4A                                  lsr     a
 AE2A  4A                                  lsr     a
 AE2B  4A                                  lsr     a
 AE2C  45                                  eor     $29
 AE2D  29
 AE2E  85                                  sta     $29
 AE2F  29
 AE30  AD                                  lda     pokey2_rand
 AE31  DA 60
 AE33  AC                                  ldy     pokey2_rand
 AE34  DA 60
 AE36  58                                  cli
 AE37  45                                  eor     $29
 AE38  29
 AE39  29                                  and     #$f0
 AE3A  F0
 AE3B  45                                  eor     $29
 AE3C  29
 AE3D  85                                  sta     $29
 AE3E  29
 AE3F  98                                  tya
 AE40  0A                                  asl     a
 AE41  0A                                  asl     a
 AE42  0A                                  asl     a
 AE43  0A                                  asl     a
 AE44  45                                  eor     $29
 AE45  29
 AE46  8D                                  sta     $011f
 AE47  1F 01
 AE49  20                                  jsr     locaf26
 AE4A  26 AF
 AE4C  A9                                  lda     #$ff
 AE4D  FF
 AE4E  85          locae4e:                sta     $63
 AE4F  63
 AE50  A2                                  ldx     #ibMsgHiScores          
                       ; "HIGH SCORES"
 AE51  10
 AE52  20                                  jsr     vapp_msg
 AE53  14 AB
 AE55  A9                                  lda     #$01
 AE56  01
 AE57  85                                  sta     $61
 AE58  61
 AE59  20                                  jsr     vapp_setscale
 AE5A  DD B0
 AE5C  A9                                  lda     #$28
 AE5D  28
 AE5E  85                                  sta     $2c
 AE5F  2C
 AE60  A2                                  ldx     #$15
 AE61  15
 AE62  86                                  stx     $37
 AE63  37
 AE64  20          locae64:                jsr     vapp_vcentre_1
 AE65  0D AB
 AE67  A9                                  lda     #$00
 AE68  00
 AE69  85                                  sta     draw_z
 AE6A  73
 AE6B  A5                                  lda     $2c
 AE6C  2C
 AE6D  AA                                  tax
 AE6E  38                                  sec
 AE6F  E9                                  sbc     #$0a
 AE70  0A
 AE71  85                                  sta     $2c
 AE72  2C
 AE73  A9                                  lda     #$d0
 AE74  D0
 AE75  20                                  jsr     vapp_ldraw_A_X
 AE76  75 DF
 AE78  A0                                  ldy     #$07
 AE79  07
 AE7A  A5                                  lda     $63
 AE7B  63
 AE7C  C5                                  cmp     $37
 AE7D  37
 AE7E  D0                                  bne     locae82
 AE7F  02
  [ =AE82 ]
 AE80  A0                                  ldy     #$00
 AE81  00
 AE82  20          locae82:                jsr     vapp_setcolor
 AE83  D1 B0
 AE85  A9                                  lda     #$61
 AE86  61
 AE87  A0                                  ldy     #$01
 AE88  01
 AE89  20                                  jsr     vapp_multdig_y_a
 AE8A  B1 DF
 AE8C  A9                                  lda     #$a0
 AE8D  A0
 AE8E  20                                  jsr     locb56a
 AE8F  6A B5
 AE91  A9                                  lda     #$00
 AE92  00
 AE93  85                                  sta     draw_z
 AE94  73
 AE95  AA                                  tax
 AE96  A9                                  lda     #$08
 AE97  08
 AE98  20                                  jsr     vapp_ldraw_A_X
 AE99  75 DF
 AE9B  E6                                  inc     $61
 AE9C  61
 AE9D  A5                                  lda     $37
 AE9E  37
 AE9F  20                                  jsr     locaef8
 AEA0  F8 AE
 AEA2  A2                                  ldx     #$00
 AEA3  00
 AEA4  A9                                  lda     #$08
 AEA5  08
 AEA6  20                                  jsr     vapp_ldraw_A_X
 AEA7  75 DF
 AEA9  A6                                  ldx     $37
 AEAA  37
 AEAB  BD                                  lda     hs_score_8,x
 AEAC  06 07
 AEAE  85                                  sta     $56
 AEAF  56
 AEB0  BD                                  lda     $0707,x
 AEB1  07 07
 AEB3  85                                  sta     $57
 AEB4  57
 AEB5  BD                                  lda     $0708,x
 AEB6  08 07
 AEB8  85                                  sta     $58
 AEB9  58
 AEBA  A9                                  lda     #$56
 AEBB  56
 AEBC  A0                                  ldy     #$03
 AEBD  03
 AEBE  20                                  jsr     vapp_multdig_y_a
 AEBF  B1 DF
 AEC1  C6                                  dec     $37
 AEC2  37
 AEC3  C6                                  dec     $37
 AEC4  37
 AEC5  C6                                  dec     $37
 AEC6  37
 AEC7  10                                  bpl     locae64
 AEC8  9B
  [ =AE64 ]
 AEC9  60                                  rts
 AECA  AD          locaeca:                lda     bonus_life_each
 AECB  56 01
 AECD  F0                                  beq     locaee3
 AECE  14
  [ =AEE3 ]
 AECF  85                                  sta     $58
 AED0  58
 AED1  A2                                  ldx     #ibMsgBonusEv           
                       ; "BONUS EVERY "
 AED2  34
 AED3  20                                  jsr     vapp_msg
 AED4  14 AB
 AED6  A9                                  lda     #$00
 AED7  00
 AED8  85                                  sta     $56
 AED9  56
 AEDA  85                                  sta     $57
 AEDB  57
 AEDC  A9                                  lda     #$56
 AEDD  56
 AEDE  A0                                  ldy     #$03
 AEDF  03
 AEE0  20                                  jsr     vapp_multdig_y_a
 AEE1  B1 DF
 AEE3  18          locaee3:                clc
 AEE4  A0                                  ldy     #$10
 AEE5  10
 AEE6  A9                                  lda     #$85
 AEE7  85
 AEE8  79          locaee8:                adc     xposMsgAtari,y          
                       ; "(c) MCMLXXX ATARI" data
 AEE9  75 D5
 AEEB  88                                  dey
 AEEC  10                                  bpl     locaee8
 AEED  FA
  [ =AEE8 ]
 AEEE  85                                  sta     copyr_cksum
 AEEF  B5
 AEF0  60                                  rts
 AEF1  AD                                  lda     hs_whichletter
 AEF2  02 06
 AEF4  38                                  sec
 AEF5  ED                                  sbc     $0604
 AEF6  04 06
 AEF8  18          locaef8:                clc
 AEF9  69                                  adc     #$02
 AEFA  02
 AEFB  85                                  sta     $38
 AEFC  38
 AEFD  A0                                  ldy     #$00
 AEFE  00
 AEFF  A9                                  lda     #$02
 AF00  02
 AF01  85                                  sta     $39
 AF02  39
 AF03  A6          locaf03:                ldx     $38
 AF04  38
 AF05  BD                                  lda     hs_initials_8,x
 AF06  06 06
 AF08  C9                                  cmp     #$1e
 AF09  1E
 AF0A  90                                  bcc     locaf0e
 AF0B  02
  [ =AF0E ]
 AF0C  A9                                  lda     #$1a
 AF0D  1A
 AF0E  0A          locaf0e:                asl     a
 AF0F  AA                                  tax
 AF10  BD                                  lda     ltr_jsrtbl,x
 AF11  FA 31
 AF13  91                                  sta     (vidptr_l),y
 AF14  74
 AF15  C8                                  iny
 AF16  BD                                  lda     ltr_jsrtbl+1,x
 AF17  FB 31
 AF19  91                                  sta     (vidptr_l),y
 AF1A  74
 AF1B  C8                                  iny
 AF1C  C6                                  dec     $38
 AF1D  38
 AF1E  C6                                  dec     $39
 AF1F  39
 AF20  10                                  bpl     locaf03
 AF21  E1
  [ =AF03 ]
 AF22  88                                  dey
 AF23  4C                                  jmp     inc_vi.word
 AF24  5F DF
 AF26  AD          locaf26:                lda     $0600
 AF27  00 06
 AF29  0D                                  ora     $0601
 AF2A  01 06
 AF2C  F0                                  beq     locaf6e
 AF2D  40
  [ =AF6E ]
 AF2E  A2                                  ldx     #ibMsgRanking           
                        ; RANKING FROM 1 TO
 AF2F  12
 AF30  20                                  jsr     vapp_msg
 AF31  14 AB
 AF33  A9                                  lda     #$63
 AF34  63
 AF35  20                                  jsr     locaf71
 AF36  71 AF
 AF38  A2                                  ldx     #$00
 AF39  00
 AF3A  20                                  jsr     locaf3f
 AF3B  3F AF
 AF3D  A2                                  ldx     #$01
 AF3E  01
 AF3F  BD          locaf3f:                lda     $0600,x
 AF40  00 06
 AF42  F0                                  beq     locaf6e
 AF43  2A
  [ =AF6E ]
 AF44  48                                  pha
 AF45  86                                  stx     $2e
 AF46  2E
 AF47  A0                                  ldy     #$03
 AF48  03
 AF49  20                                  jsr     vapp_setcolor
 AF4A  D1 B0
 AF4C  20                                  jsr     vapp_vcentre_1
 AF4D  0D AB
 AF4F  A9                                  lda     #$d0
 AF50  D0
 AF51  A4                                  ldy     $2e
 AF52  2E
 AF53  BE                                  ldx     locaf6f,y
 AF54  6F AF
 AF56  20                                  jsr     vapp_ldraw_A_X
 AF57  75 DF
 AF59  68                                  pla
 AF5A  20                                  jsr     locaf71
 AF5B  71 AF
 AF5D  A9                                  lda     #$a0
 AF5E  A0
 AF5F  20                                  jsr     locb56a
 AF60  6A B5
 AF62  A9                                  lda     #$10 ; +16
 AF63  10
 AF64  A2                                  ldx     #$04                ; 
                   "PLAYER "
 AF65  04
 AF66  20                                  jsr     locab98
 AF67  98 AB
 AF69  A6                                  ldx     $2e
 AF6A  2E
 AF6B  20                                  jsr     locaa9e
 AF6C  9E AA
 AF6E  60          locaf6e:                rts
 AF6F  C0          locaf6f:                cpy     #$b0
 AF70  B0
 AF71  C9          locaf71:                cmp     #$63
 AF72  63
 AF73  90                                  bcc     vapp_2dig_bin
 AF74  02
  [ =AF77 ]
 AF75  A9                                  lda     #$63
 AF76  63

                   ; Displays a 2-digit number on the screen

 AF77  20          vapp_2dig_bin:          jsr     bin_to_bcd
 AF78  F5 AA
 AF7A  A9                                  lda     #$29
 AF7B  29
 AF7C  A0                                  ldy     #$01
 AF7D  01
 AF7E  4C                                  jmp     vapp_multdig_y_a
 AF7F  B1 DF
 AF81  20          locaf81:                jsr     locca48
 AF82  48 CA
 AF84  CE                                  dec     $016e
 AF85  6E 01
 AF87  A0                                  ldy     #$03
 AF88  03
 AF89  20                                  jsr     vapp_setcolor
 AF8A  D1 B0
 AF8C  A9                                  lda     #$01
 AF8D  01
 AF8E  85                                  sta     curscale
 AF8F  72
 AF90  20                                  jsr     vapp_scale_A_0
 AF91  6A DF
 AF93  A2                                  ldx     #ibMsgAtari             
                        ; "(c) MCMLXXX ATARI"
 AF94  2C
 AF95  A9                                  lda     #$60                    
                        ; Y coord (normally $92 for this msg)
 AF96  60
 AF97  20                                  jsr     vapp_msg_at_y
 AF98  17 AB
 AF9A  20                                  jsr     show_plyno
 AF9B  92 AA
 AF9D  A2                                  ldx     #$07
 AF9E  07
 AF9F  86                                  stx     $37
 AFA0  37
 AFA1  A4          locafa1:                ldy     $37
 AFA2  37
 AFA3  BE                                  ldx     selfrate_msgs,y
 AFA4  9B B0
 AFA6  20                                  jsr     vapp_msg
 AFA7  14 AB
 AFA9  C6                                  dec     $37
 AFAA  37
 AFAB  10                                  bpl     locafa1
 AFAC  F4
  [ =AFA1 ]
 AFAD  AD                                  lda     player_seg
 AFAE  00 02
 AFB0  38                                  sec
 AFB1  E5                                  sbc     $7b
 AFB2  7B
 AFB3  10                                  bpl     locafbc
 AFB4  07
  [ =AFBC ]
 AFB5  C6                                  dec     $7b
 AFB6  7B
 AFB7  C6                                  dec     $7c
 AFB8  7C
 AFB9  B8                                  clv
 AFBA  50                                  bvc     locafe1
 AFBB  25
  [ =AFE1 ]
 AFBC  D0          locafbc:                bne     locafcb
 AFBD  0D
  [ =AFCB ]
 AFBE  C6                                  dec     $7c
 AFBF  7C
 AFC0  C6                                  dec     $7b
 AFC1  7B
 AFC2  10                                  bpl     locafc8
 AFC3  04
  [ =AFC8 ]
 AFC4  E6                                  inc     $7b
 AFC5  7B
 AFC6  E6                                  inc     $7c
 AFC7  7C
 AFC8  B8          locafc8:                clv
 AFC9  50                                  bvc     locafe1
 AFCA  16
  [ =AFE1 ]
 AFCB  A5          locafcb:                lda     $7c
 AFCC  7C
 AFCD  CD                                  cmp     $0127
 AFCE  27 01
 AFD0  F0                                  beq     locafd4
 AFD1  02
  [ =AFD4 ]
 AFD2  B0                                  bcs     locafe1
 AFD3  0D
  [ =AFE1 ]
 AFD4  38          locafd4:                sec
 AFD5  ED                                  sbc     player_seg
 AFD6  00 02
 AFD8  D0                                  bne     locafdb
 AFD9  01
  [ =AFDB ]
 AFDA  18                                  clc
 AFDB  B0          locafdb:                bcs     locafe1
 AFDC  04
  [ =AFE1 ]
 AFDD  E6                                  inc     $7b
 AFDE  7B
 AFDF  E6                                  inc     $7c
 AFE0  7C
 AFE1  A5          locafe1:                lda     $7c
 AFE2  7C
 AFE3  85                                  sta     $3a
 AFE4  3A
 AFE5  A2                                  ldx     #$04
 AFE6  04
 AFE7  86                                  stx     $37
 AFE8  37
 AFE9  A0          locafe9:                ldy     #$05
 AFEA  05
 AFEB  20                                  jsr     vapp_setcolor
 AFEC  D1 B0
 AFEE  A9                                  lda     #$00
 AFEF  00
 AFF0  85                                  sta     draw_z
 AFF1  73
 AFF2  20                                  jsr     vapp_vcentre_1
 AFF3  0D AB
 AFF5  A2                                  ldx     #$d8
 AFF6  D8
 AFF7  A4                                  ldy     $37
 AFF8  37
 AFF9  B9                                  lda     locb096,y
 AFFA  96 B0
 AFFC  18                                  clc
 AFFD  69                                  adc     #$f8
 AFFE  F8
 AFFF  20                                  jsr     vapp_ldraw_A_X
 B000  75 DF
 B002  A6                                  ldx     $3a
 B003  3A
 B004  BC                                  ldy     startlevtbl,x
 B005  FE 91
 B007  C0                                  cpy     #MAX_LEVEL
 B008  63
 B009  B0                                  bcs     locb042
 B00A  37
  [ =B042 ]
 B00B  C8                                  iny
 B00C  98                                  tya
 B00D  20                                  jsr     vapp_2dig_bin
 B00E  77 AF
 B010  A0                                  ldy     #$03
 B011  03
 B012  20                                  jsr     vapp_setcolor
 B013  D1 B0
 B015  20                                  jsr     vapp_vcentre_1
 B016  0D AB
 B018  A2                                  ldx     #$ba
 B019  BA
 B01A  A4                                  ldy     $37
 B01B  37
 B01C  B9                                  lda     locb096,y
 B01D  96 B0
 B01F  18                                  clc
 B020  69                                  adc     #$ec
 B021  EC
 B022  20                                  jsr     vapp_ldraw_A_X
 B023  75 DF
 B025  A6                                  ldx     $3a
 B026  3A
 B027  20                                  jsr     vapp_startbonus
 B028  C6 B0
 B02A  20                                  jsr     vapp_vcentre_1
 B02B  0D AB
 B02D  A2                                  ldx     #$cc
 B02E  CC
 B02F  A4                                  ldy     $37
 B030  37
 B031  B9                                  lda     locb096,y
 B032  96 B0
 B034  18                                  clc
 B035  69                                  adc     #$00
 B036  00
 B037  20                                  jsr     vapp_ldraw_A_X
 B038  75 DF
 B03A  A6                                  ldx     $3a
 B03B  3A
 B03C  BD                                  lda     startlevtbl,x
 B03D  FE 91
 B03F  20                                  jsr     locc4e1
 B040  E1 C4
 B042  C6          locb042:                dec     $3a
 B043  3A
 B044  C6                                  dec     $37
 B045  37
 B046  10                                  bpl     locafe9
 B047  A1
  [ =AFE9 ]
 B048  A9                                  lda     #$00
 B049  00
 B04A  85                                  sta     draw_z
 B04B  73
 B04C  20                                  jsr     vapp_vcentre_1
 B04D  0D AB
 B04F  A2                                  ldx     #ibMsgTime              
                           ; "TIME"
 B050  1C
 B051  20                                  jsr     vapp_msg
 B052  14 AB
 B054  A9                                  lda     #$04
 B055  04
 B056  A0                                  ldy     #$01
 B057  01
 B058  20                                  jsr     vapp_multdig_y_a
 B059  B1 DF
 B05B  A0                                  ldy     #$00
 B05C  00
 B05D  20                                  jsr     vapp_setcolor
 B05E  D1 B0
 B060  20                                  jsr     vapp_vcentre_1
 B061  0D AB
 B063  A2                                  ldx     #$b8
 B064  B8
 B065  20                                  jsr     locb0ab
 B066  AB B0
 B068  38                                  sec
 B069  E5                                  sbc     $7b
 B06A  7B
 B06B  A8                                  tay
 B06C  B9                                  lda     locb096,y
 B06D  96 B0
 B06F  38                                  sec
 B070  E9                                  sbc     #$16
 B071  16
 B072  20                                  jsr     vapp_ldraw_A_X
 B073  75 DF
 B075  A9                                  lda     #$e0
 B076  E0
 B077  85                                  sta     draw_z
 B078  73
 B079  A2                                  ldx     #$00
 B07A  00
 B07B  86                                  stx     $38
 B07C  38
 B07D  A0                                  ldy     #$03
 B07E  03
 B07F  84                                  sty     $37
 B080  37
 B081  A4          locb081:                ldy     $38
 B082  38
 B083  B9                                  lda     levelselboxpts,y
 B084  A3 B0
 B086  AA                                  tax
 B087  C8                                  iny
 B088  B9                                  lda     levelselboxpts,y
 B089  A3 B0
 B08B  C8                                  iny
 B08C  84                                  sty     $38
 B08D  38
 B08E  20                                  jsr     vapp_ldraw_A_X
 B08F  75 DF
 B091  C6                                  dec     $37
 B092  37
 B093  10                                  bpl     locb081
 B094  EC
  [ =B081 ]
 B095  60                                  rts

                   ; These appear to be X offsets of the tube pictures on 
                   the starting-level
                   ; selection display.  See $aff9.

 B096  BE          locb096:                .byte   $be
 B097  E3                                  .byte   $e3
 B098  09                                  .byte   $09
 B099  30                                  .byte   $30
 B09A  58                                  .byte   $58

                                           ; Byte offsets into the message 
                   table

 B09B  14          selfrate_msgs:          .byte   ibMsgRateSelf       ; 
                   "RATE YOURSELF"
 B09C  0C                                  .byte   ibMsgSpinKnob       ; 
                   "SPIN KNOB TO CHANGE"
 B09D  0E                                  .byte   ibMsgPressFire      ; 
                   "PRESS FIRE TO SELECT"
 B09E  16                                  .byte   ibMsgNovice         ; 
                   "NOVICE"
 B09F  18                                  .byte   ibMsgExpert         ; 
                   "EXPERT"
 B0A0  1E                                  .byte   ibMsgLevel          ; 
                   "LEVEL"
 B0A1  20                                  .byte   ibMsgHole           ; 
                   "HOLE"
 B0A2  1A                                  .byte   ibMsgBonus          ; 
                   "BONUS"

                   ; Used at $b083 to draw the box around the selected 
                   level, on the starting
                   ; level selection screen.

 B0A3  00          levelselboxpts:         .byte  00,  38          ; x=+0,
                   y=+38
 B0A4  26
 B0A5  28                                  .byte  40,  00          ; x=+40,
                   y=+0
 B0A6  00
 B0A7  00                                  .byte   0, -38          ; x=+0,
                   y=-38
 B0A8  DA
 B0A9  D8                                  .byte -40,   0          ; x=-40,
                   y=+0
 B0AA  00

 B0AB  AD          locb0ab:                lda     player_seg
 B0AC  00 02
 B0AE  20                                  jsr     track_spinner
 B0AF  CE AD
 B0B1  A8                                  tay
 B0B2  10                                  bpl     locb0b9
 B0B3  05
  [ =B0B9 ]
 B0B4  A9                                  lda     #$00
 B0B5  00
 B0B6  B8                                  clv
 B0B7  50                                  bvc     locb0c1
 B0B8  08
  [ =B0C1 ]
 B0B9  CD          locb0b9:                cmp     $0127
 B0BA  27 01
 B0BC  90                                  bcc     locb0c1
 B0BD  03
  [ =B0C1 ]
 B0BE  AD                                  lda     $0127
 B0BF  27 01
 B0C1  8D          locb0c1:                sta     player_seg
 B0C2  00 02
 B0C4  A8                                  tay
 B0C5  60                                  rts

 B0C6  8A          vapp_startbonus:        txa
 B0C7  20                                  jsr     ld_startbonus
 B0C8  B5 91
 B0CA  A9                                  lda     #$29
 B0CB  29
 B0CC  A0                                  ldy     #$03
 B0CD  03
 B0CE  4C                                  jmp     vapp_multdig_y_a
 B0CF  B1 DF

 B0D1  C4          vapp_setcolor:          cpy     curcolor
 B0D2  9E
 B0D3  F0                                  beq     locb0dc
 B0D4  07
  [ =B0DC ]
 B0D5  84                                  sty     curcolor
 B0D6  9E
 B0D7  A9                                  lda     #$08
 B0D8  08
 B0D9  4C                                  jmp     vapp_sclstat_A_Y
 B0DA  4C DF
 B0DC  60          locb0dc:                rts

 B0DD  C5          vapp_setscale:          cmp     curscale
 B0DE  72
 B0DF  F0                                  beq     locb0e6
 B0E0  05
  [ =B0E6 ]
 B0E1  85                                  sta     curscale
 B0E2  72
 B0E3  4C                                  jmp     vapp_scale_A_0
 B0E4  6A DF
 B0E6  60          locb0e6:                rts

 B0E7  A9          state_1a:               lda     #GS_Delay
 B0E8  0A
 B0E9  85                                  sta     gamestate
 B0EA  00
 B0EB  A9                                  lda     #GS_GameStartup
 B0EC  00
 B0ED  85                                  sta     state_after_delay
 B0EE  02
 B0EF  A9                                  lda     #$df
 B0F0  DF
 B0F1  85                                  sta     countdown_timer
 B0F2  04
 B0F3  A9                                  lda     #$12
 B0F4  12
 B0F5  85                                  sta     unknown_state
 B0F6  01
 B0F7  A9                                  lda     #$19
 B0F8  19
 B0F9  8D                                  sta     $014e
 B0FA  4E 01
 B0FC  A9                                  lda     #$18
 B0FD  18
 B0FE  8D                                  sta     $014d
 B0FF  4D 01
 B101  60                                  rts

 B102  A9          locb102:                lda     #$34
 B103  34
 B104  A2                                  ldx     #$aa
 B105  AA
 B106  20                                  jsr     locb15a
 B107  5A B1
 B109  AD                                  lda     $014e
 B10A  4E 01
 B10C  C9                                  cmp     #$a0
 B10D  A0
 B10E  B0                                  bcs     locb115
 B10F  05
  [ =B115 ]
 B110  69                                  adc     #$14
 B111  14
 B112  8D                                  sta     $014e
 B113  4E 01
 B115  C9          locb115:                cmp     #$50
 B116  50
 B117  90                                  bcc     locb130
 B118  17
  [ =B130 ]
 B119  AD                                  lda     $014d
 B11A  4D 01
 B11C  18                                  clc
 B11D  69                                  adc     #$08
 B11E  08
 B11F  8D                                  sta     $014d
 B120  4D 01
 B122  CD                                  cmp     $014e
 B123  4E 01
 B125  90                                  bcc     locb130
 B126  09
  [ =B130 ]
 B127  A9                                  lda     #$a0
 B128  A0
 B129  8D                                  sta     $014d
 B12A  4D 01
 B12C  A9                                  lda     #$14
 B12D  14
 B12E  85                                  sta     $01
 B12F  01
 B130  60          locb130:                rts
 B131  A9          locb131:                lda     #$3f
 B132  3F
 B133  A2                                  ldx     #$4e
 B134  4E
 B135  20                                  jsr     locb15a
 B136  5A B1
 B138  AD                                  lda     $014d
 B139  4D 01
 B13B  C9                                  cmp     #$30
 B13C  30
 B13D  90                                  bcc     locb144
 B13E  05
  [ =B144 ]
 B13F  E9                                  sbc     #$01
 B140  01
 B141  8D                                  sta     $014d
 B142  4D 01
 B144  C9          locb144:                cmp     #$80
 B145  80
 B146  B0                                  bcs     locb159
 B147  11
  [ =B159 ]
 B148  AD                                  lda     $014e
 B149  4E 01
 B14B  38                                  sec
 B14C  E9                                  sbc     #$01
 B14D  01
 B14E  CD                                  cmp     $014d
 B14F  4D 01
 B151  B0                                  bcs     locb156
 B152  03
  [ =B156 ]
 B153  AD                                  lda     $014d
 B154  4D 01
 B156  8D          locb156:                sta     $014e
 B157  4E 01
 B159  60          locb159:                rts
 B15A  85          locb15a:                sta     $57
 B15B  57
 B15C  86                                  stx     $56
 B15D  56
 B15E  AD                                  lda     $014d
 B15F  4D 01
 B161  85                                  sta     $37
 B162  37
 B163  CE                                  dec     $016e
 B164  6E 01
 B166  A5          locb166:                lda     $37
 B167  37
 B168  0A                                  asl     a
 B169  0A                                  asl     a
 B16A  29                                  and     #$7f
 B16B  7F
 B16C  A8                                  tay
 B16D  A5                                  lda     $37
 B16E  37
 B16F  4A                                  lsr     a
 B170  4A                                  lsr     a
 B171  4A                                  lsr     a
 B172  4A                                  lsr     a
 B173  4A                                  lsr     a
 B174  20                                  jsr     vapp_scale_A_Y
 B175  6C DF
 B177  A5                                  lda     $37
 B178  37
 B179  CD                                  cmp     $014d
 B17A  4D 01
 B17C  D0                                  bne     locb183
 B17D  05
  [ =B183 ]
 B17E  A9                                  lda     #$00
 B17F  00
 B180  B8                                  clv
 B181  50                                  bvc     locb18f
 B182  0C
  [ =B18F ]
 B183  4A          locb183:                lsr     a
 B184  4A                                  lsr     a
 B185  4A                                  lsr     a
 B186  EA                                  nop
 B187  29                                  and     #$07
 B188  07
 B189  C9                                  cmp     #$07
 B18A  07
 B18B  D0                                  bne     locb18f
 B18C  02
  [ =B18F ]
 B18D  A9                                  lda     #$03
 B18E  03
 B18F  A8          locb18f:                tay
 B190  A9                                  lda     #$68
 B191  68
 B192  20                                  jsr     vapp_sclstat_A_Y
 B193  4C DF
 B195  A5                                  lda     $57
 B196  57
 B197  A6                                  ldx     $56
 B198  56
 B199  20                                  jsr     vapp_vjsr_AX
 B19A  39 DF
 B19C  A5                                  lda     $37
 B19D  37
 B19E  18                                  clc
 B19F  69                                  adc     #$02
 B1A0  02
 B1A1  85                                  sta     $37
 B1A2  37
 B1A3  CD                                  cmp     $014e
 B1A4  4E 01
 B1A6  90                                  bcc     locb166
 B1A7  BE
  [ =B166 ]
 B1A8  A2                                  ldx     #ibMsgAtari             
                           ; ATARI
 B1A9  2C
 B1AA  A9                                  lda     #$d0
 B1AB  D0
 B1AC  20                                  jsr     vapp_msg_at_y
 B1AD  17 AB

 0000  F2 3F 00 00                         VECTOR_DATA_1 = $3FF2

 B1AF  A9                                  lda     #>VECTOR_DATA_1
 B1B0  3F
 B1B1  A2                                  ldx     #<VECTOR_DATA_1
 B1B2  F2
 B1B3  4C                                  jmp     vapp_vjsr_AX
 B1B4  39 DF
 B1B6  20          locb1b6:                jsr     locc1c3
 B1B7  C3 C1
 B1B9  AD                                  lda     vecram
 B1BA  00 20
 B1BC  CD                                  cmp     loccec6
 B1BD  C6 CE
 B1BF  D0                                  bne     locb1c7
 B1C0  06
  [ =B1C7 ]
 B1C1  AD                                  lda     $0133
 B1C2  33 01
 B1C4  D0                                  bne     locb1c7
 B1C5  01
  [ =B1C7 ]
 B1C6  60                                  rts
 B1C7  A5          locb1c7:                lda     $01
 B1C8  01
 B1C9  C9                                  cmp     #$00
 B1CA  00
 B1CB  F0                                  beq     locb209
 B1CC  3C
  [ =B209 ]
 B1CD  A9                                  lda     #$00
 B1CE  00
 B1CF  20                                  jsr     db_init_vi.word
 B1D0  BE B2
 B1D2  20                                  jsr     locb332
 B1D3  32 B3
 B1D5  B0                                  bcs     locb1f5
 B1D6  1E
  [ =B1F5 ]
 B1D7  20                                  jsr     locb20d
 B1D8  0D B2
 B1DA  AD                                  lda     $016e
 B1DB  6E 01
 B1DD  F0                                  beq     locb1f5
 B1DE  16
  [ =B1F5 ]

                   ; Anti-piracy provision.  Checksum the video RAM that 
                   holds the copyright
                   ; message.  See also $b27d and $a581.

 B1DF  A0                                  ldy     #$27
 B1E0  27
 B1E1  A9                                  lda     #$0e
 B1E2  0E
 B1E3  38                                  sec
 B1E4  F1          locb1e4:                sbc     (copyr_vid_loc),y
 B1E5  B6
 B1E6  88                                  dey
 B1E7  10                                  bpl     locb1e4
 B1E8  FB
  [ =B1E4 ]
 B1E9  A8                                  tay
 B1EA  F0                                  beq     locb1ee
 B1EB  02
  [ =B1EE ]
 B1EC  49                                  eor     #$e5
 B1ED  E5
 B1EE  F0          locb1ee:                beq     locb1f2
 B1EF  02
  [ =B1F2 ]
 B1F0  49                                  eor     #$29
 B1F1  29
 B1F2  8D          locb1f2:                sta     copyr_vid_cksum2
 B1F3  55 04
 B1F5  A9          locb1f5:                lda     #$00
 B1F6  00
 B1F7  20                                  jsr     dblbuf_done
 B1F8  FE B2
 B1FA  AD                                  lda     loccec4
 B1FB  C4 CE
 B1FD  8D                                  sta     vecram
 B1FE  00 20
 B200  AD                                  lda     loccec5
 B201  C5 CE
 B203  8D                                  sta     vecram+1
 B204  01 20
 B206  B8                                  clv
 B207  50                                  bvc     locb20c
 B208  03
  [ =B20C ]
 B209  4C          locb209:                jmp     locb230
 B20A  30 B2
 B20C  60          locb20c:                rts

 B20D  A6          locb20d:                ldx     $01
 B20E  01
 B20F  BD                                  lda     locb218+1,x
 B210  19 B2
 B212  48                                  pha
 B213  BD                                  lda     locb218,x
 B214  18 B2
 B216  48                                  pha
 B217  60                                  rts

                   ; Jump table, used just above, at $b20f

 B218  2F B2       locb218:                .word   locb230-1               
 B21A  03 D8                               .word   locd804-1
 B21C  B9 B8                               .word   locb8ba-1
 B21E  E9 AD                               .word   locadea-1
 B220  80 AF                               .word   locaf81-1
 B222  1B AE                               .word   locae1c-1
 B224  61 AA                               .word   locaa62-1
 B226  59 AA                               .word   locaa5a-1
 B228  6E AA                               .word   locaa6f-1
 B22A  01 B1                               .word   locb102-1
 B22C  30 B1                               .word   locb131-1
 B22E  78 AA                               .word   locaa79-1

 B230  A9          locb230:                lda     #$07
 B231  07
 B232  20                                  jsr     db_init_vi.word
 B233  BE B2
 B235  20                                  jsr     draw_player
 B236  86 B5
 B238  A9                                  lda     #$07
 B239  07
 B23A  20                                  jsr     dblbuf_done
 B23B  FE B2
 B23D  A9                                  lda     #$04
 B23E  04
 B23F  20                                  jsr     db_init_vi.word
 B240  BE B2
 B242  20                                  jsr     draw_shots
 B243  5B B7
 B245  A9                                  lda     #$04
 B246  04
 B247  20                                  jsr     dblbuf_done
 B248  FE B2
 B24A  A9                                  lda     #$03
 B24B  03
 B24C  20                                  jsr     db_init_vi.word
 B24D  BE B2
 B24F  20                                  jsr     draw_enemies
 B250  AD B5
 B252  A9                                  lda     #$03
 B253  03
 B254  20                                  jsr     dblbuf_done
 B255  FE B2
 B257  A9                                  lda     #$06
 B258  06
 B259  20                                  jsr     db_init_vi.word
 B25A  BE B2
 B25C  20                                  jsr     draw_explosions
 B25D  9A B7
 B25F  A9                                  lda     #$06
 B260  06
 B261  20                                  jsr     dblbuf_done
 B262  FE B2
 B264  A9                                  lda     #$05
 B265  05
 B266  20                                  jsr     db_init_vi.word
 B267  BE B2
 B269  20                                  jsr     draw_pending
 B26A  98 B4
 B26C  A9                                  lda     #$05
 B26D  05
 B26E  20                                  jsr     dblbuf_done
 B26F  FE B2
 B271  A9                                  lda     #$00
 B272  00
 B273  20                                  jsr     db_init_vi.word
 B274  BE B2
 B276  20                                  jsr     loca8b4
 B277  B4 A8
 B279  A5                                  lda     game_mode
 B27A  05
 B27B  30                                  bmi     locb28a
 B27C  0D
  [ =B28A ]

                   ; Anti-piracy provision.  When not playing, checksum 
                   the video RAM that
                   ; holds the copyright message.  See also $b1df and 
                   $a581.

 B27D  A9                                  lda     #$f2
 B27E  F2
 B27F  18                                  clc
 B280  A0                                  ldy     #$27
 B281  27
 B282  71          locb282:                adc     (copyr_vid_loc),y
 B283  B6
 B284  88                                  dey
 B285  10                                  bpl     locb282
 B286  FB
  [ =B282 ]
 B287  8D                                  sta     copyr_vid_cksum1
 B288  1B 01

                   ; End anti-piracy provision.

 B28A  A9          locb28a:                lda     #$00
 B28B  00
 B28C  20                                  jsr     dblbuf_done
 B28D  FE B2
 B28F  20                                  jsr     locb367
 B290  67 B3
 B292  A9                                  lda     #$01
 B293  01
 B294  20                                  jsr     db_init_vi.word
 B295  BE B2
 B297  20                                  jsr     locc5c2
 B298  C2 C5
 B29A  A9                                  lda     #$01
 B29B  01
 B29C  20                                  jsr     dblbuf_done
 B29D  FE B2
 B29F  A9                                  lda     #$08
 B2A0  08
 B2A1  20                                  jsr     db_init_vi.word
 B2A2  BE B2
 B2A4  20                                  jsr     locc54d
 B2A5  4D C5
 B2A7  A9                                  lda     #$08
 B2A8  08
 B2A9  20                                  jsr     dblbuf_done
 B2AA  FE B2
 B2AC  A9                                  lda     #$00
 B2AD  00
 B2AE  8D                                  sta     $0114
 B2AF  14 01
 B2B1  AD                                  lda     loccec2
 B2B2  C2 CE
 B2B4  8D                                  sta     vecram
 B2B5  00 20
 B2B7  AD                                  lda     loccec3
 B2B8  C3 CE
 B2BA  8D                                  sta     vecram+1
 B2BB  01 20
 B2BD  60                                  rts

 B2BE  AA          db_init_vi.word:        tax
 B2BF  0A                                  asl     a
 B2C0  A8                                  tay
 B2C1  BD                                  lda     dblbuf_flg,x
 B2C2  15 04
 B2C4  D0                                  bne     locb2cf
 B2C5  09
  [ =B2CF ]
 B2C6  BE                                  ldx     dblbuf_addr_B,y
 B2C7  7A CE
 B2C9  B9                                  lda     dblbuf_addr_B+1,y
 B2CA  7B CE
 B2CC  B8                                  clv
 B2CD  50                                  bvc     locb2d5
 B2CE  06
  [ =B2D5 ]
 B2CF  BE          locb2cf:                ldx     dblbuf_addr_A,y
 B2D0  68 CE
 B2D2  B9                                  lda     dblbuf_addr_A+1,y
 B2D3  69 CE
 B2D5  86          locb2d5:                stx     vidptr_l
 B2D6  74
 B2D7  85                                  sta     vidptr_h
 B2D8  75
 B2D9  A9                                  lda     #$00
 B2DA  00
 B2DB  85                                  sta     $a9
 B2DC  A9
 B2DD  60                                  rts
 B2DE  AA          locb2de:                tax
 B2DF  0A                                  asl     a
 B2E0  A8                                  tay
 B2E1  BD                                  lda     dblbuf_flg,x
 B2E2  15 04
 B2E4  D0                                  bne     locb2ef
 B2E5  09
  [ =B2EF ]
 B2E6  BE                                  ldx     dblbuf_addr_A,y
 B2E7  68 CE
 B2E9  B9                                  lda     dblbuf_addr_A+1,y
 B2EA  69 CE
 B2EC  B8                                  clv
 B2ED  50                                  bvc     locb2f5
 B2EE  06
  [ =B2F5 ]
 B2EF  BE          locb2ef:                ldx     dblbuf_addr_B,y
 B2F0  7A CE
 B2F2  B9                                  lda     dblbuf_addr_B+1,y
 B2F3  7B CE
 B2F5  86          locb2f5:                stx     $3b
 B2F6  3B
 B2F7  85                                  sta     $3c
 B2F8  3C
 B2F9  A9                                  lda     #$00
 B2FA  00
 B2FB  85                                  sta     $a9
 B2FC  A9
 B2FD  60                                  rts

 B2FE  48          dblbuf_done:            pha
 B2FF  20                                  jsr     vapp_rts
 B300  09 DF
 B302  68                                  pla
 B303  AA                                  tax
 B304  0A                                  asl     a
 B305  A8                                  tay
 B306  B9                                  lda     dblbuf_vjsr_loc,y
 B307  8C CE
 B309  85                                  sta     $3b
 B30A  3B
 B30B  B9                                  lda     dblbuf_vjsr_loc+1,y
 B30C  8D CE
 B30E  85                                  sta     $3c
 B30F  3C
 B310  BD                                  lda     dblbuf_flg,x
 B311  15 04
 B313  49                                  eor     #$01
 B314  01
 B315  9D                                  sta     dblbuf_flg,x
 B316  15 04
 B318  D0                                  bne     locb323
 B319  09
  [ =B323 ]
 B31A  B9                                  lda     dblbuf_vjmp_C,y
 B31B  9E CE
 B31D  BE                                  ldx     dblbuf_vjmp_C+1,y
 B31E  9F CE
 B320  B8                                  clv
 B321  50                                  bvc     locb329
 B322  06
  [ =B329 ]
 B323  B9          locb323:                lda     dblbuf_vjmp_D,y
 B324  B0 CE
 B326  BE                                  ldx     dblbuf_vjmp_D+1,y
 B327  B1 CE
 B329  A0          locb329:                ldy     #$00
 B32A  00
 B32B  91                                  sta     ($3b),y
 B32C  3B
 B32D  8A                                  txa
 B32E  C8                                  iny
 B32F  91                                  sta     ($3b),y
 B330  3B
 B331  60                                  rts
 B332  AD          locb332:                lda     loccec4
 B333  C4 CE
 B335  CD                                  cmp     vecram
 B336  00 20
 B338  F0                                  beq     locb33f
 B339  05
  [ =B33F ]
 B33A  8D                                  sta     vecram
 B33B  00 20
 B33D  38                                  sec
 B33E  60                                  rts
 B33F  AD          locb33f:                lda     dblbuf_flg
 B340  15 04
 B342  D0                                  bne     locb349
 B343  05
  [ =B349 ]
 B344  A2                                  ldx     #$02
 B345  02
 B346  B8                                  clv
 B347  50                                  bvc     locb34b
 B348  02
  [ =B34B ]
 B349  A2          locb349:                ldx     #$08
 B34A  08
 B34B  BD          locb34b:                lda     dblbuf_vjmp_C,x
 B34C  9E CE
 B34E  A0                                  ldy     #$00
 B34F  00
 B350  8C                                  sty     $016e
 B351  6E 01
 B353  91                                  sta     (vidptr_l),y
 B354  74
 B355  C8                                  iny
 B356  BD                                  lda     dblbuf_vjmp_C+1,x
 B357  9F CE
 B359  91                                  sta     (vidptr_l),y
 B35A  74
 B35B  BD                                  lda     dblbuf_addr_A,x
 B35C  68 CE
 B35E  85                                  sta     vidptr_l
 B35F  74
 B360  BD                                  lda     dblbuf_addr_A+1,x
 B361  69 CE
 B363  85                                  sta     vidptr_h
 B364  75
 B365  18                                  clc
 B366  60                                  rts
 B367  AD          locb367:                lda     $0114
 B368  14 01
 B36A  F0                                  beq     locb379
 B36B  0D
  [ =B379 ]
 B36C  A9                                  lda     #$02
 B36D  02
 B36E  20                                  jsr     db_init_vi.word
 B36F  BE B2
 B371  20                                  jsr     locc30d
 B372  0D C3
 B374  A9                                  lda     #$02
 B375  02
 B376  20                                  jsr     dblbuf_done
 B377  FE B2
 B379  A9          locb379:                lda     #$02
 B37A  02
 B37B  20                                  jsr     locb2de
 B37C  DE B2
 B37E  A9                                  lda     #$00
 B37F  00
 B380  A2                                  ldx     #$0f
 B381  0F
 B382  9D          locb382:                sta     $0425,x
 B383  25 04
 B385  CA                                  dex
 B386  10                                  bpl     locb382
 B387  FA
  [ =B382 ]
 B388  AD                                  lda     $0106
 B389  06 01
 B38B  30                                  bmi     locb3d6
 B38C  49
  [ =B3D6 ]
 B38D  AE                                  ldx     MaxActiveEnemies
 B38E  1C 01
 B390  BD          locb390:                lda     enemy_along,x
 B391  DF 02
 B393  F0                                  beq     locb3d3
 B394  3E
  [ =B3D3 ]
 B395  A0                                  ldy     #$00
 B396  00
 B397  BD                                  lda     enemy_type_info,x
 B398  83 02
 B39A  29                                  and     #$07
 B39B  07
 B39C  C9                                  cmp     #$01
 B39D  01
 B39E  D0                                  bne     locb3d3
 B39F  33
  [ =B3D3 ]
 B3A0  C8                                  iny
 B3A1  84                                  sty     $29
 B3A2  29
 B3A3  BD                                  lda     enemy_type_info,x
 B3A4  83 02
 B3A6  29                                  and     #$80
 B3A7  80
 B3A8  D0                                  bne     locb3c6
 B3A9  1C
  [ =B3C6 ]
 B3AA  AD                                  lda     pulsing
 B3AB  48 01
 B3AD  30                                  bmi     locb3bb
 B3AE  0C
  [ =B3BB ]
 B3AF  BD                                  lda     enemy_along,x
 B3B0  DF 02
 B3B2  CD                                  cmp     lethal_distance
 B3B3  57 01
 B3B5  B0                                  bcs     locb3bb
 B3B6  04
  [ =B3BB ]
 B3B7  E6                                  inc     $29
 B3B8  29
 B3B9  E6                                  inc     $29
 B3BA  29
 B3BB  A5          locb3bb:                lda     $29
 B3BC  29
 B3BD  BC                                  ldy     more_enemy_info,x
 B3BE  CC 02
 B3C0  19                                  ora     $0425,y
 B3C1  25 04
 B3C3  99                                  sta     $0425,y
 B3C4  25 04
 B3C6  BC          locb3c6:                ldy     enemy_seg,x
 B3C7  B9 02
 B3C9  A5                                  lda     $29
 B3CA  29
 B3CB  09                                  ora     #$80
 B3CC  80
 B3CD  19                                  ora     $0425,y
 B3CE  25 04
 B3D0  99                                  sta     $0425,y
 B3D1  25 04
 B3D3  CA          locb3d3:                dex
 B3D4  10                                  bpl     locb390
 B3D5  BA
  [ =B390 ]
 B3D6  A9          locb3d6:                lda     #$06
 B3D7  06
 B3D8  AC                                  ldy     zap_running
 B3D9  25 01
 B3DB  F0                                  beq     locb3e9
 B3DC  0C
  [ =B3E9 ]
 B3DD  30                                  bmi     locb3e9
 B3DE  0A
  [ =B3E9 ]
 B3DF  A5                                  lda     timectr
 B3E0  03
 B3E1  29                                  and     #$07
 B3E2  07
 B3E3  C9                                  cmp     #$07
 B3E4  07
 B3E5  D0                                  bne     locb3e9
 B3E6  02
  [ =B3E9 ]
 B3E7  A9                                  lda     #$01
 B3E8  01
 B3E9  85          locb3e9:                sta     $29
 B3EA  29
 B3EB  A0                                  ldy     #$ff
 B3EC  FF
 B3ED  A2                                  ldx     #$ff
 B3EE  FF
 B3EF  86                                  stx     $2c
 B3F0  2C
 B3F1  AD                                  lda     player_along
 B3F2  02 02
 B3F4  F0                                  beq     locb401
 B3F5  0B
  [ =B401 ]
 B3F6  AD                                  lda     player_state
 B3F7  01 02
 B3F9  30                                  bmi     locb401
 B3FA  06
  [ =B401 ]
 B3FB  AE                                  ldx     player_seg
 B3FC  00 02
 B3FE  AC                                  ldy     player_state
 B3FF  01 02
 B401  86          locb401:                stx     $2a
 B402  2A
 B403  84                                  sty     $2b
 B404  2B
 B405  AD                                  lda     $0124
 B406  24 01
 B408  30                                  bmi     locb412
 B409  08
  [ =B412 ]
 B40A  29                                  and     #$0e
 B40B  0E
 B40C  4A                                  lsr     a
 B40D  85                                  sta     $2c
 B40E  2C
 B40F  CE                                  dec     $0124
 B410  24 01
 B412  A2          locb412:                ldx     #$0f
 B413  0F
 B414  A0          locb414:                ldy     #$06
 B415  06
 B416  BD                                  lda     $0425,x
 B417  25 04
 B419  F0                                  beq     locb427
 B41A  0C
  [ =B427 ]
 B41B  29                                  and     #$02
 B41C  02
 B41D  F0                                  beq     locb424
 B41E  05
  [ =B424 ]
 B41F  A5                                  lda     timectr
 B420  03
 B421  29                                  and     #$01
 B422  01
 B423  A8                                  tay
 B424  B8          locb424:                clv
 B425  50                                  bvc     locb44b
 B426  24
  [ =B44B ]
 B427  E4          locb427:                cpx     $2a
 B428  2A
 B429  F0                                  beq     locb42d
 B42A  02
  [ =B42D ]
 B42B  E4                                  cpx     $2b
 B42C  2B
 B42D  D0          locb42d:                bne     locb434
 B42E  05
  [ =B434 ]
 B42F  A0                                  ldy     #$01
 B430  01
 B431  B8                                  clv
 B432  50                                  bvc     locb44b
 B433  17
  [ =B44B ]
 B434  AD          locb434:                lda     $0124
 B435  24 01
 B437  30                                  bmi     locb449
 B438  10
  [ =B449 ]
 B439  8A                                  txa
 B43A  18                                  clc
 B43B  65                                  adc     $2c
 B43C  2C
 B43D  29                                  and     #$07
 B43E  07
 B43F  C9                                  cmp     #$07
 B440  07
 B441  D0                                  bne     locb445
 B442  02
  [ =B445 ]
 B443  A9                                  lda     #$03
 B444  03
 B445  A8          locb445:                tay
 B446  B8                                  clv
 B447  50                                  bvc     locb44b
 B448  02
  [ =B44B ]
 B449  A4          locb449:                ldy     $29
 B44A  29
 B44B  98          locb44b:                tya
 B44C  BC                                  ldy     locb476,x
 B44D  76 B4
 B44F  91                                  sta     ($3b),y
 B450  3B
 B451  CA                                  dex
 B452  10                                  bpl     locb414
 B453  C0
  [ =B414 ]
 B454  A2                                  ldx     #$0f
 B455  0F
 B456  2C                                  bit     open_level
 B457  11 01
 B459  10                                  bpl     locb45c
 B45A  01
  [ =B45C ]
 B45B  CA                                  dex
 B45C  A0          locb45c:                ldy     #$c0
 B45D  C0
 B45E  BD                                  lda     $0425,x
 B45F  25 04
 B461  10                                  bpl     locb465
 B462  02
  [ =B465 ]
 B463  A0                                  ldy     #$00
 B464  00
 B465  84          locb465:                sty     $58
 B466  58
 B467  BC                                  ldy     locb487,x
 B468  87 B4
 B46A  B1                                  lda     ($b0),y
 B46B  B0
 B46C  29                                  and     #$1f
 B46D  1F
 B46E  05                                  ora     $58
 B46F  58
 B470  91                                  sta     ($b0),y
 B471  B0
 B472  CA                                  dex
 B473  10                                  bpl     locb45c
 B474  E7
  [ =B45C ]
 B475  60                                  rts

                   ; Function unknown.  Used at $b44c.

 B476  A8          locb476:                .byte   $a8
 B477  9C                                  .byte   $9c
 B478  92                                  .byte   $92
 B479  86                                  .byte   $86
 B47A  7C                                  .byte   $7c
 B47B  70                                  .byte   $70
 B47C  66                                  .byte   $66
 B47D  5A                                  .byte   $5a
 B47E  50                                  .byte   $50
 B47F  44                                  .byte   $44
 B480  3A                                  .byte   $3a
 B481  2E                                  .byte   $2e
 B482  24                                  .byte   $24
 B483  18                                  .byte   $18
 B484  0E                                  .byte   $0e
 B485  02                                  .byte   $02
 B486  B2                                  .byte   $b2
 B487  3B          locb487:                .byte   $3b
 B488  37                                  .byte   $37
 B489  33                                  .byte   $33
 B48A  2F                                  .byte   $2f
 B48B  2B                                  .byte   $2b
 B48C  27                                  .byte   $27
 B48D  23                                  .byte   $23
 B48E  1F                                  .byte   $1f
 B48F  1B                                  .byte   $1b
 B490  17                                  .byte   $17
 B491  13                                  .byte   $13
 B492  0F                                  .byte   $0f
 B493  0B                                  .byte   $0b
 B494  07                                  .byte   $07
 B495  03                                  .byte   $03
 B496  3F                                  .byte   $3f
 B497  1D                                  .byte   $1d

 B498  A0          draw_pending:           ldy     #red
 B499  0C
 B49A  84                                  sty     curcolor
 B49B  9E
 B49C  A9                                  lda     #$08
 B49D  08
 B49E  20                                  jsr     vapp_sclstat_A_Y
 B49F  4C DF
 B4A1  A2                                  ldx     #$66
 B4A2  66
 B4A3  20                                  jsr     vapp_to_X_
 B4A4  65 C7
 B4A6  A9                                  lda     #$12
 B4A7  12
 B4A8  85                                  sta     $56
 B4A9  56
 B4AA  A2                                  ldx     #$3f
 B4AB  3F
 B4AC  86                                  stx     $37
 B4AD  37
 B4AE  A0                                  ldy     #$00
 B4AF  00
 B4B0  A6          locb4b0:                ldx     $37
 B4B1  37
 B4B2  BD                                  lda     pending_vid,x
 B4B3  43 02
 B4B5  D0                                  bne     locb4ba
 B4B6  03
  [ =B4BA ]
 B4B7  4C                                  jmp     locb549
 B4B8  49 B5
 B4BA  C9          locb4ba:                cmp     #$50
 B4BB  50
 B4BC  90                                  bcc     locb4c0
 B4BD  02
  [ =B4C0 ]
 B4BE  C6                                  dec     $37
 B4BF  37

                   ; Construct a vscale instruction based on the 
                   pending_vid,x value

 B4C0  48          locb4c0:                pha
 B4C1  29                                  and     #$3f
 B4C2  3F
 B4C3  91                                  sta     (vidptr_l),y
 B4C4  74
 B4C5  68                                  pla
 B4C6  2A                                  rol     a
 B4C7  2A                                  rol     a
 B4C8  2A                                  rol     a
 B4C9  29                                  and     #$03
 B4CA  03
 B4CB  18                                  clc
 B4CC  69                                  adc     #$01
 B4CD  01
 B4CE  09                                  ora     #$70
 B4CF  70
 B4D0  C8                                  iny
 B4D1  91                                  sta     (vidptr_l),y
 B4D2  74
 B4D3  C8                                  iny
 B4D4  BD                                  lda     pending_seg,x
 B4D5  03 02
 B4D7  AA                                  tax

                   ; Construct a long draw (z=0) subtracting screen centre 
                   from $03?a,x values

 B4D8  BD                                  lda     $038a,x
 B4D9  8A 03
 B4DB  38                                  sec
 B4DC  E5                                  sbc     $68
 B4DD  68
 B4DE  85                                  sta     $63
 B4DF  63
 B4E0  91                                  sta     (vidptr_l),y
 B4E1  74
 B4E2  C8                                  iny
 B4E3  BD                                  lda     $037a,x
 B4E4  7A 03
 B4E6  E5                                  sbc     $69
 B4E7  69
 B4E8  85                                  sta     $64
 B4E9  64
 B4EA  29                                  and     #$1f
 B4EB  1F
 B4EC  91                                  sta     (vidptr_l),y
 B4ED  74
 B4EE  C8                                  iny
 B4EF  BD                                  lda     $036a,x
 B4F0  6A 03
 B4F2  85                                  sta     $61
 B4F3  61
 B4F4  91                                  sta     (vidptr_l),y
 B4F5  74
 B4F6  C8                                  iny
 B4F7  BD                                  lda     $035a,x
 B4F8  5A 03
 B4FA  85                                  sta     $62
 B4FB  62
 B4FC  29                                  and     #$1f
 B4FD  1F
 B4FE  91                                  sta     (vidptr_l),y
 B4FF  74
 B500  C8                                  iny

                   ; Append a long draw, x=0 y=0 z=5

 B501  A9                                  lda     #$00
 B502  00
 B503  91                                  sta     (vidptr_l),y
 B504  74
 B505  C8                                  iny
 B506  91                                  sta     (vidptr_l),y
 B507  74
 B508  C8                                  iny
 B509  91                                  sta     (vidptr_l),y
 B50A  74
 B50B  A9                                  lda     #$a0
 B50C  A0
 B50D  C8                                  iny
 B50E  91                                  sta     (vidptr_l),y
 B50F  74
 B510  C8                                  iny

                   ; Append the negative of the long draw we constructed 
                   above.

 B511  A5                                  lda     $63
 B512  63
 B513  49                                  eor     #$ff
 B514  FF
 B515  18                                  clc
 B516  69                                  adc     #$01
 B517  01
 B518  91                                  sta     (vidptr_l),y
 B519  74
 B51A  C8                                  iny
 B51B  A5                                  lda     $64
 B51C  64
 B51D  49                                  eor     #$ff
 B51E  FF
 B51F  69                                  adc     #$00
 B520  00
 B521  29                                  and     #$1f
 B522  1F
 B523  91                                  sta     (vidptr_l),y
 B524  74
 B525  C8                                  iny
 B526  A5                                  lda     $61
 B527  61
 B528  49                                  eor     #$ff
 B529  FF
 B52A  18                                  clc
 B52B  69                                  adc     #$01
 B52C  01
 B52D  91                                  sta     (vidptr_l),y
 B52E  74
 B52F  C8                                  iny
 B530  A5                                  lda     $62
 B531  62
 B532  49                                  eor     #$ff
 B533  FF
 B534  69                                  adc     #$00
 B535  00
 B536  29                                  and     #$1f
 B537  1F
 B538  91                                  sta     (vidptr_l),y
 B539  74
 B53A  C8                                  iny
 B53B  C0                                  cpy     #$f0
 B53C  F0
 B53D  90                                  bcc     locb545
 B53E  06
  [ =B545 ]
 B53F  88                                  dey
 B540  20                                  jsr     inc_vi.word
 B541  5F DF
 B543  A0                                  ldy     #$00
 B544  00
 B545  C6          locb545:                dec     $56
 B546  56
 B547  30                                  bmi     locb550
 B548  07
  [ =B550 ]
 B549  C6          locb549:                dec     $37
 B54A  37
 B54B  30                                  bmi     locb550
 B54C  03
  [ =B550 ]
 B54D  4C                                  jmp     locb4b0
 B54E  B0 B4
 B550  98          locb550:                tya
 B551  F0                                  beq     locb557
 B552  04
  [ =B557 ]
 B553  88                                  dey
 B554  20                                  jsr     inc_vi.word
 B555  5F DF

                   ; Anti-piracy code.  If the copyright string has been 
                   tampered with,
                   ; and player 1's level is over 10, set $53 to #$7a.
                   ; I'm not sure what this does, but it can't be good. :-)

 B557  A5          locb557:                lda     copyr_cksum
 B558  B5
 B559  F0                                  beq     locb565
 B55A  0A
  [ =B565 ]
 B55B  A5                                  lda     p1_level
 B55C  46
 B55D  C9                                  cmp     #$0a
 B55E  0A
 B55F  90                                  bcc     locb565
 B560  04
  [ =B565 ]
 B561  A9                                  lda     #$7a
 B562  7A
 B563  85                                  sta     $53
 B564  53

                   ; End anti-piracy code.

 B565  A9          locb565:                lda     #$01
 B566  01
 B567  4C                                  jmp     vapp_scale_A_0
 B568  6A DF
 B56A  48          locb56a:                pha
 B56B  A0                                  ldy     #$00
 B56C  00
 B56D  98                                  tya
 B56E  91                                  sta     (vidptr_l),y
 B56F  74
 B570  C8                                  iny
 B571  91                                  sta     (vidptr_l),y
 B572  74
 B573  C8                                  iny
 B574  91                                  sta     (vidptr_l),y
 B575  74
 B576  C8                                  iny
 B577  68                                  pla
 B578  91                                  sta     (vidptr_l),y
 B579  74
 B57A  A9                                  lda     #$04
 B57B  04
 B57C  18                                  clc
 B57D  65                                  adc     vidptr_l
 B57E  74
 B57F  85                                  sta     vidptr_l
 B580  74
 B581  90                                  bcc     locb585
 B582  02
  [ =B585 ]
 B583  E6                                  inc     vidptr_h
 B584  75
 B585  60          locb585:                rts

 B586  A9          draw_player:            lda     #$01
 B587  01
 B588  85                                  sta     curcolor
 B589  9E
 B58A  AD                                  lda     player_along
 B58B  02 02
 B58D  F0                                  beq     locb5ac
 B58E  1D
  [ =B5AC ]
 B58F  C9                                  cmp     #$f0
 B590  F0
 B591  B0                                  bcs     locb5ac
 B592  19
  [ =B5AC ]
 B593  85                                  sta     $57
 B594  57
 B595  85                                  sta     $2f
 B596  2F
 B597  AD                                  lda     player_state
 B598  01 02
 B59A  C9                                  cmp     #$81
 B59B  81
 B59C  F0                                  beq     locb5ac
 B59D  0E
  [ =B5AC ]
 B59E  AC                                  ldy     player_seg
 B59F  00 02
 B5A1  A5                                  lda     $51
 B5A2  51
 B5A3  4A                                  lsr     a
 B5A4  29                                  and     #$07
 B5A5  07
 B5A6  18                                  clc
 B5A7  69                                  adc     #$01
 B5A8  01
 B5A9  20                                  jsr     draw_linegfx
 B5AA  A0 BD
 B5AC  60          locb5ac:                rts

 B5AD  AD          draw_enemies:           lda     $0106
 B5AE  06 01
 B5B0  30                                  bmi     locb5d6
 B5B1  24
  [ =B5D6 ]
 B5B2  A2                                  ldx     #$06
 B5B3  06
 B5B4  86                                  stx     $37
 B5B5  37
 B5B6  A6          locb5b6:                ldx     $37
 B5B7  37
 B5B8  BD                                  lda     enemy_along,x
 B5B9  DF 02
 B5BB  F0                                  beq     locb5d2
 B5BC  15
  [ =B5D2 ]
 B5BD  85                                  sta     $57
 B5BE  57
 B5BF  BD                                  lda     enemy_type_info,x
 B5C0  83 02
 B5C2  29                                  and     #$18
 B5C3  18
 B5C4  4A                                  lsr     a
 B5C5  4A                                  lsr     a
 B5C6  4A                                  lsr     a
 B5C7  85                                  sta     $55
 B5C8  55
 B5C9  BD                                  lda     enemy_type_info,x
 B5CA  83 02
 B5CC  29                                  and     #$07
 B5CD  07
 B5CE  0A                                  asl     a
 B5CF  20                                  jsr     DrawEnemyByType
 B5D0  D7 B5
 B5D2  C6          locb5d2:                dec     $37
 B5D3  37
 B5D4  10                                  bpl     locb5b6
 B5D5  E0
  [ =B5B6 ]
 B5D6  60          locb5d6:                rts

                   ; Look up the address in the EnemyDrawVec, push it onto 
                   the stack, and do an RTS
                   ; to "jump" to that address

 B5D7  A8          DrawEnemyByType:        tay                             
                       ; Twice enemy type val (hence 0 = flipper, 2 = 
                   pulsar, etc)
 B5D8  B9                                  lda     EnemyDrawVecs+1,y
 B5D9  E2 B5
 B5DB  48                                  pha
 B5DC  B9                                  lda     EnemyDrawVecs,y
 B5DD  E1 B5
 B5DF  48                                  pha
 B5E0  60                                  rts

                   ; Indexed by enemy type.  Draws enemy.

 B5E1  EA B5       EnemyDrawVecs:          .word   DrawFlipper  - 1        
                       ; flipper               
 B5E3  1A B7                               .word   DrawPulsar   - 1        
                       ; pulsar
 B5E5  0E B6                               .word   DrawTanker   - 1        
                       ; tanker
 B5E7  21 B6                               .word   DrawSpiker   - 1        
                       ; spiker
 B5E9  9A B6                               .word   DrawFuseball - 1        
                       ; fuseball

                   ; Code to draw a flipper.

 B5EB  A9          DrawFlipper:            lda     #$03
 B5EC  03
 B5ED  85                                  sta     curcolor
 B5EE  9E
 B5EF  BD                                  lda     enemy_type_info,x
 B5F0  83 02
 B5F2  30                                  bmi     locb602
 B5F3  0E
  [ =B602 ]
 B5F4  BC                                  ldy     enemy_seg,x
 B5F5  B9 02
 B5F7  A6                                  ldx     $55
 B5F8  55
 B5F9  BD                                  lda     locb60b,x
 B5FA  0B B6
 B5FC  20                                  jsr     draw_linegfx
 B5FD  A0 BD
 B5FF  B8                                  clv
 B600  50                                  bvc     +
 B601  08
  [ =B60A ]
 B602  20          locb602:                jsr     locb634
 B603  34 B6
 B605  A0                                  ldy     #$00
 B606  00
 B607  20                                  jsr     locbdcb
 B608  CB BD
 B60A  60          +                       rts

                   ; Graphic numbers for flippers.  Indexed by $18 bits of 
                   enemy_type_info value.

 B60B  00          locb60b:                .byte   $00                     
                       ; BUGBUG a table of zeros in ROM seems a tad odd to 
                   me.  I bet there used to
 B60C  00                                  .byte   $00                     
                       ;        be animation frames for flippers but they 
                   got removed at some point
 B60D  00                                  .byte   $00
 B60E  00                                  .byte   $00

                   ; Code to draw a tanker.

 B60F  BD          DrawTanker:             lda     active_enemy_info,x
 B610  8A 02
 B612  29                                  and     #$03
 B613  03
 B614  A8                                  tay
 B615  B9                                  lda     TankerIconTable,y
 B616  1E B6
 B618  BC                                  ldy     enemy_seg,x
 B619  B9 02
 B61B  4C                                  jmp     graphic_at_mid
 B61C  FD BC

                   ; Graphic number for tankers.  Indexed by contents 
                   value (active_enemy_info bits $03).

 B61E  1A          TankerIconTable:        .byte   $1a                     
                       ; Table of graphics that show contents of tanker
 B61F  1A                                  .byte   $1a                     
                       ; Split into two flipper center icon
 B620  4A                                  .byte   $4a                     
                       ; Split into two pulsars center icon
 B621  4C                                  .byte   $4c                     
                       ; Split into two fuseballs center icona

                   ; Code to draw a spiker.

 B622  BC          DrawSpiker:             ldy     enemy_seg,x
 B623  B9 02
 B625  A5                                  lda     timectr
 B626  03
 B627  29                                  and     #$03
 B628  03
 B629  0A                                  asl     a
 B62A  18                                  clc
 B62B  69                                  adc     #$12
 B62C  12
 B62D  4C                                  jmp     graphic_at_mid
 B62E  FD BC

                   ; Not used; a table version of the value computed by 
                   $b629-$b62b.

                   .if !OPTIMIZE
 B630  12                                  .byte   $12
 B631  14                                  .byte   $14
 B632  16                                  .byte   $16
 B633  18                                  .byte   $18
                   .endif

 B634  A5          locb634:                lda     $57
 B635  57
 B636  85                                  sta     $2f
 B637  2F
 B638  BC                                  ldy     enemy_seg,x
 B639  B9 02
 B63B  B9                                  lda     tube_x,y
 B63C  CE 03
 B63E  85                                  sta     $56
 B63F  56
 B640  B9                                  lda     tube_y,y
 B641  DE 03
 B643  85                                  sta     $58
 B644  58
 B645  BD                                  lda     more_enemy_info,x
 B646  CC 02
 B648  29                                  and     #$0f
 B649  0F
 B64A  A8                                  tay
 B64B  A5                                  lda     $56
 B64C  56
 B64D  49                                  eor     #$80
 B64E  80
 B64F  18                                  clc
 B650  79                                  adc     locb68b,y
 B651  8B B6
 B653  50                                  bvc     locb65e
 B654  09
  [ =B65E ]
 B655  10                                  bpl     locb65c
 B656  05
  [ =B65C ]
 B657  A9                                  lda     #$7f
 B658  7F
 B659  B8                                  clv
 B65A  50                                  bvc     locb65e
 B65B  02
  [ =B65E ]
 B65C  A9          locb65c:                lda     #$80
 B65D  80
 B65E  49          locb65e:                eor     #$80
 B65F  80
 B660  85                                  sta     $2e
 B661  2E
 B662  A5                                  lda     $58
 B663  58
 B664  49                                  eor     #$80
 B665  80
 B666  18                                  clc
 B667  79                                  adc     locb687,y
 B668  87 B6
 B66A  50                                  bvc     locb675
 B66B  09
  [ =B675 ]
 B66C  10                                  bpl     locb673
 B66D  05
  [ =B673 ]
 B66E  A9                                  lda     #$7f
 B66F  7F
 B670  B8                                  clv
 B671  50                                  bvc     locb675
 B672  02
  [ =B675 ]
 B673  A9          locb673:                lda     #$80
 B674  80
 B675  49          locb675:                eor     #$80
 B676  80
 B677  85                                  sta     $30
 B678  30
 B679  AC                                  ldy     curtube
 B67A  12 01
 B67C  B9                                  lda     lev_fscale,y
 B67D  DC BC
 B67F  85                                  sta     fscale
 B680  59
 B681  B9                                  lda     lev_fscale2,y
 B682  EC BC
 B684  85                                  sta     fscale+1
 B685  5A
 B686  60                                  rts

                   ; Used - apparently overlappingly - at $b667 and $b68b.

                   ; Maybe this is a sine wave, and the overlapping is 
                   sin-vs-cos?
 B687  00          locb687:                .byte   $00
 B688  10                                  .byte   $10
 B689  1F                                  .byte   $1f
 B68A  28                                  .byte   $28
 B68B  2C          locb68b:                .byte   $2c
 B68C  28                                  .byte   $28
 B68D  1F                                  .byte   $1f
 B68E  10                                  .byte   $10
 B68F  00                                  .byte   $00
 B690  F0                                  .byte   $f0
 B691  E1                                  .byte   $e1
 B692  D8                                  .byte   $d8
 B693  D4                                  .byte   $d4
 B694  D8                                  .byte   $d8
 B695  E1                                  .byte   $e1
 B696  F0                                  .byte   $f0
 B697  00                                  .byte   $00
 B698  10                                  .byte   $10
 B699  1F                                  .byte   $1f
 B69A  28                                  .byte   $28

                   ; Code to draw a fuseball.

 B69B  BD          DrawFuseball:           lda     enemy_along,x
 B69C  DF 02
 B69E  85                                  sta     $57
 B69F  57
 B6A0  BC                                  ldy     enemy_seg,x
 B6A1  B9 02
 B6A3  B9                                  lda     tube_x,y
 B6A4  CE 03
 B6A6  85                                  sta     $56
 B6A7  56
 B6A8  B9                                  lda     tube_y,y
 B6A9  DE 03
 B6AB  85                                  sta     $58
 B6AC  58
 B6AD  BD                                  lda     more_enemy_info,x
 B6AE  CC 02
 B6B0  10                                  bpl     locb6d5
 B6B1  23
  [ =B6D5 ]
 B6B2  98                                  tya
 B6B3  18                                  clc
 B6B4  69                                  adc     #$01
 B6B5  01
 B6B6  29                                  and     #$0f
 B6B7  0F
 B6B8  A8                                  tay
 B6B9  B9                                  lda     tube_x,y
 B6BA  CE 03
 B6BC  38                                  sec
 B6BD  E5                                  sbc     $56
 B6BE  56
 B6BF  20                                  jsr     locb6fa
 B6C0  FA B6
 B6C2  18                                  clc
 B6C3  65                                  adc     $56
 B6C4  56
 B6C5  85                                  sta     $56
 B6C6  56
 B6C7  B9                                  lda     tube_y,y
 B6C8  DE 03
 B6CA  38                                  sec
 B6CB  E5                                  sbc     $58
 B6CC  58
 B6CD  20                                  jsr     locb6fa
 B6CE  FA B6
 B6D0  18                                  clc
 B6D1  65                                  adc     $58
 B6D2  58
 B6D3  85                                  sta     $58
 B6D4  58
 B6D5  20          locb6d5:                jsr     locc098
 B6D6  98 C0
 B6D8  A2                                  ldx     #$61
 B6D9  61
 B6DA  20                                  jsr     vapp_to_X_
 B6DB  65 C7
 B6DD  A9                                  lda     #$00
 B6DE  00
 B6DF  85                                  sta     $a9
 B6E0  A9
 B6E1  20                                  jsr     locbd3e
 B6E2  3E BD
 B6E4  84                                  sty     $a9
 B6E5  A9
 B6E6  A5                                  lda     timectr
 B6E7  03
 B6E8  29                                  and     #$03
 B6E9  03
 B6EA  0A                                  asl     a
 B6EB  18                                  clc
 B6EC  69                                  adc     #$4e
 B6ED  4E
 B6EE  A8                                  tay
 B6EF  BE                                  ldx     graphic_table+1,y
 B6F0  C9 CE
 B6F2  B9                                  lda     graphic_table,y
 B6F3  C8 CE
 B6F5  A4                                  ldy     $a9
 B6F6  A9
 B6F7  4C                                  jmp     vapp_A_X
 B6F8  59 DF
 B6FA  85          locb6fa:                sta     $29
 B6FB  29
 B6FC  BD                                  lda     more_enemy_info,x
 B6FD  CC 02
 B6FF  29                                  and     #$07
 B700  07
 B701  85                                  sta     $2c
 B702  2C
 B703  86                                  stx     $2b
 B704  2B
 B705  A2                                  ldx     #$02
 B706  02
 B707  A9                                  lda     #$00
 B708  00
 B709  46          locb709:                lsr     $2c
 B70A  2C
 B70B  90                                  bcc     locb710
 B70C  03
  [ =B710 ]
 B70D  18                                  clc
 B70E  65                                  adc     $29
 B70F  29
 B710  0A          locb710:                asl     a
 B711  08                                  php
 B712  6A                                  ror     a
 B713  28                                  plp
 B714  6A                                  ror     a
 B715  CA                                  dex
 B716  10                                  bpl     locb709
 B717  F1
  [ =B709 ]
 B718  A6                                  ldx     $2b
 B719  2B
 B71A  60                                  rts

                   ; Code to draw a pulsar.

 B71B  A9          DrawPulsar:             lda     #$04
 B71C  04
 B71D  AC                                  ldy     pulsing
 B71E  48 01
 B720  30                                  bmi     locb724
 B721  02
  [ =B724 ]
 B722  A9                                  lda     #$00
 B723  00
 B724  85          locb724:                sta     curcolor
 B725  9E
 B726  AD                                  lda     pulsing
 B727  48 01
 B729  18                                  clc
 B72A  69                                  adc     #$40
 B72B  40
 B72C  4A                                  lsr     a
 B72D  4A                                  lsr     a
 B72E  4A                                  lsr     a
 B72F  4A                                  lsr     a
 B730  C9                                  cmp     #$05
 B731  05
 B732  90                                  bcc     locb736
 B733  02
  [ =B736 ]
 B734  A9                                  lda     #$00
 B735  00
 B736  A8          locb736:                tay
 B737  B9                                  lda     PulsarAnimFrames,y
 B738  55 B7
 B73A  85                                  sta     $29
 B73B  29
 B73C  BD                                  lda     enemy_type_info,x
 B73D  83 02
 B73F  30                                  bmi     locb74c
 B740  0B
  [ =B74C ]
 B741  BC                                  ldy     enemy_seg,x
 B742  B9 02
 B744  A5                                  lda     $29
 B745  29
 B746  20                                  jsr     draw_linegfx
 B747  A0 BD
 B749  B8                                  clv
 B74A  50                                  bvc     locb754
 B74B  08
  [ =B754 ]
 B74C  20          locb74c:                jsr     locb634
 B74D  34 B6
 B74F  A4                                  ldy     $29
 B750  29
 B751  20                                  jsr     locbdcb
 B752  CB BD
 B754  60          locb754:                rts

 B755  0D          PulsarAnimFrames:       .byte   $0d
 B756  0C                                  .byte   $0c
 B757  0B                                  .byte   $0b
 B758  0A                                  .byte   $0a
 B759  09                                  .byte   $09
 B75A  09                                  .byte   $09

 B75B  A2          draw_shots:             ldx     #MAX_TOTAL_SHOTS-1
 B75C  0B
 B75D  86                                  stx     $37
 B75E  37
 B75F  A6          locb75f:                ldx     $37
 B760  37
 B761  BD                                  lda     PlayerShotPositions,x
 B762  D3 02
 B764  F0                                  beq     locb781
 B765  1B
  [ =B781 ]
 B766  85                                  sta     $57
 B767  57
 B768  85                                  sta     $2f
 B769  2F
 B76A  E0                                  cpx     #MAX_PLAYER_SHOTS       
                                       ; player or enemy shot?
 B76B  08
 B76C  BC                                  ldy     PlayerShotSegments,x
 B76D  AD 02
 B76F  B0                                  bcs     locb776
 B770  05
  [ =B776 ]
 B771  A9                                  lda     #MAX_PLAYER_SHOTS       
                                       ; BUGBUG was #$08 but is that the 
                   player shot limit for sure?
 B772  08
 B773  B8                                  clv
 B774  50                                  bvc     locb77e
 B775  08
  [ =B77E ]
 B776  A5          locb776:                lda     timectr
 B777  03
 B778  0A                                  asl     a
 B779  29                                  and     #$06
 B77A  06
 B77B  18                                  clc
 B77C  69                                  adc     #$20
 B77D  20
 B77E  20          locb77e:                jsr     graphic_at_mid
 B77F  FD BC
 B781  C6          locb781:                dec     $37
 B782  37
 B783  10                                  bpl     locb75f
 B784  DA
  [ =B75F ]
 B785  A0                                  ldy     #$04
 B786  04
 B787  AD                                  lda     PlayerShotCount
 B788  35 01
 B78A  C9                                  cmp     #MAX_PLAYER_SHOTS-2     
                                       ; BUGBUG was #$06 but I'd expect 
                   #$07
 B78B  06
 B78C  90                                  bcc     locb796
 B78D  08
  [ =B796 ]
 B78E  A0                                  ldy     #MAX_TOTAL_SHOTS-1
 B78F  0B
 B790  C9                                  cmp     #MAX_PLAYER_SHOTS
 B791  08
 B792  90                                  bcc     locb796
 B793  02
  [ =B796 ]
 B794  A0                                  ldy     #$0c
 B795  0C
 B796  8C          locb796:                sty     $0808
 B797  08 08
 B799  60                                  rts

 B79A  A0          draw_explosions:        ldy     #$00
 B79B  00
 B79C  84                                  sty     curcolor
 B79D  9E
 B79E  A2                                  ldx     #$07
 B79F  07
 B7A0  86                                  stx     $37
 B7A1  37
 B7A2  A6          locb7a2:                ldx     $37
 B7A3  37
 B7A4  BD                                  lda     $030a,x
 B7A5  0A 03
 B7A7  F0                                  beq     locb7d2
 B7A8  29
  [ =B7D2 ]
 B7A9  85                                  sta     $57
 B7AA  57
 B7AB  BD                                  lda     $02fa,x
 B7AC  FA 02
 B7AE  85                                  sta     $29
 B7AF  29
 B7B0  BC                                  ldy     $0302,x
 B7B1  02 03
 B7B3  C0                                  cpy     #$01
 B7B4  01
 B7B5  D0                                  bne     locb7bd
 B7B6  06
  [ =B7BD ]
 B7B7  20                                  jsr     vapp_mid_graphic
 B7B8  EB B7
 B7BA  B8                                  clv
 B7BB  50                                  bvc     locb7d2
 B7BC  15
  [ =B7D2 ]
 B7BD  BD          locb7bd:                lda     $0312,x
 B7BE  12 03
 B7C0  4A                                  lsr     a
 B7C1  29                                  and     #$fe
 B7C2  FE
 B7C3  C0                                  cpy     #$02
 B7C4  02
 B7C5  90                                  bcc     locb7c9
 B7C6  02
  [ =B7C9 ]
 B7C7  A9                                  lda     #$00
 B7C8  00
 B7C9  18          locb7c9:                clc
 B7CA  79                                  adc     locb7e5,y
 B7CB  E5 B7
 B7CD  A4                                  ldy     $29
 B7CE  29
 B7CF  20                                  jsr     graphic_at_mid
 B7D0  FD BC
 B7D2  C6          locb7d2:                dec     $37
 B7D3  37
 B7D4  10                                  bpl     locb7a2
 B7D5  CC
  [ =B7A2 ]
 B7D6  AD                                  lda     $0720
 B7D7  20 07
 B7D9  F0                                  beq     locb7e4
 B7DA  09
  [ =B7E4 ]
 B7DB  A5                                  lda     curlevel
 B7DC  9F
 B7DD  C9                                  cmp     #$0d
 B7DE  0D
 B7DF  90                                  bcc     locb7e4
 B7E0  03
  [ =B7E4 ]
 B7E1  8D                                  sta     $01ff
 B7E2  FF 01
 B7E4  60          locb7e4:                rts

                   ; Table of graphics.  See $b7ca

 B7E5  00          locb7e5:                .byte   $00
 B7E6  00                                  .byte   $00
 B7E7  5A                                  .byte   $5a
 B7E8  58                                  .byte   $58

 B7E9  56                                  lsr     $1c,x
 B7EA  1C
 B7EB  A4          vapp_mid_graphic:       ldy     $29
 B7EC  29
 B7ED  B9                                  lda     mid_x,y
 B7EE  35 04
 B7F0  85                                  sta     $56
 B7F1  56
 B7F2  B9                                  lda     mid_y,y
 B7F3  45 04
 B7F5  85                                  sta     $58
 B7F6  58
 B7F7  20                                  jsr     locc098
 B7F8  98 C0
 B7FA  A2                                  ldx     #$61
 B7FB  61
 B7FC  20                                  jsr     vapp_to_X_
 B7FD  65 C7
 B7FF  AE                                  ldx     $013b
 B800  3B 01
 B802  CE                                  dec     $013c
 B803  3C 01
 B805  D0                                  bne     locb811
 B806  0A
  [ =B811 ]
 B807  E8                                  inx
 B808  8E                                  stx     $013b
 B809  3B 01
 B80B  BD                                  lda     locb82a,x
 B80C  2A B8
 B80E  8D                                  sta     $013c
 B80F  3C 01
 B811  BC          locb811:                ldy     locb83d,x
 B812  3D B8
 B814  30                                  bmi     locb819
 B815  03
  [ =B819 ]
 B816  20                                  jsr     locb84e
 B817  4E B8
 B819  AD          locb819:                lda     $013b
 B81A  3B 01
 B81C  0A                                  asl     a
 B81D  18                                  clc
 B81E  69                                  adc     #$28                    
                   ; hit-by-shot explosion
 B81F  28
 B820  A8                                  tay
 B821  BE                                  ldx     graphic_table+1,y
 B822  C9 CE
 B824  B9                                  lda     graphic_table,y
 B825  C8 CE
 B827  4C                                  jmp     vapp_A_X_Y_0
 B828  57 DF

 B82A  02          locb82a:                .byte   $02
 B82B  02                                  .byte   $02
 B82C  02                                  .byte   $02
 B82D  02                                  .byte   $02
 B82E  02                                  .byte   $02
 B82F  04                                  .byte   $04
 B830  03                                  .byte   $03
 B831  02                                  .byte   $02
 B832  01                                  .byte   $01
 B833  20                                  .byte   $20
 B834  03                                  .byte   $03
 B835  03                                  .byte   $03
 B836  03                                  .byte   $03
 B837  03                                  .byte   $03
 B838  03                                  .byte   $03
 B839  03                                  .byte   $03
 B83A  03                                  .byte   $03
 B83B  3B                                  .byte   $3b
 B83C  B8                                  .byte   $b8
 B83D  00          locb83d:                .byte   $00
 B83E  02                                  .byte   $02
 B83F  02                                  .byte   $02
 B840  02                                  .byte   $02
 B841  02                                  .byte   $02
 B842  02                                  .byte   $02
 B843  02                                  .byte   $02
 B844  02                                  .byte   $02
 B845  04                                  .byte   $04
 B846  06                                  .byte   $06
 B847  FF                                  .byte   $ff
 B848  FF                                  .byte   $ff
 B849  FF                                  .byte   $ff
 B84A  FF                                  .byte   $ff
 B84B  FF                                  .byte   $ff
 B84C  FF                                  .byte   $ff
 B84D  FF                                  .byte   $ff

 B84E  B9          locb84e:                lda     locb857+1,y
 B84F  58 B8
 B851  48                                  pha
 B852  B9                                  lda     locb857,y
 B853  57 B8
 B855  48                                  pha
 B856  60                                  rts

 B857  5E B8       locb857:                .word   locb85f-1           ; 
                   jump table for following functions
 B859  74 B8                               .word   locb875-1
 B85B  87 B8                               .word   locb888-1
 B85D  95 B8                               .word   locb896-1

 B85F  A9          locb85f:                lda     #$0c
 B860  0C
 B861  8D                                  sta     $080b
 B862  0B 08
 B864  85                                  sta     $24
 B865  24
 B866  A9                                  lda     #$04
 B867  04
 B868  8D                                  sta     $080a
 B869  0A 08
 B86B  85                                  sta     $23
 B86C  23
 B86D  A9                                  lda     #$00
 B86E  00
 B86F  85                                  sta     $22
 B870  22
 B871  8D                                  sta     $0809
 B872  09 08
 B874  60                                  rts

 B875  A4          locb875:                ldy     $22
 B876  22
 B877  A2                                  ldx     #$02
 B878  02
 B879  B5          -                       lda     $22,x
 B87A  22
 B87B  48                                  pha
 B87C  94                                  sty     $22,x
 B87D  22
 B87E  98                                  tya
 B87F  9D                                  sta     $0809,x
 B880  09 08
 B882  68                                  pla
 B883  A8                                  tay
 B884  CA                                  dex
 B885  10                                  bpl     -
 B886  F2
  [ =B879 ]
 B887  60                                  rts

 B888  20          locb888:                jsr     SetLevelColors
 B889  96 C1
 B88B  A9                                  lda     #$7f
 B88C  7F
 B88D  8D                                  sta     $0139
 B88E  39 01
 B890  A9                                  lda     #$04
 B891  04
 B892  8D                                  sta     $013a
 B893  3A 01
 B895  60                                  rts

 B896  AD          locb896:                lda     $0139
 B897  39 01
 B899  8D                                  sta     $2ffc
 B89A  FC 2F
 B89C  AD                                  lda     $013a
 B89D  3A 01
 B89F  09                                  ora     #$70
 B8A0  70
 B8A1  8D                                  sta     $2ffd
 B8A2  FD 2F
 B8A4  A9                                  lda     #$c0
 B8A5  C0
 B8A6  8D                                  sta     $2fff
 B8A7  FF 2F
 B8A9  AD                                  lda     $0139
 B8AA  39 01
 B8AC  38                                  sec
 B8AD  E9                                  sbc     #$20
 B8AE  20
 B8AF  10                                  bpl     +
 B8B0  05
  [ =B8B6 ]
 B8B1  29                                  and     #$7f
 B8B2  7F
 B8B3  CE                                  dec     $013a
 B8B4  3A 01
 B8B6  8D          +                       sta     $0139
 B8B7  39 01
 B8B9  60                                  rts

                   ; $3ff2 = code to move to extreme corners of the screen,
                    not drawing.

 B8BA  A9          locb8ba:                lda     #>VECTOR_DATA_1
 B8BB  3F
 B8BC  A2                                  ldx     #<VECTOR_DATA_1
 B8BD  F2
 B8BE  20                                  jsr     vapp_vjsr_AX
 B8BF  39 DF
 B8C1  A9                                  lda     #$00
 B8C2  00
 B8C3  85                                  sta     $6a
 B8C4  6A
 B8C5  85                                  sta     $6b
 B8C6  6B
 B8C7  85                                  sta     $6c
 B8C8  6C
 B8C9  85                                  sta     $6d
 B8CA  6D
 B8CB  8D                                  sta     player_along
 B8CC  02 02
 B8CE  85                                  sta     $68
 B8CF  68
 B8D0  85                                  sta     $69
 B8D1  69
 B8D2  A9                                  lda     #$e0
 B8D3  E0
 B8D4  85                                  sta     $5f
 B8D5  5F
 B8D6  A9                                  lda     #$ff
 B8D7  FF
 B8D8  85                                  sta     $5b
 B8D9  5B
 B8DA  20                                  jsr     locb967
 B8DB  67 B9
 B8DD  85                                  sta     $77
 B8DE  77
 B8DF  86                                  stx     $76
 B8E0  76
 B8E1  A2                                  ldx     #$0f
 B8E2  0F
 B8E3  86                                  stx     $37
 B8E4  37
 B8E5  A6          locb8e5:                ldx     $37
 B8E6  37
 B8E7  BD                                  lda     enemy_type_info,x
 B8E8  83 02
 B8EA  F0                                  beq     locb935
 B8EB  49
  [ =B935 ]
 B8EC  85                                  sta     $57
 B8ED  57
 B8EE  BD                                  lda     $0263,x
 B8EF  63 02
 B8F1  85                                  sta     $56
 B8F2  56
 B8F3  BD                                  lda     $02a3,x
 B8F4  A3 02
 B8F6  85                                  sta     $58
 B8F7  58
 B8F8  20                                  jsr     locc098
 B8F9  98 C0
 B8FB  A9                                  lda     #$00
 B8FC  00
 B8FD  85                                  sta     draw_z
 B8FE  73
 B8FF  20                                  jsr     locb944
 B900  44 B9
 B902  20                                  jsr     locc3ba
 B903  BA C3
 B905  A9                                  lda     #$a0
 B906  A0
 B907  20                                  jsr     locb56a
 B908  6A B5
 B90A  20                                  jsr     locb944
 B90B  44 B9
 B90D  A2                                  ldx     #$61
 B90E  61
 B90F  20                                  jsr     locc772
 B910  72 C7
 B912  20                                  jsr     locb955
 B913  55 B9
 B915  20                                  jsr     vapp_scale_A_Y
 B916  6C DF
 B918  A5                                  lda     $37
 B919  37
 B91A  29                                  and     #$07
 B91B  07
 B91C  C9                                  cmp     #$07
 B91D  07
 B91E  D0                                  bne     locb922
 B91F  02
  [ =B922 ]
 B920  A9                                  lda     #$00
 B921  00
 B922  A8          locb922:                tay
 B923  84                                  sty     curcolor
 B924  9E
 B925  A9                                  lda     #$08
 B926  08
 B927  20                                  jsr     vapp_sclstat_A_Y
 B928  4C DF
 B92A  A9                                  lda     #$00
 B92B  00
 B92C  20                                  jsr     vapp_sclstat_A_73
 B92D  4A DF
 B92F  20                                  jsr     locb967
 B930  67 B9
 B932  20                                  jsr     vapp_vjsr_AX
 B933  39 DF
 B935  C6          locb935:                dec     $37
 B936  37
 B937  10                                  bpl     locb8e5
 B938  AC
  [ =B8E5 ]
 B939  20                                  jsr     locb944
 B93A  44 B9
 B93C  A9                                  lda     #$01
 B93D  01
 B93E  20                                  jsr     vapp_scale_A_0
 B93F  6A DF
 B941  20                                  jsr     vapp_rts
 B942  09 DF
 B944  A6          locb944:                ldx     vidptr_l
 B945  74
 B946  A4                                  ldy     vidptr_h
 B947  75
 B948  A5                                  lda     $76
 B949  76
 B94A  85                                  sta     vidptr_l
 B94B  74
 B94C  86                                  stx     $76
 B94D  76
 B94E  A5                                  lda     $77
 B94F  77
 B950  85                                  sta     vidptr_h
 B951  75
 B952  84                                  sty     $77
 B953  77
 B954  60                                  rts
 B955  A5          locb955:                lda     $57
 B956  57
 B957  4A                                  lsr     a
 B958  4A                                  lsr     a
 B959  4A                                  lsr     a
 B95A  4A                                  lsr     a
 B95B  A0                                  ldy     #$00
 B95C  00
 B95D  C8          locb95d:                iny
 B95E  4A                                  lsr     a
 B95F  D0                                  bne     locb95d
 B960  FC
  [ =B95D ]
 B961  18                                  clc
 B962  69                                  adc     #$02
 B963  02
 B964  A0                                  ldy     #$00
 B965  00
 B966  60                                  rts
 B967  AD          locb967:                lda     dblbuf_flg
 B968  15 04
 B96A  F0                                  beq     locb975
 B96B  09
  [ =B975 ]
 B96C  AD                                  lda     locce6e+1
 B96D  6F CE
 B96F  AE                                  ldx     locce6e
 B970  6E CE
 B972  B8                                  clv
 B973  50                                  bvc     locb97b
 B974  06
  [ =B97B ]
 B975  AD          locb975:                lda     locce86+1
 B976  87 CE
 B978  AE                                  ldx     locce86
 B979  86 CE
 B97B  60          locb97b:                rts

                   ; Two-dimensional arrays are indexed by level number 
                   first: x[L][P], etc.
                   ;
                   ; x,y:                coordinates of points
                   ; angle:              angles of sectors (0-15 
                   represents 0-360 degrees)
                   ; remap:              order levels are encountered in
                   ; scale:              (reciprocal of) scale of level
                   ; y3d:                3-D Y offset - "camera height"
                   ; y2d,y2db:           2-D Y offset - signed; y2db is 
                   high.byte, y2d low
                   ; open:               $00 if level is closed, $ff if 
                   open
                   ; fscale,fscale2:     (reciprocal of) flipper scale - 
                   fscale2<<7 | fscale

 B97C  F0          lev_x:                  .byte   $F0,$E7,$CF,$AA,$80,$56,
                   $31,$19,$10,$19,$31,$56,$80,$AA,$CF,$E7 ; x[16][16]
 B97D  E7
 B97E  CF
 B97F  AA
 B980  80
 B981  56
 B982  31
 B983  19
 B984  10
 B985  19
 B986  31
 B987  56
 B988  80
 B989  AA
 B98A  CF
 B98B  E7
 B98C  F0                                  .byte   $F0,$F0,$F0,$B8,$80,$48,
                   $10,$10,$10,$10,$10,$48,$80,$B8,$F0,$F0
 B98D  F0
 B98E  F0
 B98F  B8
 B990  80
 B991  48
 B992  10
 B993  10
 B994  10
 B995  10
 B996  10
 B997  48
 B998  80
 B999  B8
 B99A  F0
 B99B  F0
 B99C  F0                                  .byte   $F0,$F0,$B8,$B8,$80,$48,
                   $48,$10,$10,$10,$48,$48,$80,$B8,$B8,$F0
 B99D  F0
 B99E  B8
 B99F  B8
 B9A0  80
 B9A1  48
 B9A2  48
 B9A3  10
 B9A4  10
 B9A5  10
 B9A6  48
 B9A7  48
 B9A8  80
 B9A9  B8
 B9AA  B8
 B9AB  F0
 B9AC  EC                                  .byte   $EC,$D5,$B1,$90,$70,$4F,
                   $2B,$14,$14,$2B,$4F,$70,$90,$B1,$D5,$EC
 B9AD  D5
 B9AE  B1
 B9AF  90
 B9B0  70
 B9B1  4F
 B9B2  2B
 B9B3  14
 B9B4  14
 B9B5  2B
 B9B6  4F
 B9B7  70
 B9B8  90
 B9B9  B1
 B9BA  D5
 B9BB  EC
 B9BC  F0                                  .byte   $F0,$C0,$A0,$94,$6C,$60,
                   $40,$10,$10,$40,$60,$6C,$94,$A0,$C0,$F0
 B9BD  C0
 B9BE  A0
 B9BF  94
 B9C0  6C
 B9C1  60
 B9C2  40
 B9C3  10
 B9C4  10
 B9C5  40
 B9C6  60
 B9C7  6C
 B9C8  94
 B9C9  A0
 B9CA  C0
 B9CB  F0
 B9CC  D9                                  .byte   $D9,$C2,$AC,$97,$80,$69,
                   $52,$3C,$27,$10,$35,$5A,$80,$A6,$CA,$F0
 B9CD  C2
 B9CE  AC
 B9CF  97
 B9D0  80
 B9D1  69
 B9D2  52
 B9D3  3C
 B9D4  27
 B9D5  10
 B9D6  35
 B9D7  5A
 B9D8  80
 B9D9  A6
 B9DA  CA
 B9DB  F0
 B9DC  EA                                  .byte   $EA,$E0,$9C,$80,$64,$20,
                   $16,$50,$16,$20,$64,$80,$9C,$E0,$EA,$B0
 B9DD  E0
 B9DE  9C
 B9DF  80
 B9E0  64
 B9E1  20
 B9E2  16
 B9E3  50
 B9E4  16
 B9E5  20
 B9E6  64
 B9E7  80
 B9E8  9C
 B9E9  E0
 B9EA  EA
 B9EB  B0
 B9EC  10                                  .byte   $10,$1E,$2C,$3A,$48,$56,
                   $64,$70,$90,$9E,$AC,$BA,$C8,$D6,$E4,$F0
 B9ED  1E
 B9EE  2C
 B9EF  3A
 B9F0  48
 B9F1  56
 B9F2  64
 B9F3  70
 B9F4  90
 B9F5  9E
 B9F6  AC
 B9F7  BA
 B9F8  C8
 B9F9  D6
 B9FA  E4
 B9FB  F0
 B9FC  10                                  .byte   $10,$1E,$2D,$3C,$4B,$5A,
                   $69,$78,$87,$96,$A5,$B4,$C3,$D2,$E1,$F0
 B9FD  1E
 B9FE  2D
 B9FF  3C
 BA00  4B
 BA01  5A
 BA02  69
 BA03  78
 BA04  87
 BA05  96
 BA06  A5
 BA07  B4
 BA08  C3
 BA09  D2
 BA0A  E1
 BA0B  F0
 BA0C  10                                  .byte   $10,$10,$10,$10,$16,$29,
                   $46,$69,$97,$BA,$D7,$EA,$F0,$F0,$F0,$F0
 BA0D  10
 BA0E  10
 BA0F  10
 BA10  16
 BA11  29
 BA12  46
 BA13  69
 BA14  97
 BA15  BA
 BA16  D7
 BA17  EA
 BA18  F0
 BA19  F0
 BA1A  F0
 BA1B  F0
 BA1C  10                                  .byte   $10,$24,$30,$36,$3E,$49,
                   $5A,$75,$94,$A4,$AC,$BA,$DA,$E2,$EA,$F0
 BA1D  24
 BA1E  30
 BA1F  36
 BA20  3E
 BA21  49
 BA22  5A
 BA23  75
 BA24  94
 BA25  A4
 BA26  AC
 BA27  BA
 BA28  DA
 BA29  E2
 BA2A  EA
 BA2B  F0
 BA2C  80                                  .byte   $80,$70,$48,$20,$10,$20,
                   $48,$70,$80,$90,$B8,$E0,$F0,$E0,$B8,$90
 BA2D  70
 BA2E  48
 BA2F  20
 BA30  10
 BA31  20
 BA32  48
 BA33  70
 BA34  80
 BA35  90
 BA36  B8
 BA37  E0
 BA38  F0
 BA39  E0
 BA3A  B8
 BA3B  90
 BA3C  DA                                  .byte   $DA,$A4,$87,$80,$79,$5C,
                   $26,$10,$10,$20,$48,$80,$B8,$E0,$F0,$F0
 BA3D  A4
 BA3E  87
 BA3F  80
 BA40  79
 BA41  5C
 BA42  26
 BA43  10
 BA44  10
 BA45  20
 BA46  48
 BA47  80
 BA48  B8
 BA49  E0
 BA4A  F0
 BA4B  F0
 BA4C  10                                  .byte   $10,$10,$30,$30,$50,$50,
                   $70,$70,$90,$90,$B0,$B0,$D0,$D0,$F0,$F0
 BA4D  10
 BA4E  30
 BA4F  30
 BA50  50
 BA51  50
 BA52  70
 BA53  70
 BA54  90
 BA55  90
 BA56  B0
 BA57  B0
 BA58  D0
 BA59  D0
 BA5A  F0
 BA5B  F0
 BA5C  B0                                  .byte   $B0,$80,$50,$47,$18,$30,
                   $18,$47,$50,$80,$B0,$B9,$E8,$D4,$E8,$B9
 BA5D  80
 BA5E  50
 BA5F  47
 BA60  18
 BA61  30
 BA62  18
 BA63  47
 BA64  50
 BA65  80
 BA66  B0
 BA67  B9
 BA68  E8
 BA69  D4
 BA6A  E8
 BA6B  B9
 BA6C  10                                  .byte   $10,$1E,$21,$28,$3C,$55,
                   $66,$73,$8D,$9A,$AB,$C4,$D8,$DF,$E2,$F0
 BA6D  1E
 BA6E  21
 BA6F  28
 BA70  3C
 BA71  55
 BA72  66
 BA73  73
 BA74  8D
 BA75  9A
 BA76  AB
 BA77  C4
 BA78  D8
 BA79  DF
 BA7A  E2
 BA7B  F0

 BA7C  80          lev_y:                  .byte   $80,$AA,$CF,$E7,$F0,$E7,
                   $CF,$AA,$80,$56,$31,$19,$10,$19,$31,$56 ; y[16][16]
 BA7D  AA
 BA7E  CF
 BA7F  E7
 BA80  F0
 BA81  E7
 BA82  CF
 BA83  AA
 BA84  80
 BA85  56
 BA86  31
 BA87  19
 BA88  10
 BA89  19
 BA8A  31
 BA8B  56
 BA8C  80                                  .byte   $80,$B8,$F0,$F0,$F0,$F0,
                   $F0,$B8,$80,$48,$10,$10,$10,$10,$10,$48
 BA8D  B8
 BA8E  F0
 BA8F  F0
 BA90  F0
 BA91  F0
 BA92  F0
 BA93  B8
 BA94  80
 BA95  48
 BA96  10
 BA97  10
 BA98  10
 BA99  10
 BA9A  10
 BA9B  48
 BA9C  80                                  .byte   $80,$B8,$B8,$F0,$F0,$F0,
                   $B8,$B8,$80,$48,$48,$10,$10,$10,$48,$48
 BA9D  B8
 BA9E  B8
 BA9F  F0
 BAA0  F0
 BAA1  F0
 BAA2  B8
 BAA3  B8
 BAA4  80
 BAA5  48
 BAA6  48
 BAA7  10
 BAA8  10
 BAA9  10
 BAAA  48
 BAAB  48
 BAAC  94                                  .byte   $94,$B0,$B8,$A7,$A7,$B8,
                   $B0,$94,$6C,$50,$48,$59,$59,$48,$50,$6C
 BAAD  B0
 BAAE  B8
 BAAF  A7
 BAB0  A7
 BAB1  B8
 BAB2  B0
 BAB3  94
 BAB4  6C
 BAB5  50
 BAB6  48
 BAB7  59
 BAB8  59
 BAB9  48
 BABA  50
 BABB  6C
 BABC  96                                  .byte   $96,$A3,$C5,$F0,$F0,$C5,
                   $A3,$96,$6A,$5D,$3B,$10,$10,$3B,$5D,$6A
 BABD  A3
 BABE  C5
 BABF  F0
 BAC0  F0
 BAC1  C5
 BAC2  A3
 BAC3  96
 BAC4  6A
 BAC5  5D
 BAC6  3B
 BAC7  10
 BAC8  10
 BAC9  3B
 BACA  5D
 BACB  6A
 BACC  3D                                  .byte   $3D,$6A,$97,$C4,$F0,$C4,
                   $97,$6A,$3D,$10,$10,$10,$10,$10,$10,$10
 BACD  6A
 BACE  97
 BACF  C4
 BAD0  F0
 BAD1  C4
 BAD2  97
 BAD3  6A
 BAD4  3D
 BAD5  10
 BAD6  10
 BAD7  10
 BAD8  10
 BAD9  10
 BADA  10
 BADB  10
 BADC  A0                                  .byte   $A0,$E0,$EA,$B0,$EA,$E0,
                   $A0,$80,$60,$20,$16,$50,$16,$20,$60,$80
 BADD  E0
 BADE  EA
 BADF  B0
 BAE0  EA
 BAE1  E0
 BAE2  A0
 BAE3  80
 BAE4  60
 BAE5  20
 BAE6  16
 BAE7  50
 BAE8  16
 BAE9  20
 BAEA  60
 BAEB  80
 BAEC  F0                                  .byte   $F0,$D0,$B0,$90,$70,$50,
                   $30,$10,$10,$30,$50,$70,$90,$B0,$D0,$F0
 BAED  D0
 BAEE  B0
 BAEF  90
 BAF0  70
 BAF1  50
 BAF2  30
 BAF3  10
 BAF4  10
 BAF5  30
 BAF6  50
 BAF7  70
 BAF8  90
 BAF9  B0
 BAFA  D0
 BAFB  F0
 BAFC  40                                  .byte   $40,$40,$40,$40,$40,$40,
                   $40,$40,$40,$40,$40,$40,$40,$40,$40,$40
 BAFD  40
 BAFE  40
 BAFF  40
 BB00  40
 BB01  40
 BB02  40
 BB03  40
 BB04  40
 BB05  40
 BB06  40
 BB07  40
 BB08  40
 BB09  40
 BB0A  40
 BB0B  40
 BB0C  F0                                  .byte   $F0,$CB,$A6,$80,$5C,$39,
                   $20,$12,$12,$20,$39,$5C,$80,$A6,$CB,$F0
 BB0D  CB
 BB0E  A6
 BB0F  80
 BB10  5C
 BB11  39
 BB12  20
 BB13  12
 BB14  12
 BB15  20
 BB16  39
 BB17  5C
 BB18  80
 BB19  A6
 BB1A  CB
 BB1B  F0
 BB1C  C0                                  .byte   $C0,$A6,$8A,$6A,$4A,$2F,
                   $14,$24,$20,$39,$59,$75,$72,$90,$B0,$D0
 BB1D  A6
 BB1E  8A
 BB1F  6A
 BB20  4A
 BB21  2F
 BB22  14
 BB23  24
 BB24  20
 BB25  39
 BB26  59
 BB27  75
 BB28  72
 BB29  90
 BB2A  B0
 BB2B  D0
 BB2C  80                                  .byte   $80,$57,$48,$57,$80,$A9,
                   $BA,$A9,$80,$57,$48,$57,$80,$A9,$BA,$A9
 BB2D  57
 BB2E  48
 BB2F  57
 BB30  80
 BB31  A9
 BB32  BA
 BB33  A9
 BB34  80
 BB35  57
 BB36  48
 BB37  57
 BB38  80
 BB39  A9
 BB3A  BA
 BB3B  A9
 BB3C  E4                                  .byte   $E4,$E8,$B7,$80,$B7,$E8,
                   $E4,$B2,$7A,$47,$20,$10,$20,$47,$7A,$B2
 BB3D  E8
 BB3E  B7
 BB3F  80
 BB40  B7
 BB41  E8
 BB42  E4
 BB43  B2
 BB44  7A
 BB45  47
 BB46  20
 BB47  10
 BB48  20
 BB49  47
 BB4A  7A
 BB4B  B2
 BB4C  90                                  .byte   $90,$70,$70,$50,$50,$30,
                   $30,$10,$10,$30,$30,$50,$50,$70,$70,$90
 BB4D  70
 BB4E  70
 BB4F  50
 BB50  50
 BB51  30
 BB52  30
 BB53  10
 BB54  10
 BB55  30
 BB56  30
 BB57  50
 BB58  50
 BB59  70
 BB5A  70
 BB5B  90
 BB5C  E6                                  .byte   $E6,$D0,$E6,$B9,$AE,$80,
                   $52,$47,$14,$30,$14,$47,$52,$80,$AE,$B9
 BB5D  D0
 BB5E  E6
 BB5F  B9
 BB60  AE
 BB61  80
 BB62  52
 BB63  47
 BB64  14
 BB65  30
 BB66  14
 BB67  47
 BB68  52
 BB69  80
 BB6A  AE
 BB6B  B9
 BB6C  7E                                  .byte   $7E,$6A,$51,$3A,$2C,$2C,
                   $38,$4E,$4E,$38,$2C,$2C,$3A,$51,$6A,$7E
 BB6D  6A
 BB6E  51
 BB6F  3A
 BB70  2C
 BB71  2C
 BB72  38
 BB73  4E
 BB74  4E
 BB75  38
 BB76  2C
 BB77  2C
 BB78  3A
 BB79  51
 BB7A  6A
 BB7B  7E

 BB7C  05          lev_angle:              .byte   $05,$06,$07,$08,$09,$0A,
                   $0B,$0C,$0D,$0E,$0F,$00,$01,$02,$03,$04 ; angle[16][16]
 BB7D  06
 BB7E  07
 BB7F  08
 BB80  09
 BB81  0A
 BB82  0B
 BB83  0C
 BB84  0D
 BB85  0E
 BB86  0F
 BB87  00
 BB88  01
 BB89  02
 BB8A  03
 BB8B  04
 BB8C  04                                  .byte   $04,$04,$08,$08,$08,$08,
                   $0C,$0C,$0C,$0C,$00,$00,$00,$00,$04,$04
 BB8D  04
 BB8E  08
 BB8F  08
 BB90  08
 BB91  08
 BB92  0C
 BB93  0C
 BB94  0C
 BB95  0C
 BB96  00
 BB97  00
 BB98  00
 BB99  00
 BB9A  04
 BB9B  04
 BB9C  04                                  .byte   $04,$08,$04,$08,$08,$0C,
                   $08,$0C,$0C,$00,$0C,$00,$00,$04,$00,$04
 BB9D  08
 BB9E  04
 BB9F  08
 BBA0  08
 BBA1  0C
 BBA2  08
 BBA3  0C
 BBA4  0C
 BBA5  00
 BBA6  0C
 BBA7  00
 BBA8  00
 BBA9  04
 BBAA  00
 BBAB  04
 BBAC  06                                  .byte   $06,$07,$09,$08,$07,$09,
                   $0A,$0C,$0E,$0F,$01,$00,$0F,$01,$02,$04
 BBAD  07
 BBAE  09
 BBAF  08
 BBB0  07
 BBB1  09
 BBB2  0A
 BBB3  0C
 BBB4  0E
 BBB5  0F
 BBB6  01
 BBB7  00
 BBB8  0F
 BBB9  01
 BBBA  02
 BBBB  04
 BBBC  07                                  .byte   $07,$06,$05,$08,$0B,$0A,
                   $09,$0C,$0F,$0E,$0D,$00,$03,$02,$01,$04
 BBBD  06
 BBBE  05
 BBBF  08
 BBC0  0B
 BBC1  0A
 BBC2  09
 BBC3  0C
 BBC4  0F
 BBC5  0E
 BBC6  0D
 BBC7  00
 BBC8  03
 BBC9  02
 BBCA  01
 BBCB  04
 BBCC  05                                  .byte   $05,$05,$05,$05,$0B,$0B,
                   $0B,$0B,$0B,$00,$00,$00,$00,$00,$00,$05
 BBCD  05
 BBCE  05
 BBCF  05
 BBD0  0B
 BBD1  0B
 BBD2  0B
 BBD3  0B
 BBD4  0B
 BBD5  00
 BBD6  00
 BBD7  00
 BBD8  00
 BBD9  00
 BBDA  00
 BBDB  05
 BBDC  04                                  .byte   $04,$08,$0B,$05,$08,$0C,
                   $0E,$09,$0C,$00,$03,$0D,$00,$04,$07,$02
 BBDD  08
 BBDE  0B
 BBDF  05
 BBE0  08
 BBE1  0C
 BBE2  0E
 BBE3  09
 BBE4  0C
 BBE5  00
 BBE6  03
 BBE7  0D
 BBE8  00
 BBE9  04
 BBEA  07
 BBEB  02
 BBEC  0D                                  .byte   $0D,$0D,$0D,$0D,$0D,$0D,
                   $0D,$00,$03,$03,$03,$03,$03,$03,$03,$00
 BBED  0D
 BBEE  0D
 BBEF  0D
 BBF0  0D
 BBF1  0D
 BBF2  0D
 BBF3  00
 BBF4  03
 BBF5  03
 BBF6  03
 BBF7  03
 BBF8  03
 BBF9  03
 BBFA  03
 BBFB  00
 BBFC  00                                  .byte   $00,$00,$00,$00,$00,$00,
                   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 BBFD  00
 BBFE  00
 BBFF  00
 BC00  00
 BC01  00
 BC02  00
 BC03  00
 BC04  00
 BC05  00
 BC06  00
 BC07  00
 BC08  00
 BC09  00
 BC0A  00
 BC0B  00
 BC0C  0C                                  .byte   $0C,$0C,$0C,$0D,$0E,$0F,
                   $0F,$00,$01,$01,$02,$03,$04,$04,$04,$00
 BC0D  0C
 BC0E  0C
 BC0F  0D
 BC10  0E
 BC11  0F
 BC12  0F
 BC13  00
 BC14  01
 BC15  01
 BC16  02
 BC17  03
 BC18  04
 BC19  04
 BC1A  04
 BC1B  00
 BC1C  0E                                  .byte   $0E,$0D,$0C,$0D,$0D,$0D,
                   $01,$0F,$02,$03,$03,$00,$03,$03,$03,$00
 BC1D  0D
 BC1E  0C
 BC1F  0D
 BC20  0D
 BC21  0D
 BC22  01
 BC23  0F
 BC24  02
 BC25  03
 BC26  03
 BC27  00
 BC28  03
 BC29  03
 BC2A  03
 BC2B  00
 BC2C  0B                                  .byte   $0B,$09,$07,$05,$03,$01,
                   $0F,$0D,$0D,$0F,$01,$03,$05,$07,$09,$0B
 BC2D  09
 BC2E  07
 BC2F  05
 BC30  03
 BC31  01
 BC32  0F
 BC33  0D
 BC34  0D
 BC35  0F
 BC36  01
 BC37  03
 BC38  05
 BC39  07
 BC3A  09
 BC3B  0B
 BC3C  08                                  .byte   $08,$0B,$0C,$04,$05,$08,
                   $0B,$0C,$0D,$0E,$0F,$01,$02,$03,$04,$05
 BC3D  0B
 BC3E  0C
 BC3F  04
 BC40  05
 BC41  08
 BC42  0B
 BC43  0C
 BC44  0D
 BC45  0E
 BC46  0F
 BC47  01
 BC48  02
 BC49  03
 BC4A  04
 BC4B  05
 BC4C  0C                                  .byte   $0C,$00,$0C,$00,$0C,$00,
                   $0C,$00,$04,$00,$04,$00,$04,$00,$04,$00
 BC4D  00
 BC4E  0C
 BC4F  00
 BC50  0C
 BC51  00
 BC52  0C
 BC53  00
 BC54  04
 BC55  00
 BC56  04
 BC57  00
 BC58  04
 BC59  00
 BC5A  04
 BC5B  00
 BC5C  0A                                  .byte   $0A,$06,$0C,$08,$0E,$0A,
                   $00,$0C,$02,$0E,$04,$00,$06,$02,$08,$04
 BC5D  06
 BC5E  0C
 BC5F  08
 BC60  0E
 BC61  0A
 BC62  00
 BC63  0C
 BC64  02
 BC65  0E
 BC66  04
 BC67  00
 BC68  06
 BC69  02
 BC6A  08
 BC6B  04
 BC6C  0E                                  .byte   $0E,$0C,$0D,$0E,$00,$02,
                   $02,$00,$0E,$0E,$00,$02,$03,$04,$02,$00
 BC6D  0C
 BC6E  0D
 BC6F  0E
 BC70  00
 BC71  02
 BC72  02
 BC73  00
 BC74  0E
 BC75  0E
 BC76  00
 BC77  02
 BC78  03
 BC79  04
 BC7A  02
 BC7B  00

 BC7C  00          lev_remap:              .byte   $00,$01,$02,$03,$04,$05,
                   $06,$07,$0D,$09,$08,$0C,$0E,$0F,$0A,$0B ; remap[16]
 BC7D  01
 BC7E  02
 BC7F  03
 BC80  04
 BC81  05
 BC82  06
 BC83  07
 BC84  0D
 BC85  09
 BC86  08
 BC87  0C
 BC88  0E
 BC89  0F
 BC8A  0A
 BC8B  0B

 BC8C  18          lev_scale:              .byte   $18,$1C,$18,$0F,$18,$18,
                   $18,$18,$0A,$18,$10,$0F,$18,$0C,$14,$0A ; scale[16]
 BC8D  1C
 BC8E  18
 BC8F  0F
 BC90  18
 BC91  18
 BC92  18
 BC93  18
 BC94  0A
 BC95  18
 BC96  10
 BC97  0F
 BC98  18
 BC99  0C
 BC9A  14
 BC9B  0A

 BC9C  50          lev_y3d:                .byte   $50,$50,$50,$68,$50,$50,
                   $68,$B0,$A0,$50,$90,$80,$20,$B0,$60,$A0 ; y3d[16]
 BC9D  50
 BC9E  50
 BC9F  68
 BCA0  50
 BCA1  50
 BCA2  68
 BCA3  B0
 BCA4  A0
 BCA5  50
 BCA6  90
 BCA7  80
 BCA8  20
 BCA9  B0
 BCAA  60
 BCAB  A0

 BCAC  40          lev_y2d:                .byte   $40,$20,$40,$80,$40,$40,
                   $70,$60,$00,$20,$40,$00,$A0,$40,$40,$00 ; y2d[16]
 BCAD  20
 BCAE  40
 BCAF  80
 BCB0  40
 BCB1  40
 BCB2  70
 BCB3  60
 BCB4  00
 BCB5  20
 BCB6  40
 BCB7  00
 BCB8  A0
 BCB9  40
 BCBA  40
 BCBB  00

 BCBC  FF          lev_y2db:               .byte   $FF,$FF,$FF,$FF,$FF,$FF,
                   $FF,$00,$01,$FF,$00,$00,$FE,$01,$FF,$01 ; Y2DB[16]
 BCBD  FF
 BCBE  FF
 BCBF  FF
 BCC0  FF
 BCC1  FF
 BCC2  FF
 BCC3  00
 BCC4  01
 BCC5  FF
 BCC6  00
 BCC7  00
 BCC8  FE
 BCC9  01
 BCCA  FF
 BCCB  01

 BCCC  00          lev_open:               .byte   $00,$00,$00,$00,$00,$00,
                   $00,$FF,$FF,$FF,$FF,$00,$00,$FF,$00,$FF ; open[16]
 BCCD  00
 BCCE  00
 BCCF  00
 BCD0  00
 BCD1  00
 BCD2  00
 BCD3  FF
 BCD4  FF
 BCD5  FF
 BCD6  FF
 BCD7  00
 BCD8  00
 BCD9  FF
 BCDA  00
 BCDB  FF

 BCDC  00          lev_fscale:             .byte   $00,$00,$60,$40,$00,$00,
                   $48,$40,$50,$28,$50,$00,$00,$50,$00,$40 ; fscale[16]
 BCDD  00
 BCDE  60
 BCDF  40
 BCE0  00
 BCE1  00
 BCE2  48
 BCE3  40
 BCE4  50
 BCE5  28
 BCE6  50
 BCE7  00
 BCE8  00
 BCE9  50
 BCEA  00
 BCEB  40

 BCEC  04          lev_fscale2:            .byte   $04,$04,$03,$04,$04,$04,
                   $03,$04,$05,$04,$04,$04,$04,$04,$04,$05 ; fscale2[16]
 BCED  04
 BCEE  03
 BCEF  04
 BCF0  04
 BCF1  04
 BCF2  03
 BCF3  04
 BCF4  05
 BCF5  04
 BCF6  04
 BCF7  04
 BCF8  04
 BCF9  04
 BCFA  04
 BCFB  05

 BCFC  3E                                  .byte   $3E 

 BCFD  85          graphic_at_mid:         sta     $55
 BCFE  55
 BCFF  B9                                  lda     mid_x,y
 BD00  35 04
 BD02  85                                  sta     $56
 BD03  56
 BD04  B9                                  lda     mid_y,y
 BD05  45 04
 BD07  85                                  sta     $58
 BD08  58
 BD09  20          locbd09:                jsr     locc098
 BD0A  98 C0
 BD0C  A2                                  ldx     #$61
 BD0D  61
 BD0E  20                                  jsr     vapp_to_X_
 BD0F  65 C7
 BD11  A9                                  lda     #$00
 BD12  00
 BD13  85                                  sta     $a9
 BD14  A9
 BD15  20                                  jsr     locbd3e
 BD16  3E BD
 BD18  A5                                  lda     $78
 BD19  78
 BD1A  49                                  eor     #$07
 BD1B  07
 BD1C  0A                                  asl     a
 BD1D  C9                                  cmp     #$0a
 BD1E  0A
 BD1F  B0                                  bcs     locbd23
 BD20  02
  [ =BD23 ]
 BD21  A9                                  lda     #$0a
 BD22  0A
 BD23  0A          locbd23:                asl     a
 BD24  0A                                  asl     a
 BD25  0A                                  asl     a
 BD26  0A                                  asl     a
 BD27  91                                  sta     (vidptr_l),y
 BD28  74
 BD29  C8                                  iny
 BD2A  A9                                  lda     #$60                ; 
                   BUGBUG is this the low byte of 2f60 (video_data)
 BD2B  60
 BD2C  91                                  sta     (vidptr_l),y
 BD2D  74
 BD2E  C8                                  iny
 BD2F  84                                  sty     $a9
 BD30  A9
 BD31  A4                                  ldy     $55
 BD32  55
 BD33  BE                                  ldx     graphic_table+1,y
 BD34  C9 CE
 BD36  B9                                  lda     graphic_table,y
 BD37  C8 CE
 BD39  A4                                  ldy     $a9
 BD3A  A9
 BD3B  4C                                  jmp     vapp_A_X
 BD3C  59 DF
 BD3E  A5          locbd3e:                lda     $57
 BD3F  57
 BD40  C9                                  cmp     #$10
 BD41  10
 BD42  90                                  bcc     locbd8c
 BD43  48
  [ =BD8C ]
 BD44  38                                  sec
 BD45  E5                                  sbc     $5f
 BD46  5F
 BD47  8D                                  sta     mb_w_15
 BD48  95 60
 BD4A  A9                                  lda     #$00
 BD4B  00
 BD4C  E5                                  sbc     $5b
 BD4D  5B
 BD4E  8D                                  sta     mb_w_16
 BD4F  96 60
 BD51  A9                                  lda     #$18
 BD52  18
 BD53  8D                                  sta     mb_w_0c
 BD54  8C 60
 BD56  A5                                  lda     $a0
 BD57  A0
 BD58  8D                                  sta     mb_w_0e
 BD59  8E 60
 BD5B  8D                                  sta     mb_w_14
 BD5C  94 60
 BD5E  2C          locbd5e:                bit     eactl_mbst
 BD5F  40 60
 BD61  30                                  bmi     locbd5e
 BD62  FB
  [ =BD5E ]
 BD63  AD                                  lda     mb_rd_l
 BD64  60 60
 BD66  85                                  sta     $79
 BD67  79
 BD68  AD                                  lda     mb_rd_h
 BD69  70 60
 BD6B  85                                  sta     $7a
 BD6C  7A
 BD6D  A2                                  ldx     #$0f
 BD6E  0F
 BD6F  8E                                  stx     mb_w_0c
 BD70  8C 60
 BD72  38                                  sec
 BD73  E9                                  sbc     #$01
 BD74  01
 BD75  D0                                  bne     locbd79
 BD76  02
  [ =BD79 ]
 BD77  A9                                  lda     #$01
 BD78  01
 BD79  A2          locbd79:                ldx     #$00
 BD7A  00
 BD7B  E8          locbd7b:                inx
 BD7C  06                                  asl     $79
 BD7D  79
 BD7E  2A                                  rol     a
 BD7F  90                                  bcc     locbd7b
 BD80  FA
  [ =BD7B ]
 BD81  4A                                  lsr     a
 BD82  49                                  eor     #$7f
 BD83  7F
 BD84  18                                  clc
 BD85  69                                  adc     #$01
 BD86  01
 BD87  A8                                  tay
 BD88  8A                                  txa
 BD89  B8                                  clv
 BD8A  50                                  bvc     locbd90
 BD8B  04
  [ =BD90 ]
 BD8C  A9          locbd8c:                lda     #$01
 BD8D  01
 BD8E  A0                                  ldy     #$00
 BD8F  00
 BD90  85          locbd90:                sta     $78
 BD91  78
 BD92  48                                  pha
 BD93  98                                  tya
 BD94  A4                                  ldy     $a9
 BD95  A9
 BD96  91                                  sta     (vidptr_l),y
 BD97  74
 BD98  C8                                  iny
 BD99  68                                  pla
 BD9A  09                                  ora     #$70
 BD9B  70
 BD9C  91                                  sta     (vidptr_l),y
 BD9D  74
 BD9E  C8                                  iny
 BD9F  60                                  rts

                   ; Draw a rotatable/scalable graphic.
                   ; Y = segment number
                   ; A = graphic to draw
                   ; $57 = position along tube

 BDA0  85          draw_linegfx:           sta     $36
 BDA1  36
 BDA2  B9                                  lda     tube_x,y
 BDA3  CE 03
 BDA5  85                                  sta     $56
 BDA6  56
 BDA7  B9                                  lda     tube_y,y
 BDA8  DE 03
 BDAA  85                                  sta     $58
 BDAB  58
 BDAC  A5                                  lda     $57
 BDAD  57
 BDAE  85                                  sta     $2f
 BDAF  2F
 BDB0  98                                  tya
 BDB1  18                                  clc
 BDB2  69                                  adc     #$01
 BDB3  01
 BDB4  29                                  and     #$0f
 BDB5  0F
 BDB6  AA                                  tax
 BDB7  BD                                  lda     tube_x,x
 BDB8  CE 03
 BDBA  85                                  sta     $2e
 BDBB  2E
 BDBC  BD                                  lda     tube_y,x
 BDBD  DE 03
 BDBF  85                                  sta     $30
 BDC0  30
 BDC1  A9                                  lda     #$00
 BDC2  00
 BDC3  85                                  sta     fscale
 BDC4  59
 BDC5  A9                                  lda     #$04
 BDC6  04
 BDC7  85                                  sta     fscale+1
 BDC8  5A
 BDC9  A4                                  ldy     $36
 BDCA  36
 BDCB  A5          locbdcb:                lda     $5b
 BDCC  5B
 BDCD  30                                  bmi     locbdd6
 BDCE  07
  [ =BDD6 ]
 BDCF  A5                                  lda     $57
 BDD0  57
 BDD1  C5                                  cmp     $5f
 BDD2  5F
 BDD3  B0                                  bcs     locbdd6
 BDD4  01
  [ =BDD6 ]
 BDD5  60                                  rts
 BDD6  B9          locbdd6:                lda     locbfb6,y
 BDD7  B6 BF
 BDD9  85                                  sta     rgr_pt_inx
 BDDA  99
 BDDB  B9                                  lda     locbfc4,y
 BDDC  C4 BF
 BDDE  85                                  sta     $38
 BDDF  38
 BDE0  A4                                  ldy     curcolor
 BDE1  9E
 BDE2  A9                                  lda     #$08
 BDE3  08
 BDE4  20                                  jsr     vapp_sclstat_A_Y
 BDE5  4C DF
 BDE7  20                                  jsr     locc098
 BDE8  98 C0
 BDEA  A2                                  ldx     #$61
 BDEB  61
 BDEC  20                                  jsr     vapp_to_X_
 BDED  65 C7
 BDEF  A5                                  lda     $2e
 BDF0  2E
 BDF1  85                                  sta     $56
 BDF2  56
 BDF3  A5                                  lda     $2f
 BDF4  2F
 BDF5  85                                  sta     $57
 BDF6  57
 BDF7  A5                                  lda     $30
 BDF8  30
 BDF9  85                                  sta     $58
 BDFA  58
 BDFB  20                                  jsr     locc098
 BDFC  98 C0
 BDFE  A4                                  ldy     fscale
 BDFF  59
 BE00  A5                                  lda     fscale+1
 BE01  5A
 BE02  20                                  jsr     vapp_scale_A_Y
 BE03  6C DF
 BE05  A5                                  lda     $61
 BE06  61
 BE07  38                                  sec
 BE08  E5                                  sbc     $6a
 BE09  6A
 BE0A  85                                  sta     $79
 BE0B  79
 BE0C  A5                                  lda     $62
 BE0D  62
 BE0E  E5                                  sbc     $6b
 BE0F  6B
 BE10  85                                  sta     $9b
 BE11  9B
 BE12  30                                  bmi     locbe1d
 BE13  09
  [ =BE1D ]
 BE14  F0                                  beq     locbe1a
 BE15  04
  [ =BE1A ]
 BE16  A9                                  lda     #$ff
 BE17  FF
 BE18  85                                  sta     $79
 BE19  79
 BE1A  B8          locbe1a:                clv
 BE1B  50                                  bvc     locbe33
 BE1C  16
  [ =BE33 ]
 BE1D  C9          locbe1d:                cmp     #$ff
 BE1E  FF
 BE1F  F0                                  beq     locbe26
 BE20  05
  [ =BE26 ]
 BE21  A9                                  lda     #$ff
 BE22  FF
 BE23  B8                                  clv
 BE24  50                                  bvc     locbe31
 BE25  0B
  [ =BE31 ]
 BE26  A5          locbe26:                lda     $79
 BE27  79
 BE28  49                                  eor     #$ff
 BE29  FF
 BE2A  18                                  clc
 BE2B  69                                  adc     #$01
 BE2C  01
 BE2D  90                                  bcc     locbe31
 BE2E  02
  [ =BE31 ]
 BE2F  A9                                  lda     #$ff
 BE30  FF
 BE31  85          locbe31:                sta     $79
 BE32  79
 BE33  A5          locbe33:                lda     $63
 BE34  63
 BE35  38                                  sec
 BE36  E5                                  sbc     $6c
 BE37  6C
 BE38  85                                  sta     $89
 BE39  89
 BE3A  A5                                  lda     $64
 BE3B  64
 BE3C  E5                                  sbc     $6d
 BE3D  6D
 BE3E  85                                  sta     $9d
 BE3F  9D
 BE40  30                                  bmi     locbe4b
 BE41  09
  [ =BE4B ]
 BE42  F0                                  beq     locbe48
 BE43  04
  [ =BE48 ]
 BE44  A9                                  lda     #$ff
 BE45  FF
 BE46  85                                  sta     $89
 BE47  89
 BE48  B8          locbe48:                clv
 BE49  50                                  bvc     locbe5d
 BE4A  12
  [ =BE5D ]
 BE4B  C9          locbe4b:                cmp     #$ff
 BE4C  FF
 BE4D  F0                                  beq     locbe54
 BE4E  05
  [ =BE54 ]
 BE4F  A9                                  lda     #$ff
 BE50  FF
 BE51  B8                                  clv
 BE52  50                                  bvc     locbe5b
 BE53  07
  [ =BE5B ]
 BE54  A5          locbe54:                lda     $89
 BE55  89
 BE56  49                                  eor     #$ff
 BE57  FF
 BE58  18                                  clc
 BE59  69                                  adc     #$01
 BE5A  01
 BE5B  85          locbe5b:                sta     $89
 BE5C  89
 BE5D  A9          locbe5d:                lda     #$00
 BE5E  00
 BE5F  85                                  sta     $82
 BE60  82
 BE61  85                                  sta     $92
 BE62  92
 BE63  A5                                  lda     $79
 BE64  79
 BE65  0A                                  asl     a
 BE66  26                                  rol     $82
 BE67  82
 BE68  85                                  sta     $7a
 BE69  7A
 BE6A  0A                                  asl     a
 BE6B  85                                  sta     $7c
 BE6C  7C
 BE6D  A5                                  lda     $82
 BE6E  82
 BE6F  2A                                  rol     a
 BE70  85                                  sta     $84
 BE71  84
 BE72  A5                                  lda     $7c
 BE73  7C
 BE74  65                                  adc     $79
 BE75  79
 BE76  85                                  sta     $7d
 BE77  7D
 BE78  A5                                  lda     $84
 BE79  84
 BE7A  69                                  adc     #$00
 BE7B  00
 BE7C  85                                  sta     $85
 BE7D  85
 BE7E  A5                                  lda     $7a
 BE7F  7A
 BE80  65                                  adc     $79
 BE81  79
 BE82  85                                  sta     $7b
 BE83  7B
 BE84  A5                                  lda     $82
 BE85  82
 BE86  69                                  adc     #$00
 BE87  00
 BE88  85                                  sta     $83
 BE89  83
 BE8A  85                                  sta     $86
 BE8B  86
 BE8C  A5                                  lda     $7b
 BE8D  7B
 BE8E  0A                                  asl     a
 BE8F  85                                  sta     $7e
 BE90  7E
 BE91  26                                  rol     $86
 BE92  86
 BE93  65                                  adc     $79
 BE94  79
 BE95  85                                  sta     $7f
 BE96  7F
 BE97  A5                                  lda     $86
 BE98  86
 BE99  69                                  adc     #$00
 BE9A  00
 BE9B  85                                  sta     $87
 BE9C  87
 BE9D  A5                                  lda     $89
 BE9E  89
 BE9F  0A                                  asl     a
 BEA0  26                                  rol     $92
 BEA1  92
 BEA2  85                                  sta     $8a
 BEA3  8A
 BEA4  0A                                  asl     a
 BEA5  85                                  sta     $8c
 BEA6  8C
 BEA7  A5                                  lda     $92
 BEA8  92
 BEA9  2A                                  rol     a
 BEAA  85                                  sta     $94
 BEAB  94
 BEAC  A5                                  lda     $8c
 BEAD  8C
 BEAE  65                                  adc     $89
 BEAF  89
 BEB0  85                                  sta     $8d
 BEB1  8D
 BEB2  A5                                  lda     $94
 BEB3  94
 BEB4  69                                  adc     #$00
 BEB5  00
 BEB6  85                                  sta     $95
 BEB7  95
 BEB8  A5                                  lda     $8a
 BEB9  8A
 BEBA  65                                  adc     $89
 BEBB  89
 BEBC  85                                  sta     $8b
 BEBD  8B
 BEBE  A5                                  lda     $92
 BEBF  92
 BEC0  69                                  adc     #$00
 BEC1  00
 BEC2  85                                  sta     $93
 BEC3  93
 BEC4  85                                  sta     $96
 BEC5  96
 BEC6  A5                                  lda     $8b
 BEC7  8B
 BEC8  0A                                  asl     a
 BEC9  85                                  sta     $8e
 BECA  8E
 BECB  26                                  rol     $96
 BECC  96
 BECD  65                                  adc     $89
 BECE  89
 BECF  85                                  sta     $8f
 BED0  8F
 BED1  A5                                  lda     $96
 BED2  96
 BED3  69                                  adc     #$00
 BED4  00
 BED5  85                                  sta     $97
 BED6  97
 BED7  A0                                  ldy     #$00
 BED8  00
 BED9  84                                  sty     $a9
 BEDA  A9

                   ; Top of loop for points in claw

 BEDB  A4          locbedb:                ldy     $38
 BEDC  38
 BEDD  B9                                  lda     ClawDrawData+1,y
 BEDE  D3 BF
 BEE0  C9                                  cmp     #$01
 BEE1  01
 BEE2  D0                                  bne     locbee6
 BEE3  02
  [ =BEE6 ]
 BEE4  A9                                  lda     #$c0
 BEE5  C0
 BEE6  85          locbee6:                sta     draw_z
 BEE7  73
 BEE8  B9                                  lda     ClawDrawData,y
 BEE9  D2 BF
 BEEB  85                                  sta     $2d
 BEEC  2D
 BEED  C8                                  iny
 BEEE  C8                                  iny
 BEEF  84                                  sty     $38
 BEF0  38
 BEF1  AA                                  tax
 BEF2  29                                  and     #$07
 BEF3  07
 BEF4  A8                                  tay
 BEF5  8A                                  txa
 BEF6  0A                                  asl     a
 BEF7  85                                  sta     $2b
 BEF8  2B
 BEF9  4A                                  lsr     a
 BEFA  4A                                  lsr     a
 BEFB  4A                                  lsr     a
 BEFC  4A                                  lsr     a
 BEFD  29                                  and     #$07
 BEFE  07
 BEFF  AA                                  tax
 BF00  A5                                  lda     $2b
 BF01  2B
 BF02  45                                  eor     $9b
 BF03  9B
 BF04  30                                  bmi     locbf11
 BF05  0B
  [ =BF11 ]
 BF06  B9                                  lda     $0078,y
 BF07  78 00
 BF09  85                                  sta     $61
 BF0A  61
 BF0B  B9                                  lda     $0080,y
 BF0C  80 00
 BF0E  B8                                  clv
 BF0F  50                                  bvc     locbf22
 BF10  11
  [ =BF22 ]
 BF11  B9          locbf11:                lda     $0078,y
 BF12  78 00
 BF14  49                                  eor     #$ff
 BF15  FF
 BF16  18                                  clc
 BF17  69                                  adc     #$01
 BF18  01
 BF19  85                                  sta     $61
 BF1A  61
 BF1B  B9                                  lda     $0080,y
 BF1C  80 00
 BF1E  49                                  eor     #$ff
 BF1F  FF
 BF20  69                                  adc     #$00
 BF21  00
 BF22  85          locbf22:                sta     $62
 BF23  62
 BF24  A5                                  lda     $2d
 BF25  2D
 BF26  45                                  eor     $9d
 BF27  9D
 BF28  10                                  bpl     locbf38
 BF29  0E
  [ =BF38 ]
 BF2A  B5                                  lda     $88,x
 BF2B  88
 BF2C  18                                  clc
 BF2D  65                                  adc     $61
 BF2E  61
 BF2F  85                                  sta     $61
 BF30  61
 BF31  B5                                  lda     $90,x
 BF32  90
 BF33  65                                  adc     $62
 BF34  62
 BF35  B8                                  clv
 BF36  50                                  bvc     locbf43
 BF37  0B
  [ =BF43 ]
 BF38  A5          locbf38:                lda     $61
 BF39  61
 BF3A  38                                  sec
 BF3B  F5                                  sbc     $88,x
 BF3C  88
 BF3D  85                                  sta     $61
 BF3E  61
 BF3F  A5                                  lda     $62
 BF40  62
 BF41  F5                                  sbc     $90,x
 BF42  90
 BF43  85          locbf43:                sta     $62
 BF44  62
 BF45  A5                                  lda     $2b
 BF46  2B
 BF47  45                                  eor     $9d
 BF48  9D
 BF49  30                                  bmi     locbf56
 BF4A  0B
  [ =BF56 ]
 BF4B  B9                                  lda     $0088,y
 BF4C  88 00
 BF4E  85                                  sta     $63
 BF4F  63
 BF50  B9                                  lda     $0090,y
 BF51  90 00
 BF53  B8                                  clv
 BF54  50                                  bvc     locbf67
 BF55  11
  [ =BF67 ]
 BF56  B9          locbf56:                lda     $0088,y
 BF57  88 00
 BF59  49                                  eor     #$ff
 BF5A  FF
 BF5B  18                                  clc
 BF5C  69                                  adc     #$01
 BF5D  01
 BF5E  85                                  sta     $63
 BF5F  63
 BF60  B9                                  lda     $0090,y
 BF61  90 00
 BF63  49                                  eor     #$ff
 BF64  FF
 BF65  69                                  adc     #$00
 BF66  00
 BF67  85          locbf67:                sta     $64
 BF68  64
 BF69  A5                                  lda     $2d
 BF6A  2D
 BF6B  45                                  eor     $9b
 BF6C  9B
 BF6D  10                                  bpl     locbf7d
 BF6E  0E
  [ =BF7D ]
 BF6F  A5                                  lda     $63
 BF70  63
 BF71  38                                  sec
 BF72  F5                                  sbc     $78,x
 BF73  78
 BF74  85                                  sta     $63
 BF75  63
 BF76  A5                                  lda     $64
 BF77  64
 BF78  F5                                  sbc     $80,x
 BF79  80
 BF7A  B8                                  clv
 BF7B  50                                  bvc     locbf88
 BF7C  0B
  [ =BF88 ]
 BF7D  A5          locbf7d:                lda     $63
 BF7E  63
 BF7F  18                                  clc
 BF80  75                                  adc     $78,x
 BF81  78
 BF82  85                                  sta     $63
 BF83  63
 BF84  A5                                  lda     $64
 BF85  64
 BF86  75                                  adc     $80,x
 BF87  80
 BF88  85          locbf88:                sta     $64
 BF89  64
 BF8A  A4                                  ldy     $a9
 BF8B  A9
 BF8C  A5                                  lda     $63
 BF8D  63
 BF8E  91                                  sta     (vidptr_l),y
 BF8F  74
 BF90  C8                                  iny
 BF91  A5                                  lda     $64
 BF92  64
 BF93  29                                  and     #$1f
 BF94  1F
 BF95  91                                  sta     (vidptr_l),y
 BF96  74
 BF97  C8                                  iny
 BF98  A5                                  lda     $61
 BF99  61
 BF9A  91                                  sta     (vidptr_l),y
 BF9B  74
 BF9C  C8                                  iny
 BF9D  A5                                  lda     $62
 BF9E  62
 BF9F  29                                  and     #$1f
 BFA0  1F
 BFA1  05                                  ora     draw_z
 BFA2  73
 BFA3  91                                  sta     (vidptr_l),y
 BFA4  74
 BFA5  C8                                  iny
 BFA6  84                                  sty     $a9
 BFA7  A9
 BFA8  C6                                  dec     rgr_pt_inx
 BFA9  99
 BFAA  F0                                  beq     locbfaf
 BFAB  03
  [ =BFAF ]
 BFAC  4C                                  jmp     locbedb
 BFAD  DB BE
 BFAF  A4          locbfaf:                ldy     $a9
 BFB0  A9
 BFB1  88                                  dey
 BFB2  4C                                  jmp     inc_vi.word
 BFB3  5F DF

                   ; Rotatable graphics values.
                   ; These are indexed by graphic number:
                   ; 0 = flipper
                   ; 1-8 = claw positions within segment
                   ; 9-d = pulsars of varying jaggedness
                   ; I don't know what this.byte is.


 BFB5  08                                  .byte   $08                     
                   ; I don't want to 'OPTIMIZE' this in case it 
                   intentionally indexes backwards to this, just a hunch...

                   ; Number of points.  Indexed by graphic number.

 BFB6  08          locbfb6:                .byte   $08
 BFB7  08                                  .byte   $08
 BFB8  08                                  .byte   $08
 BFB9  08                                  .byte   $08
 BFBA  08                                  .byte   $08
 BFBB  08                                  .byte   $08
 BFBC  08                                  .byte   $08
 BFBD  08                                  .byte   $08
 BFBE  09                                  .byte   $09
 BFBF  06                                  .byte   $06
 BFC0  07                                  .byte   $07
 BFC1  07                                  .byte   $07
 BFC2  04                                  .byte   $04
 BFC3  02                                  .byte   $02

                   ; Starting offsets into points vector.  Indexed by 
                   graphic number.

 BFC4  00          locbfc4:                .byte   $00
 BFC5  10                                  .byte   $10
 BFC6  20                                  .byte   $20
 BFC7  30                                  .byte   $30
 BFC8  40                                  .byte   $40
 BFC9  50                                  .byte   $50
 BFCA  60                                  .byte   $60
 BFCB  70                                  .byte   $70
 BFCC  80                                  .byte   $80
 BFCD  92                                  .byte   $92
 BFCE  9E                                  .byte   $9e
 BFCF  AC                                  .byte   $ac
 BFD0  BA                                  .byte   $ba
 BFD1  C2                                  .byte   $c2

                   ; Points vector.
                   ; Each point occupies two.bytes.  The second is just a 
                   draw/nodraw flag,
                   ; always 0 (nodraw) or 1 (draw).  The first holds the 
                   coordinates.  They
                   ; are encoded thus:
                   ; xx yyy xxx
                   ; || ||| +++---> X coordinate
                   ; || +++-------> Y coordinate
                   ; |+-----------> 1 if X coord should be negated, 0 if 
                   not
                   ; +------------> 1 if Y coord should be negated, 0 if 
                   not
                   ; For example, the two.bytes at $bfd6 are $4a $01.  The 
                   $01 indicates that
                   ; a line should be drawn; the $4a is 01 001 010, so we 
                   have X=-2 Y=1.
                   ; flipper
                   ; Why flippers use eight lines rather than six I don't 
                   know.  Maybe someone
                   ; felt the crossing point in the middle should (FSVO 
                   "should") be on a
                   ; point with integral coordinates.  Maybe it's a 
                   historical artifact from
                   ; some previous flipper design (the format here means 
                   you can't have a
                   ; delta of 8 or higher for a line, so if the upper 
                   points were pulled out
                   ; to the ends, you couldn't do a six-line flipper).

 BFD2  0C 01       ClawDrawData:           .word   $010c       ; 00 001 100
 BFD4  8C 01                               .word   $018c       ; 10 001 
                   100    
 BFD6  4A 01                               .word   $014a       ; 01 001 
                   010    
 BFD8  09 01                               .word   $0109       ; 00 001 
                   001     
 BFDA  CB 01                               .word   $01cb       ; 11 001 011
 BFDC  4B 01                               .word   $014b       ; 01 001 011
 BFDE  89 01                               .word   $0189       ; 10 001 001
 BFE0  CA 01                               .word   $01ca       ; 11 001 010

                   ; claw position 1

 BFE2  90 01                               .word   $0190       ; 10 010 000
 BFE4  8A 01                               .word   $018a       ; 10 001 010
 BFE6  23 01                               .word   $0123       ; 00 100 011
 BFE8  DB 01                               .word   $01db       ; 11 011 011
 BFEA  41 01                               .word   $0141       ; 01 000 001
 BFEC  10 01                               .word   $0110       ; 00 010 000
 BFEE  0A 01                               .word   $010a       ; 00 001 010
 BFF0  CB 01                               .word   $01cb       ; 11 001 011

                   ; claw position 2

 BFF2  91 01                               .word   $0191       ; 10 010 001
 BFF4  17 01                               .word   $0117       ; 00 010 111
 BFF6  4B 01                               .word   $014b       ; 01 001 011
 BFF8  8A 01                               .word   $018a       ; 10 001 010
 BFFA  CE 01                               .word   $01ce       ; 11 001 110
 BFFC  08 01                               .word   $0108       ; 00 001 000
 BFFE  0A 01                               .word   $010a       ; 00 001 010
 C000  CB 01                               .word   $01cb       ; 11 001 011

                   ; claw position 3

 C002  92 01                               .word   $0192       ; 10 010 010
 C004  16 01                               .word   $0116       ; 00 010 110
 C006  4B 01                               .word   $014b       ; 01 001 011
 C008  8A 01                               .word   $018a       ; 10 001 010
 C00A  CD 01                               .word   $01cd       ; 11 001 101
 C00C  49 01                               .word   $0149       ; 01 001 001
 C00E  0A 01                               .word   $010a       ; 00 001 010
 C010  CB 01                               .word   $01cb       ; 11 001 011

                   ; claw position 4

 C012  93 01                               .word   $0193       ; 10 010 011
 C014  15 01                               .word   $0115       ; 00 010 101
 C016  4B 01                               .word   $014b       ; 01 001 011
 C018  8A 01                               .word   $018a       ; 10 001 010
 C01A  CC 01                               .word   $01cc       ; 11 001 100
 C01C  4A 01                               .word   $014a       ; 01 001 010
 C01E  0A 01                               .word   $010a       ; 00 001 010
 C020  CB 01                               .word   $01cb       ; 11 001 011

                   ; claw position 5

 C022  95 01                               .word   $0195       ; 10 010 101
 C024  13 01                               .word   $0113       ; 00 010 011
 C026  4B 01                               .word   $014b       ; 01 001 011
 C028  8A 01                               .word   $018a       ; 10 001 010
 C02A  CA 01                               .word   $01ca       ; 11 001 010
 C02C  4C 01                               .word   $014c       ; 01 001 100
 C02E  0A 01                               .word   $010a       ; 00 001 010
 C030  CB 01                               .word   $01cb       ; 11 001 011

                   ; claw position 6

 C032  96 01                               .word   $0196       ; 10 010 110
 C034  12 01                               .word   $0112       ; 00 010 010
 C036  4B 01                               .word   $014b       ; 01 001 011
 C038  8A 01                               .word   $018a       ; 10 001 010
 C03A  C9 01                               .word   $01c9       ; 11 001 001
 C03C  4D 01                               .word   $014d       ; 01 001 101
 C03E  0A 01                               .word   $010a       ; 00 001 010
 C040  CB 01                               .word   $01cb       ; 11 001 011

                   ; claw position 7

 C042  97 01                               .word   $0197       ; 10 010 111
 C044  11 01                               .word   $0111       ; 00 010 001
 C046  4B 01                               .word   $014b       ; 01 001 011
 C048  8A 01                               .word   $018a       ; 10 001 010
 C04A  88 01                               .word   $0188       ; 10 001 000
 C04C  4E 01                               .word   $014e       ; 01 001 110
 C04E  0A 01                               .word   $010a       ; 00 001 010
 C050  CB 01                               .word   $01cb       ; 11 001 011

                   ; claw position 8

 C052  0B 00                               .word   $000b       ; 00 001 
                   011 no-draw
 C054  A3 01                               .word   $01a3       ; 10 100 011
 C056  0A 01                               .word   $010a       ; 00 001 010
 C058  10 01                               .word   $0110       ; 00 010 000
 C05A  4B 01                               .word   $014b       ; 01 001 011
 C05C  8A 01                               .word   $018a       ; 10 001 010
 C05E  90 01                               .word   $0190       ; 10 010 000
 C060  41 01                               .word   $0141       ; 01 000 001
 C062  5B 01                               .word   $015b       ; 01 011 011

                   ; pulsar variant 1

 C064  9A 01                               .word   $019a       ; 10 011 010
 C066  31 01                               .word   $0131       ; 00 110 001
 C068  B1 01                               .word   $01b1       ; 10 110 001
 C06A  31 01                               .word   $0131       ; 00 110 001
 C06C  B1 01                               .word   $01b1       ; 10 110 001
 C06E  1A 01                               .word   $011a       ; 00 011 010

                   ; pulsar variant 2

 C070  01 00                               .word   $0001       ; 00 000 
                   001 no-draw
 C072  91 01                               .word   $0191       ; 10 010 001
 C074  21 01                               .word   $0121       ; 00 100 001
 C076  A1 01                               .word   $01a1       ; 10 100 001
 C078  21 01                               .word   $0121       ; 00 100 001
 C07A  A1 01                               .word   $01a1       ; 10 100 001
 C07C  11 01                               .word   $0111       ; 00 010 001

                   ; pulsar variant 3

 C07E  01 00                               .word   $0001       ; 00 000 
                   001 no-draw
 C080  89 01                               .word   $0189       ; 10 001 001
 C082  11 01                               .word   $0111       ; 00 010 001
 C084  91 01                               .word   $0191       ; 10 010 001
 C086  11 01                               .word   $0111       ; 00 010 001
 C088  91 01                               .word   $0191       ; 10 010 001
 C08A  09 01                               .word   $0109       ; 00 001 001

                   ; pulsar variant 4

 C08C  01 00                               .word   $0001       ; 00 000 
                   001 no-draw
 C08E  8A 01                               .word   $018a       ; 10 001 010
 C090  12 01                               .word   $0112       ; 00 010 010
 C092  8A 01                               .word   $018a       ; 10 001 010

                   ; pulsar variant 5

 C094  01 00                               .word   $0001       ; 00 000 
                   001 no-draw
 C096  06 01                               .word   $0106       ; 00 000 110

 C098  A5          locc098:                lda     $57
 C099  57
 C09A  38                                  sec
 C09B  E5                                  sbc     $5f
 C09C  5F
 C09D  8D                                  sta     mb_w_15
 C09E  95 60
 C0A0  A9                                  lda     #$00
 C0A1  00
 C0A2  E5                                  sbc     $5b
 C0A3  5B
 C0A4  8D                                  sta     mb_w_16
 C0A5  96 60
 C0A7  10                                  bpl     locc0b3
 C0A8  0A
  [ =C0B3 ]
 C0A9  A9                                  lda     #$00
 C0AA  00
 C0AB  8D                                  sta     mb_w_16
 C0AC  96 60
 C0AE  A9                                  lda     #$01
 C0AF  01
 C0B0  8D                                  sta     mb_w_15
 C0B1  95 60
 C0B3  A5          locc0b3:                lda     $58
 C0B4  58
 C0B5  C5                                  cmp     y3d
 C0B6  60
 C0B7  90                                  bcc     locc0c0
 C0B8  07
  [ =C0C0 ]
 C0B9  E5                                  sbc     y3d
 C0BA  60
 C0BB  A2                                  ldx     #$00
 C0BC  00
 C0BD  B8                                  clv
 C0BE  50                                  bvc     locc0c7
 C0BF  07
  [ =C0C7 ]
 C0C0  A5          locc0c0:                lda     y3d
 C0C1  60
 C0C2  38                                  sec
 C0C3  E5                                  sbc     $58
 C0C4  58
 C0C5  A2                                  ldx     #$ff
 C0C6  FF
 C0C7  8D          locc0c7:                sta     mb_w_0e
 C0C8  8E 60
 C0CA  8D                                  sta     mb_w_14
 C0CB  94 60
 C0CD  86                                  stx     $33
 C0CE  33
 C0CF  A5                                  lda     $56
 C0D0  56
 C0D1  C5                                  cmp     $5e
 C0D2  5E
 C0D3  90                                  bcc     locc0dc
 C0D4  07
  [ =C0DC ]
 C0D5  E5                                  sbc     $5e
 C0D6  5E
 C0D7  A2                                  ldx     #$00
 C0D8  00
 C0D9  B8                                  clv
 C0DA  50                                  bvc     locc0e3
 C0DB  07
  [ =C0E3 ]
 C0DC  A5          locc0dc:                lda     $5e
 C0DD  5E
 C0DE  38                                  sec
 C0DF  E5                                  sbc     $56
 C0E0  56
 C0E1  A2                                  ldx     #$ff
 C0E2  FF
 C0E3  85          locc0e3:                sta     $32
 C0E4  32
 C0E5  86                                  stx     $34
 C0E6  34
 C0E7  2C          locc0e7:                bit     eactl_mbst
 C0E8  40 60
 C0EA  30                                  bmi     locc0e7
 C0EB  FB
  [ =C0E7 ]
 C0EC  AD                                  lda     mb_rd_l
 C0ED  60 60
 C0EF  85                                  sta     $63
 C0F0  63
 C0F1  AD                                  lda     mb_rd_h
 C0F2  70 60
 C0F4  85                                  sta     $64
 C0F5  64
 C0F6  A5                                  lda     $32
 C0F7  32
 C0F8  8D                                  sta     mb_w_0e
 C0F9  8E 60
 C0FB  8D                                  sta     mb_w_14
 C0FC  94 60
 C0FE  A5                                  lda     $33
 C0FF  33
 C100  30                                  bmi     locc11a
 C101  18
  [ =C11A ]
 C102  A5                                  lda     $63
 C103  63
 C104  18                                  clc
 C105  65                                  adc     $68
 C106  68
 C107  85                                  sta     $63
 C108  63
 C109  A5                                  lda     $64
 C10A  64
 C10B  65                                  adc     $69
 C10C  69
 C10D  50                                  bvc     locc115
 C10E  06
  [ =C115 ]
 C10F  A9                                  lda     #$ff
 C110  FF
 C111  85                                  sta     $63
 C112  63
 C113  A9                                  lda     #$7f
 C114  7F
 C115  85          locc115:                sta     $64
 C116  64
 C117  B8                                  clv
 C118  50                                  bvc     locc12f
 C119  15
  [ =C12F ]
 C11A  A5          locc11a:                lda     $68
 C11B  68
 C11C  38                                  sec
 C11D  E5                                  sbc     $63
 C11E  63
 C11F  85                                  sta     $63
 C120  63
 C121  A5                                  lda     $69
 C122  69
 C123  E5                                  sbc     $64
 C124  64
 C125  50                                  bvc     locc12d
 C126  06
  [ =C12D ]
 C127  A9                                  lda     #$00
 C128  00
 C129  85                                  sta     $63
 C12A  63
 C12B  A9                                  lda     #$80
 C12C  80
 C12D  85          locc12d:                sta     $64
 C12E  64
 C12F  2C          locc12f:                bit     eactl_mbst
 C130  40 60
 C132  30                                  bmi     locc12f
 C133  FB
  [ =C12F ]
 C134  AD                                  lda     mb_rd_l
 C135  60 60
 C137  85                                  sta     $61
 C138  61
 C139  AD                                  lda     mb_rd_h
 C13A  70 60
 C13C  85                                  sta     $62
 C13D  62
 C13E  A6                                  ldx     $34
 C13F  34
 C140  30                                  bmi     locc158
 C141  16
  [ =C158 ]
 C142  A5                                  lda     $61
 C143  61
 C144  18                                  clc
 C145  65                                  adc     $66
 C146  66
 C147  85                                  sta     $61
 C148  61
 C149  A5                                  lda     $62
 C14A  62
 C14B  65                                  adc     $67
 C14C  67
 C14D  50                                  bvc     locc155
 C14E  06
  [ =C155 ]
 C14F  A9                                  lda     #$ff
 C150  FF
 C151  85                                  sta     $61
 C152  61
 C153  A9                                  lda     #$7f
 C154  7F
 C155  85          locc155:                sta     $62
 C156  62
 C157  60                                  rts
 C158  A5          locc158:                lda     $66
 C159  66
 C15A  38                                  sec
 C15B  E5                                  sbc     $61
 C15C  61
 C15D  85                                  sta     $61
 C15E  61
 C15F  A5                                  lda     $67
 C160  67
 C161  E5                                  sbc     $62
 C162  62
 C163  50                                  bvc     locc16b
 C164  06
  [ =C16B ]
 C165  A9                                  lda     #$00
 C166  00
 C167  85                                  sta     $61
 C168  61
 C169  A9                                  lda     #$80
 C16A  80
 C16B  85          locc16b:                sta     $62
 C16C  62
 C16D  60                                  rts

 C16E  20          InitVector:             jsr     locaa13
 C16F  13 AA
 C171  A9                                  lda     #$80
 C172  80
 C173  85                                  sta     $5e
 C174  5E
 C175  A9                                  lda     #$ff
 C176  FF
 C177  8D                                  sta     $0114
 C178  14 01
 C17A  20                                  jsr     locc235
 C17B  35 C2
 C17D  AD                                  lda     $0133
 C17E  33 01
 C180  D0                                  bne     locc185
 C181  03
  [ =C185 ]
 C182  8D                                  sta     vg_reset
 C183  00 58
 C185  A9          locc185:                lda     #$00
 C186  00
 C187  8D                                  sta     $0133
 C188  33 01
 C18A  AD                                  lda     loccec6
 C18B  C6 CE
 C18D  8D                                  sta     vecram
 C18E  00 20
 C190  AD                                  lda     loccec7
 C191  C7 CE
 C193  8D                                  sta     vecram+1
 C194  01 20

                   ; Install the correct colors for curlevel.

 C196  A5          SetLevelColors:         lda     curlevel                
                               ; Tke the current level
 C197  9F
 C198  29                                  and     #$70                    
                               ;   Round it to the start of this color 
                   level (eg 0, 16, 32, 48, etc)
 C199  70
 C19A  C9                                  cmp     #LAST_SHAPE_LEVEL       
                               ;   Compare it to (default 95) last level 
                   shape before the 3 extra 
 C19B  5F
 C19C  90                                  bcc     +
 C19D  02
  [ =C1A0 ]
 C19E  A9                                  lda     #LAST_SHAPE_LEVEL       
                               ; If higher, use LAST_SHAPE_LEVEL instead
 C19F  5F
 C1A0  4A          +                       lsr     a                       
                               ; Divide by 2, since there are 8 colors per 
                   16 levels
 C1A1  09                                  ora     #$07                    
                               ; Set the bits 0000111, so we start at the 
                   end of the table and work backwards
 C1A2  07
 C1A3  AA                                  tax                             
                               ; Use the result as the indexer into 
                   aLevelColors
 C1A4  A0                                  ldy     #$07
 C1A5  07
 C1A6  BD          loopLoadColors:         lda     aLevelColors,x          
                               ; Get the color from the color table
 C1A7  FD C1
 C1A9  29                                  and     #$0f                    
                               ; Mask away the top nibble leaving only the 
                   bottom
 C1AA  0F
 C1AB  99                                  sta     $0019,y                 
                               ; Store it in the $0019 array at the Yth 
                   index
 C1AC  19 00
 C1AE  99                                  sta     col_ram,y               
                               ; Store it in the $0800 array as the Yth 
                   index
 C1AF  00 08
 C1B1  BD                                  lda     aLevelColors,x          
                               ; Get a fresh copy again
 C1B2  FD C1
 C1B4  4A                                  lsr     a                       
                               ; This time move the high nibble down to 
                   the low 
 C1B5  4A                                  lsr     a
 C1B6  4A                                  lsr     a
 C1B7  4A                                  lsr     a
 C1B8  99                                  sta     $0021,y                 
                               ; Store it in the $0021 table at the Yth 
                   index
 C1B9  21 00
 C1BB  99                                  sta     $0808,y                 
                               ; Store it in the $0808 table at the Yth 
                   index
 C1BC  08 08
 C1BE  CA                                  dex
 C1BF  88                                  dey
 C1C0  10                                  bpl     loopLoadColors          
                               ; Repeat until all 8 colors installed
 C1C1  E4
  [ =C1A6 ]
 C1C2  60                                  rts

 C1C3  A9          locc1c3:                lda     #$00
 C1C4  00
 C1C5  85                                  sta     $81
 C1C6  81
 C1C7  85                                  sta     $91
 C1C8  91
 C1C9  85                                  sta     $80
 C1CA  80
 C1CB  85                                  sta     $78
 C1CC  78
 C1CD  85                                  sta     $90
 C1CE  90
 C1CF  85                                  sta     $88
 C1D0  88
 C1D1  A9                                  lda     #$00
 C1D2  00
 C1D3  8D                                  sta     mb_w_00
 C1D4  80 60
 C1D6  8D                                  sta     mb_w_01
 C1D7  81 60
 C1D9  8D                                  sta     mb_w_04
 C1DA  84 60
 C1DC  8D                                  sta     mb_w_05
 C1DD  85 60
 C1DF  8D                                  sta     mb_w_06
 C1E0  86 60
 C1E2  8D                                  sta     mb_w_07
 C1E3  87 60
 C1E5  8D                                  sta     mb_w_09
 C1E6  89 60
 C1E8  8D                                  sta     mb_w_03
 C1E9  83 60
 C1EB  8D                                  sta     mb_w_0d
 C1EC  8D 60
 C1EE  8D                                  sta     mb_w_0e
 C1EF  8E 60
 C1F1  8D                                  sta     mb_w_0f
 C1F2  8F 60
 C1F4  8D                                  sta     mb_w_10
 C1F5  90 60
 C1F7  A9                                  lda     #$0f
 C1F8  0F
 C1F9  8D                                  sta     mb_w_0c
 C1FA  8C 60
 C1FC  60                                  rts

                   ; Used at $c1a6 and $c1b1.
                   ; Appear to be blocks of 8.bytes giving colours for the 
                   various
                   ; blocks of 16 levels.

                   ;                                      Player  Tanker  
                   Flipper Pulsar          Spiker Field 
 C1FD  00          aLevelColors:           .byte   White, Yellow, Purple, 
                   Red,    Cyan+Sparkle,   Green, Blue,   Blue    ; Blue   
                   Levels 1-16
 C1FE  04
 C1FF  08
 C200  0C
 C201  C3
 C202  07
 C203  0B
 C204  0B
 C205  00                                  .byte   White, Green,  Blue,   
                   Purple, Yellow+Unk04,   Cyan,  Red,    Red     ; Red    
                   Levels 17-32
 C206  07
 C207  0B
 C208  08
 C209  44
 C20A  03
 C20B  0C
 C20C  0C
 C20D  00                                  .byte   White, Blue,   Cyan,   
                   Green,  Purple+Sparkle, Red,   Yellow, Yellow  ; Yellow 
                   Levels 33-48
 C20E  0B
 C20F  03
 C210  07
 C211  C8
 C212  0C
 C213  04
 C214  04
 C215  00                                  .byte   White, Blue,   Purple, 
                   Green,  Yellow+Sparkle, Red,   Cyan,   Cyan    ; Cyan   
                   Levels 49-64
 C216  0B
 C217  08
 C218  07
 C219  C4
 C21A  0C
 C21B  03
 C21C  03
 C21D  00                                  .byte   White, Yellow, Purple, 
                   Red,    Cyan+Sparkle,   Green, Black,  Blue    ; Black  
                   Levels 65-80
 C21E  04
 C21F  08
 C220  0C
 C221  C3
 C222  07
 C223  0F
 C224  0B
 C225  00                                  .byte   White, Red,    Purple, 
                   Yellow, Cyan+Sparkle,   Blue,  Green,  Green   ; Green  
                   Levels 81-96
 C226  0C
 C227  08
 C228  04
 C229  C3
 C22A  0B
 C22B  07
 C22C  07
                   .if ADD_LEVEL
                   .endif

                   ; During the level picker, this is the color table used 
                   to draw the preview of the levels
                   ; The index returned here is placed in 'curcolor', but 
                   I'm not yet sure how that becomes an actual color yet..

 C22D  06          LevelSelectColors:      .byte   6           ; Blue
 C22E  03                                  .byte   3           ; Red
 C22F  01                                  .byte   1           ; Yellow
 C230  04                                  .byte   4           ; Cyan
 C231  00                                  .byte   0           ; Black
 C232  05                                  .byte   5           ; Green
                   .if !ADD_LEVEL                      
 C233  05                                  .byte   5           ; Green 
                   again
                   .else
                   .endif                                              
 C234  05                                  .byte   5           ; Should 
                   never be reached

 C235  A6          locc235:                ldx     curplayer
 C236  3D
 C237  B5                                  lda     p1_level,x
 C238  46
 C239  20                                  jsr     get_tube_no
 C23A  E8 C2
 C23C  48                                  pha
 C23D  AC                                  ldy     curtube
 C23E  12 01
 C240  B9                                  lda     lev_scale,y
 C241  8C BC
 C243  49                                  eor     #$ff
 C244  FF
 C245  18                                  clc
 C246  69                                  adc     #$01
 C247  01
 C248  85                                  sta     $5f
 C249  5F
 C24A  85                                  sta     $5d
 C24B  5D
 C24C  A9                                  lda     #$10
 C24D  10
 C24E  38                                  sec
 C24F  E5                                  sbc     $5f
 C250  5F
 C251  85                                  sta     $a0
 C252  A0
 C253  A9                                  lda     #$ff
 C254  FF
 C255  85                                  sta     $5b
 C256  5B
 C257  B9                                  lda     lev_y3d,y
 C258  9C BC
 C25A  85                                  sta     y3d
 C25B  60
 C25C  B9                                  lda     lev_open,y
 C25D  CC BC
 C25F  8D                                  sta     open_level
 C260  11 01
 C262  A5                                  lda     state_after_delay
 C263  02
 C264  C9                                  cmp     #GS_DelayThenPlay
 C265  1E
 C266  D0                                  bne     locc275
 C267  0D
  [ =C275 ]
 C268  B9                                  lda     lev_y2d,y
 C269  AC BC
 C26B  85                                  sta     $68
 C26C  68
 C26D  B9                                  lda     lev_y2db,y
 C26E  BC BC
 C270  85                                  sta     $69
 C271  69
 C272  B8                                  clv
 C273  50                                  bvc     locc28d
 C274  18
  [ =C28D ]
 C275  B9          locc275:                lda     lev_y2d,y
 C276  AC BC
 C278  38                                  sec
 C279  E5                                  sbc     $68
 C27A  68
 C27B  8D                                  sta     $0121
 C27C  21 01
 C27E  B9                                  lda     lev_y2db,y
 C27F  BC BC

 C281  ED                                  .byte $ed, $69, $00           ; 
                   BUGBUG non-zero page, was 'sbc $0069'
 C282  69
 C283  00

 C284  A2                                  ldx     #$03
 C285  03
 C286  4A          locc286:                lsr     a
 C287  6E                                  ror     $0121
 C288  21 01
 C28A  CA                                  dex
 C28B  10                                  bpl     locc286
 C28C  F9
  [ =C286 ]
 C28D  A9          locc28d:                lda     #$00
 C28E  00
 C28F  85                                  sta     $66
 C290  66
 C291  85                                  sta     $67
 C292  67
 C293  A9                                  lda     #$00
 C294  00
 C295  8D                                  sta     $010f
 C296  0F 01
 C298  8D                                  sta     $0110
 C299  10 01
 C29B  A9                                  lda     #$2c
 C29C  2C
 C29D  8D                                  sta     $0113
 C29E  13 01
 C2A0  68                                  pla
 C2A1  A8                                  tay
 C2A2  A2                                  ldx     #$0f
 C2A3  0F
 C2A4  B9          locc2a4:                lda     lev_x,y
 C2A5  7C B9
 C2A7  9D                                  sta     tube_x,x
 C2A8  CE 03
 C2AA  B9                                  lda     lev_y,y
 C2AB  7C BA
 C2AD  9D                                  sta     tube_y,x
 C2AE  DE 03
 C2B0  A9                                  lda     #$00
 C2B1  00
 C2B2  9D                                  sta     $031a,x
 C2B3  1A 03
 C2B5  9D                                  sta     $033a,x
 C2B6  3A 03
 C2B8  9D                                  sta     $039a,x
 C2B9  9A 03
 C2BB  B9                                  lda     lev_angle,y
 C2BC  7C BB
 C2BE  9D                                  sta     tube_angle,x
 C2BF  EE 03
 C2C1  88                                  dey
 C2C2  CA                                  dex
 C2C3  10                                  bpl     locc2a4
 C2C4  DF
  [ =C2A4 ]
 C2C5  A0                                  ldy     #$00
 C2C6  00
 C2C7  A2                                  ldx     #$0f
 C2C8  0F
 C2C9  B9          locc2c9:                lda     tube_x,y
 C2CA  CE 03
 C2CC  38                                  sec
 C2CD  7D                                  adc     tube_x,x
 C2CE  CE 03
 C2D0  6A                                  ror     a
 C2D1  9D                                  sta     mid_x,x
 C2D2  35 04
 C2D4  B9                                  lda     tube_y,y
 C2D5  DE 03
 C2D7  38                                  sec
 C2D8  7D                                  adc     tube_y,x
 C2D9  DE 03
 C2DB  6A                                  ror     a
 C2DC  9D                                  sta     mid_y,x
 C2DD  45 04
 C2DF  88                                  dey
 C2E0  10                                  bpl     locc2e4
 C2E1  02
  [ =C2E4 ]
 C2E2  A0                                  ldy     #$0f
 C2E3  0F
 C2E4  CA          locc2e4:                dex
 C2E5  10                                  bpl     locc2c9
 C2E6  E2
  [ =C2C9 ]
 C2E7  60                                  rts

                   ; Take the level number in A, do the random thing for 
                   level 99, and fetch
                   ; the tube number for the level.  Also return a value 
                   with the tube number
                   ; in the high four bits and $f in the low four bits; 
                   this is used as an
                   ; index into the [][] tables.

                   ; Returns A = High nibble has shape number, low bits 
                   all set

 C2E8  A2          get_tube_no:            ldx     #$00
 C2E9  00
 C2EA  C9                                  cmp     #HIGHEST_LEVEL
 C2EB  62
 C2EC  90                                  bcc     locc2f3
 C2ED  05
  [ =C2F3 ]
 C2EE  AD                                  lda     pokey1_rand
 C2EF  CA 60
 C2F1  29                                  and     #$5f
 C2F2  5F

                   ; This appears to be "high nibble into X, keep low 
                   nibble in A".  I can't
                   ; see why not compute that directly with shifts and 
                   masks instead of a
                   ; subtract loop.  Maybe the $10 here was an 
                   assembly-time constant rather
                   ; than being a deeply-wired-in value?  That's not very 
                   plausible, though,
                   ; as level numbers are shifted by four bits elsewhere.

 C2F3  C9          locc2f3:                cmp     #$10
 C2F4  10
 C2F5  90          locc2f5:                bcc     locc2fb
 C2F6  04
  [ =C2FB ]
 C2F7  E8                                  inx
 C2F8  38                                  sec
 C2F9  E9                                  sbc     #$10
 C2FA  10
 C2FB  C9          locc2fb:                cmp     #$10
 C2FC  10
 C2FD  B0                                  bcs     locc2f5
 C2FE  F6
  [ =C2F5 ]
 C2FF  A8                                  tay
 C300  B9                                  lda     lev_remap,y
 C301  7C BC
 C303  8D                                  sta     curtube
 C304  12 01
 C306  0A                                  asl     a
 C307  0A                                  asl     a
 C308  0A                                  asl     a
 C309  0A                                  asl     a
 C30A  09                                  ora     #$0f
 C30B  0F
 C30C  60                                  rts
 C30D  AD          locc30d:                lda     $0110
 C30E  10 01
 C310  D0                                  bne     locc339
 C311  27
  [ =C339 ]
 C312  A9                                  lda     #$f0
 C313  F0
 C314  85                                  sta     $57
 C315  57
 C316  A2                                  ldx     #$4f
 C317  4F
 C318  20                                  jsr     locc473
 C319  73 C4
 C31B  8D                                  sta     $0110
 C31C  10 01
 C31E  F0                                  beq     locc323
 C31F  03
  [ =C323 ]
 C320  8D                                  sta     $010f
 C321  0F 01
 C323  AD          locc323:                lda     $010f
 C324  0F 01
 C326  D0                                  bne     locc339
 C327  11
  [ =C339 ]
 C328  A9                                  lda     #$10
 C329  10
 C32A  85                                  sta     $57
 C32B  57
 C32C  20                                  jsr     locc453
 C32D  53 C4
 C32F  A5                                  lda     $57
 C330  57
 C331  A2                                  ldx     #$0f
 C332  0F
 C333  20                                  jsr     locc473
 C334  73 C4
 C336  8D                                  sta     $010f
 C337  0F 01
 C339  A9          locc339:                lda     #$01
 C33A  01
 C33B  20                                  jsr     vapp_scale_A_0
 C33C  6A DF
 C33E  A0                                  ldy     #$06
 C33F  06
 C340  84                                  sty     curcolor
 C341  9E
 C342  AE                                  ldx     $0110
 C343  10 01
 C345  F0                                  beq     locc348
 C346  01
  [ =C348 ]
 C347  60                                  rts
 C348  AE          locc348:                ldx     $0113
 C349  13 01
 C34B  D0                                  bne     locc34e
 C34C  01
  [ =C34E ]
 C34D  60                                  rts
 C34E  A2          locc34e:                ldx     #$0f
 C34F  0F
 C350  A9          locc350:                lda     #$c0
 C351  C0
 C352  20                                  jsr     locc3ee
 C353  EE C3
 C355  CA                                  dex
 C356  10                                  bpl     locc350
 C357  F8
  [ =C350 ]
 C358  A0                                  ldy     #$06
 C359  06
 C35A  84                                  sty     curcolor
 C35B  9E
 C35C  A9                                  lda     #$08
 C35D  08
 C35E  20                                  jsr     vapp_sclstat_A_Y
 C35F  4C DF
 C361  A0                                  ldy     #$4f
 C362  4F
 C363  AD                                  lda     $0110
 C364  10 01
 C366  20                                  jsr     locc36e
 C367  6E C3
 C369  A0                                  ldy     #$0f
 C36A  0F
 C36B  AD                                  lda     $010f
 C36C  0F 01
 C36E  D0          locc36e:                bne     locc3b9
 C36F  49
  [ =C3B9 ]
 C370  84                                  sty     $37
 C371  37
 C372  B9                                  lda     $032a,y
 C373  2A 03
 C375  85                                  sta     $61
 C376  61
 C377  B9                                  lda     $031a,y
 C378  1A 03
 C37A  85                                  sta     $62
 C37B  62
 C37C  B9                                  lda     $034a,y
 C37D  4A 03
 C37F  85                                  sta     $63
 C380  63
 C381  B9                                  lda     $033a,y
 C382  3A 03
 C384  85                                  sta     $64
 C385  64
 C386  A2                                  ldx     #$61
 C387  61
 C388  20                                  jsr     locc772
 C389  72 C7
 C38B  A5                                  lda     vidptr_l
 C38C  74
 C38D  85                                  sta     $b0
 C38E  B0
 C38F  A5                                  lda     vidptr_h
 C390  75
 C391  85                                  sta     $b1
 C392  B1
 C393  A2                                  ldx     #$0f
 C394  0F
 C395  AD                                  lda     open_level
 C396  11 01
 C398  F0                                  beq     locc39b
 C399  01
  [ =C39B ]
 C39A  CA                                  dex
 C39B  A9          locc39b:                lda     #$c0
 C39C  C0
 C39D  85                                  sta     draw_z
 C39E  73
 C39F  86                                  stx     $38
 C3A0  38
 C3A1  C6          locc3a1:                dec     $37
 C3A2  37
 C3A3  A5                                  lda     $37
 C3A4  37
 C3A5  29                                  and     #$0f
 C3A6  0F
 C3A7  C9                                  cmp     #$0f
 C3A8  0F
 C3A9  D0                                  bne     locc3b2
 C3AA  07
  [ =C3B2 ]
 C3AB  A5                                  lda     $37
 C3AC  37
 C3AD  18                                  clc
 C3AE  69                                  adc     #$10
 C3AF  10
 C3B0  85                                  sta     $37
 C3B1  37
 C3B2  20          locc3b2:                jsr     locc423
 C3B3  23 C4
 C3B5  C6                                  dec     $38
 C3B6  38
 C3B7  10                                  bpl     locc3a1
 C3B8  E8
  [ =C3A1 ]
 C3B9  60          locc3b9:                rts
 C3BA  A5          locc3ba:                lda     $61
 C3BB  61
 C3BC  38                                  sec
 C3BD  E5                                  sbc     $6a
 C3BE  6A
 C3BF  85                                  sta     $6e
 C3C0  6E
 C3C1  A5                                  lda     $62
 C3C2  62
 C3C3  E5                                  sbc     $6b
 C3C4  6B
 C3C5  85                                  sta     $6f
 C3C6  6F
 C3C7  A5                                  lda     $63
 C3C8  63
 C3C9  38                                  sec
 C3CA  E5                                  sbc     $6c
 C3CB  6C
 C3CC  85                                  sta     $70
 C3CD  70
 C3CE  A5                                  lda     $64
 C3CF  64
 C3D0  E5                                  sbc     $6d
 C3D1  6D
 C3D2  85                                  sta     $71
 C3D3  71
 C3D4  A2                                  ldx     #$6e
 C3D5  6E
 C3D6  20                                  jsr     locdf92
 C3D7  92 DF
 C3D9  A5                                  lda     $61
 C3DA  61
 C3DB  85                                  sta     $6a
 C3DC  6A
 C3DD  A5                                  lda     $62
 C3DE  62
 C3DF  85                                  sta     $6b
 C3E0  6B
 C3E1  A5                                  lda     $63
 C3E2  63
 C3E3  85                                  sta     $6c
 C3E4  6C
 C3E5  A5                                  lda     $64
 C3E6  64
 C3E7  85                                  sta     $6d
 C3E8  6D
 C3E9  A9                                  lda     #$c0
 C3EA  C0
 C3EB  85                                  sta     draw_z
 C3EC  73
 C3ED  60                                  rts
 C3EE  86          locc3ee:                stx     $37
 C3EF  37
 C3F0  48                                  pha
 C3F1  A4                                  ldy     curcolor
 C3F2  9E
 C3F3  A9                                  lda     #$08
 C3F4  08
 C3F5  20                                  jsr     vapp_sclstat_A_Y
 C3F6  4C DF
 C3F8  20                                  jsr     locc43c
 C3F9  3C C4
 C3FB  A2                                  ldx     #$61
 C3FC  61
 C3FD  20                                  jsr     locc772
 C3FE  72 C7
 C400  68                                  pla
 C401  85                                  sta     draw_z
 C402  73
 C403  48                                  pha
 C404  20                                  jsr     locc423
 C405  23 C4
 C407  C6                                  dec     $37
 C408  37
 C409  A4                                  ldy     curcolor
 C40A  9E
 C40B  A9                                  lda     #$00
 C40C  00
 C40D  85                                  sta     draw_z
 C40E  73
 C40F  A9                                  lda     #$08
 C410  08
 C411  20                                  jsr     vapp_sclstat_A_Y
 C412  4C DF
 C414  20                                  jsr     locc423
 C415  23 C4
 C417  68                                  pla
 C418  85                                  sta     draw_z
 C419  73
 C41A  20                                  jsr     locc43c
 C41B  3C C4
 C41D  20                                  jsr     locc3ba
 C41E  BA C3
 C420  A6                                  ldx     $37
 C421  37
 C422  60                                  rts
 C423  A6          locc423:                ldx     $37
 C424  37
 C425  BD                                  lda     $032a,x
 C426  2A 03
 C428  85                                  sta     $61
 C429  61
 C42A  BD                                  lda     $031a,x
 C42B  1A 03
 C42D  85                                  sta     $62
 C42E  62
 C42F  BD                                  lda     $034a,x
 C430  4A 03
 C432  85                                  sta     $63
 C433  63
 C434  BD                                  lda     $033a,x
 C435  3A 03
 C437  85                                  sta     $64
 C438  64
 C439  4C                                  jmp     locc3ba
 C43A  BA C3
 C43C  A6          locc43c:                ldx     $37
 C43D  37
 C43E  BD                                  lda     $036a,x
 C43F  6A 03
 C441  85                                  sta     $61
 C442  61
 C443  BD                                  lda     $035a,x
 C444  5A 03
 C446  85                                  sta     $62
 C447  62
 C448  BD                                  lda     $038a,x
 C449  8A 03
 C44B  85                                  sta     $63
 C44C  63
 C44D  BD                                  lda     $037a,x
 C44E  7A 03
 C450  85                                  sta     $64
 C451  64
 C452  60                                  rts
 C453  A5          locc453:                lda     $5b
 C454  5B
 C455  D0                                  bne     locc471
 C456  1A
  [ =C471 ]
 C457  A5                                  lda     $57
 C458  57
 C459  38                                  sec
 C45A  E5                                  sbc     $5f
 C45B  5F
 C45C  90                                  bcc     locc460
 C45D  02
  [ =C460 ]
 C45E  C9                                  cmp     #$0c
 C45F  0C
 C460  B0          locc460:                bcs     locc471
 C461  0F
  [ =C471 ]
 C462  A5                                  lda     $5f
 C463  5F
 C464  18                                  clc
 C465  69                                  adc     #$0f
 C466  0F
 C467  B0                                  bcs     locc46b
 C468  02
  [ =C46B ]
 C469  C9                                  cmp     #$f0
 C46A  F0
 C46B  90          locc46b:                bcc     locc46f
 C46C  02
  [ =C46F ]
 C46D  A9                                  lda     #$f0
 C46E  F0
 C46F  85          locc46f:                sta     $57
 C470  57
 C471  60          locc471:                rts

 C472  DB                                  .byte   $db

 C473  85          locc473:                sta     $57
 C474  57
 C475  86                                  stx     $38
 C476  38
 C477  A9                                  lda     #$00
 C478  00
 C479  85                                  sta     fscale
 C47A  59
 C47B  A2                                  ldx     #$0f
 C47C  0F
 C47D  86                                  stx     $37
 C47E  37
 C47F  A6          locc47f:                ldx     $37
 C480  37
 C481  BD                                  lda     tube_x,x
 C482  CE 03
 C484  85                                  sta     $56
 C485  56
 C486  BD                                  lda     tube_y,x
 C487  DE 03
 C489  85                                  sta     $58
 C48A  58
 C48B  20                                  jsr     locc098
 C48C  98 C0
 C48E  A6                                  ldx     $38
 C48F  38
 C490  A4                                  ldy     $61
 C491  61
 C492  A5                                  lda     $62
 C493  62
 C494  30                                  bmi     locc4a3
 C495  0D
  [ =C4A3 ]
 C496  C9                                  cmp     #$04
 C497  04
 C498  90                                  bcc     locc4a0
 C499  06
  [ =C4A0 ]
 C49A  A0                                  ldy     #$ff
 C49B  FF
 C49C  A9                                  lda     #$03
 C49D  03
 C49E  E6                                  inc     fscale
 C49F  59
 C4A0  B8          locc4a0:                clv
 C4A1  50                                  bvc     locc4ad
 C4A2  0A
  [ =C4AD ]
 C4A3  C9          locc4a3:                cmp     #$fc
 C4A4  FC
 C4A5  B0                                  bcs     locc4ad
 C4A6  06
  [ =C4AD ]
 C4A7  A0                                  ldy     #$01
 C4A8  01
 C4A9  A9                                  lda     #$fc
 C4AA  FC
 C4AB  E6                                  inc     fscale
 C4AC  59
 C4AD  9D          locc4ad:                sta     $031a,x
 C4AE  1A 03
 C4B0  98                                  tya
 C4B1  9D                                  sta     $032a,x
 C4B2  2A 03
 C4B4  A4                                  ldy     $63
 C4B5  63
 C4B6  A5                                  lda     $64
 C4B7  64
 C4B8  30                                  bmi     locc4c7
 C4B9  0D
  [ =C4C7 ]
 C4BA  C9                                  cmp     #$04
 C4BB  04
 C4BC  90                                  bcc     locc4c4
 C4BD  06
  [ =C4C4 ]
 C4BE  A0                                  ldy     #$ff
 C4BF  FF
 C4C0  A9                                  lda     #$03
 C4C1  03
 C4C2  E6                                  inc     fscale
 C4C3  59
 C4C4  B8          locc4c4:                clv
 C4C5  50                                  bvc     locc4d1
 C4C6  0A
  [ =C4D1 ]
 C4C7  C9          locc4c7:                cmp     #$fc
 C4C8  FC
 C4C9  B0                                  bcs     locc4d1
 C4CA  06
  [ =C4D1 ]
 C4CB  A9                                  lda     #$fc
 C4CC  FC
 C4CD  A0                                  ldy     #$01
 C4CE  01
 C4CF  E6                                  inc     fscale
 C4D0  59
 C4D1  9D          locc4d1:                sta     $033a,x
 C4D2  3A 03
 C4D4  98                                  tya
 C4D5  9D                                  sta     $034a,x
 C4D6  4A 03
 C4D8  C6                                  dec     $38
 C4D9  38
 C4DA  C6                                  dec     $37
 C4DB  37
 C4DC  10                                  bpl     locc47f
 C4DD  A1
  [ =C47F ]
 C4DE  A5                                  lda     fscale
 C4DF  59
 C4E0  60                                  rts
 C4E1  20          locc4e1:                jsr     get_tube_no
 C4E2  E8 C2
 C4E4  85                                  sta     $36
 C4E5  36
 C4E6  86                                  stx     $35
 C4E7  35
 C4E8  A9                                  lda     #$00
 C4E9  00
 C4EA  85                                  sta     draw_z
 C4EB  73
 C4EC  A9                                  lda     #$05
 C4ED  05
 C4EE  20                                  jsr     vapp_scale_A_0
 C4EF  6A DF
 C4F1  A5                                  lda     $35
 C4F2  35
 C4F3  29                                  and     #$07
 C4F4  07
 C4F5  AA                                  tax
 C4F6  BC                                  ldy     LevelSelectColors,x
 C4F7  2D C2
 C4F9  84                                  sty     curcolor
 C4FA  9E
 C4FB  A9                                  lda     #$08
 C4FC  08
 C4FD  20                                  jsr     vapp_sclstat_A_Y
 C4FE  4C DF
 C500  AE                                  ldx     curtube
 C501  12 01
 C503  A5                                  lda     $36
 C504  36
 C505  BC                                  ldy     lev_open,x
 C506  CC BC
 C508  D0                                  bne     locc50d
 C509  03
  [ =C50D ]
 C50A  38                                  sec
 C50B  E9                                  sbc     #$0f
 C50C  0F
 C50D  A8          locc50d:                tay
 C50E  B9                                  lda     lev_y,y
 C50F  7C BA
 C511  85                                  sta     $57
 C512  57
 C513  49                                  eor     #$80
 C514  80
 C515  AA                                  tax
 C516  B9                                  lda     lev_x,y
 C517  7C B9
 C519  85                                  sta     $56
 C51A  56
 C51B  49                                  eor     #$80
 C51C  80
 C51D  20                                  jsr     vapp_ldraw_A_X
 C51E  75 DF
 C520  A9                                  lda     #$c0
 C521  C0
 C522  85                                  sta     draw_z
 C523  73
 C524  A2                                  ldx     #$0f
 C525  0F
 C526  86                                  stx     $38
 C527  38
 C528  A4          locc528:                ldy     $36
 C529  36
 C52A  B9                                  lda     lev_x,y
 C52B  7C B9
 C52D  AA                                  tax
 C52E  38                                  sec
 C52F  E5                                  sbc     $56
 C530  56
 C531  48                                  pha
 C532  86                                  stx     $56
 C533  56
 C534  B9                                  lda     lev_y,y
 C535  7C BA
 C537  A8                                  tay
 C538  38                                  sec
 C539  E5                                  sbc     $57
 C53A  57
 C53B  AA                                  tax
 C53C  84                                  sty     $57
 C53D  57
 C53E  68                                  pla
 C53F  20                                  jsr     vapp_ldraw_A_X
 C540  75 DF
 C542  C6                                  dec     $36
 C543  36
 C544  C6                                  dec     $38
 C545  38
 C546  10                                  bpl     locc528
 C547  E0
  [ =C528 ]
 C548  A9                                  lda     #$01
 C549  01
 C54A  4C                                  jmp     vapp_scale_A_0
 C54B  6A DF
 C54D  AD          locc54d:                lda     $0115
 C54E  15 01
 C550  F0                                  beq     locc5b1
 C551  5F
  [ =C5B1 ]
 C552  A5                                  lda     $5f
 C553  5F
 C554  48                                  pha
 C555  A5                                  lda     $5b
 C556  5B
 C557  48                                  pha
 C558  A5                                  lda     $a0
 C559  A0
 C55A  48                                  pha
 C55B  A9                                  lda     #$e8
 C55C  E8
 C55D  85                                  sta     $5f
 C55E  5F
 C55F  A9                                  lda     #$ff
 C560  FF
 C561  85                                  sta     $5b
 C562  5B
 C563  A9                                  lda     #$28
 C564  28
 C565  85                                  sta     $a0
 C566  A0
 C567  A2                                  ldx     #$07
 C568  07
 C569  86                                  stx     $37
 C56A  37
 C56B  A6          locc56b:                ldx     $37
 C56C  37
 C56D  BD                                  lda     $03fe,x
 C56E  FE 03
 C570  F0                                  beq     locc5a4
 C571  32
  [ =C5A4 ]
 C572  85                                  sta     $57
 C573  57
 C574  A9                                  lda     #$80
 C575  80
 C576  85                                  sta     $56
 C577  56
 C578  A9                                  lda     #$80
 C579  80
 C57A  85                                  sta     $58
 C57B  58
 C57C  A5                                  lda     curlevel
 C57D  9F
 C57E  C9                                  cmp     #$05
 C57F  05
 C580  B0                                  bcs     locc587
 C581  05
  [ =C587 ]
 C582  A9                                  lda     #$06
 C583  06
 C584  B8                                  clv
 C585  50                                  bvc     locc590
 C586  09
  [ =C590 ]
 C587  8A          locc587:                txa
 C588  29                                  and     #$07
 C589  07
 C58A  C9                                  cmp     #$07
 C58B  07
 C58C  D0                                  bne     locc590
 C58D  02
  [ =C590 ]
 C58E  A9                                  lda     #$04
 C58F  04
 C590  85          locc590:                sta     curcolor
 C591  9E
 C592  A8                                  tay
 C593  A9                                  lda     #$08
 C594  08
 C595  20                                  jsr     vapp_sclstat_A_Y
 C596  4C DF
 C598  A5                                  lda     $37
 C599  37
 C59A  29                                  and     #$03
 C59B  03
 C59C  0A                                  asl     a
 C59D  69                                  adc     #$0a
 C59E  0A
 C59F  85                                  sta     $55
 C5A0  55
 C5A1  20                                  jsr     locbd09
 C5A2  09 BD
 C5A4  C6          locc5a4:                dec     $37
 C5A5  37
 C5A6  10                                  bpl     locc56b
 C5A7  C3
  [ =C56B ]
 C5A8  68                                  pla
 C5A9  85                                  sta     $a0
 C5AA  A0
 C5AB  68                                  pla
 C5AC  85                                  sta     $5b
 C5AD  5B
 C5AE  68                                  pla
 C5AF  85                                  sta     $5f
 C5B0  5F
 C5B1  AD          locc5b1:                lda     $011f
 C5B2  1F 01
 C5B4  F0                                  beq     locc5c1
 C5B5  0B
  [ =C5C1 ]

                   ; If P1 score is in the 150K-160K range, increment one 
                   byte of RAM in the
                   ; $0200-$0299 range, depending on the low two digits of 
                   the score.  This is
                   ; probably responsible for a few of the game crashes 
                   I've seen; there are
                   ; some bytes that if struck by this _will_ cause 
                   trouble.

 C5B6  A6                                  ldx     p1_score_h
 C5B7  42
 C5B8  E0                                  cpx     #$15
 C5B9  15
 C5BA  90                                  bcc     locc5c1
 C5BB  05
  [ =C5C1 ]
 C5BC  A6                                  ldx     p1_score_l
 C5BD  40
 C5BE  FE                                  inc     player_seg,x
 C5BF  00 02
 C5C1  60          locc5c1:                rts
 C5C2  AD          locc5c2:                lda     $0110
 C5C3  10 01
 C5C5  F0                                  beq     locc5c8
 C5C6  01
  [ =C5C8 ]
 C5C7  60                                  rts
 C5C8  A5          locc5c8:                lda     $5b
 C5C9  5B
 C5CA  D0                                  bne     locc5d3
 C5CB  07
  [ =C5D3 ]
 C5CC  A5                                  lda     $5f
 C5CD  5F
 C5CE  C9                                  cmp     #$f0
 C5CF  F0
 C5D0  90                                  bcc     locc5d3
 C5D1  01
  [ =C5D3 ]
 C5D2  60                                  rts
 C5D3  A9          locc5d3:                lda     #$01
 C5D4  01
 C5D5  20                                  jsr     vapp_scale_A_0
 C5D6  6A DF
 C5D8  A5                                  lda     vidptr_l
 C5D9  74
 C5DA  48                                  pha
 C5DB  A5                                  lda     vidptr_h
 C5DC  75
 C5DD  48                                  pha
 C5DE  A9                                  lda     #$00
 C5DF  00
 C5E0  85                                  sta     $38
 C5E1  38
 C5E2  85                                  sta     $a9
 C5E3  A9
 C5E4  A2                                  ldx     #$0f
 C5E5  0F
 C5E6  AD                                  lda     open_level
 C5E7  11 01
 C5E9  F0                                  beq     locc5ec
 C5EA  01
  [ =C5EC ]
 C5EB  CA                                  dex
 C5EC  86          locc5ec:                stx     $37
 C5ED  37
 C5EE  A2          locc5ee:                ldx     #$03
 C5EF  03
 C5F0  A4                                  ldy     $a9
 C5F1  A9
 C5F2  BD          locc5f2:                lda     locc669,x
 C5F3  69 C6
 C5F5  91                                  sta     (vidptr_l),y
 C5F6  74
 C5F7  C8                                  iny
 C5F8  CA                                  dex
 C5F9  10                                  bpl     locc5f2
 C5FA  F7
  [ =C5F2 ]
 C5FB  84                                  sty     $a9
 C5FC  A9
 C5FD  AD                                  lda     $0114
 C5FE  14 01
 C600  D0                                  bne     locc64c
 C601  4A
  [ =C64C ]
 C602  A6                                  ldx     $38
 C603  38
 C604  BD                                  lda     $039a,x
 C605  9A 03
 C607  30                                  bmi     locc61a
 C608  11
  [ =C61A ]
 C609  A2                                  ldx     #$0b
 C60A  0B
 C60B  A4                                  ldy     $a9
 C60C  A9
 C60D  B1          locc60d:                lda     ($aa),y
 C60E  AA
 C60F  91                                  sta     (vidptr_l),y
 C610  74
 C611  C8                                  iny
 C612  CA                                  dex
 C613  10                                  bpl     locc60d
 C614  F8
  [ =C60D ]
 C615  84                                  sty     $a9
 C616  A9
 C617  B8                                  clv
 C618  50                                  bvc     locc649
 C619  2F
  [ =C649 ]
 C61A  A4          locc61a:                ldy     $a9
 C61B  A9
 C61C  B1                                  lda     ($aa),y
 C61D  AA
 C61E  91                                  sta     (vidptr_l),y
 C61F  74
 C620  85                                  sta     $6c
 C621  6C
 C622  C8                                  iny
 C623  B1                                  lda     ($aa),y
 C624  AA
 C625  91                                  sta     (vidptr_l),y
 C626  74
 C627  C9                                  cmp     #$10
 C628  10
 C629  90                                  bcc     locc62d
 C62A  02
  [ =C62D ]
 C62B  09                                  ora     #$e0
 C62C  E0
 C62D  85          locc62d:                sta     $6d
 C62E  6D
 C62F  C8                                  iny
 C630  B1                                  lda     ($aa),y
 C631  AA
 C632  91                                  sta     (vidptr_l),y
 C633  74
 C634  85                                  sta     $6a
 C635  6A
 C636  C8                                  iny
 C637  B1                                  lda     ($aa),y
 C638  AA
 C639  91                                  sta     (vidptr_l),y
 C63A  74
 C63B  C9                                  cmp     #$10
 C63C  10
 C63D  90                                  bcc     locc641
 C63E  02
  [ =C641 ]
 C63F  09                                  ora     #$e0
 C640  E0
 C641  85          locc641:                sta     $6b
 C642  6B
 C643  C8                                  iny
 C644  84                                  sty     $a9
 C645  A9
 C646  20                                  jsr     locc6c7
 C647  C7 C6
 C649  B8          locc649:                clv
 C64A  50                                  bvc     locc652
 C64B  06
  [ =C652 ]
 C64C  20          locc64c:                jsr     locc66d
 C64D  6D C6
 C64F  20                                  jsr     locc6c7
 C650  C7 C6
 C652  A6          locc652:                ldx     $38
 C653  38
 C654  1E                                  asl     $039a,x
 C655  9A 03
 C657  E6                                  inc     $38
 C658  38
 C659  C6                                  dec     $37
 C65A  37
 C65B  10                                  bpl     locc5ee
 C65C  91
  [ =C5EE ]
 C65D  68                                  pla
 C65E  85                                  sta     $ab
 C65F  AB
 C660  68                                  pla
 C661  85                                  sta     $aa
 C662  AA
 C663  A4                                  ldy     $a9
 C664  A9
 C665  88                                  dey
 C666  4C                                  jmp     inc_vi.word
 C667  5F DF

                   ; These four.bytes are.byte-reversed video code.  The 
                   code is
                   ; 6805  vstat z=0 c=5 sparkle=1
                   ; 8040  vcentre
                   ; This is used by the loop at c5f2.

 C669  80          locc669:                .byte   $80     
 C66A  40                                  .byte   $40     
 C66B  68                                  .byte   $68     
 C66C  05                                  .byte   $05     

 C66D  A5          locc66d:                lda     $38
 C66E  38
 C66F  AA                                  tax
 C670  18                                  clc
 C671  69                                  adc     #$01
 C672  01
 C673  29                                  and     #$0f
 C674  0F
 C675  A8                                  tay
 C676  BD                                  lda     $036a,x
 C677  6A 03
 C679  38                                  sec
 C67A  79                                  adc     $036a,y
 C67B  6A 03
 C67D  85                                  sta     $61
 C67E  61
 C67F  BD                                  lda     $035a,x
 C680  5A 03
 C682  79                                  adc     $035a,y
 C683  5A 03
 C685  85                                  sta     $62
 C686  62
 C687  0A                                  asl     a
 C688  66                                  ror     $62
 C689  62
 C68A  66                                  ror     $61
 C68B  61
 C68C  BD                                  lda     $038a,x
 C68D  8A 03
 C68F  38                                  sec
 C690  79                                  adc     $038a,y
 C691  8A 03
 C693  85                                  sta     $63
 C694  63
 C695  BD                                  lda     $037a,x
 C696  7A 03
 C698  79                                  adc     $037a,y
 C699  7A 03
 C69B  85                                  sta     $64
 C69C  64
 C69D  0A                                  asl     a
 C69E  66                                  ror     $64
 C69F  64
 C6A0  66                                  ror     $63
 C6A1  63
 C6A2  A4                                  ldy     $a9
 C6A3  A9
 C6A4  A5                                  lda     $63
 C6A5  63
 C6A6  91                                  sta     (vidptr_l),y
 C6A7  74
 C6A8  C8                                  iny
 C6A9  85                                  sta     $6c
 C6AA  6C
 C6AB  A5                                  lda     $64
 C6AC  64
 C6AD  85                                  sta     $6d
 C6AE  6D
 C6AF  29                                  and     #$1f
 C6B0  1F
 C6B1  91                                  sta     (vidptr_l),y
 C6B2  74
 C6B3  C8                                  iny
 C6B4  A5                                  lda     $61
 C6B5  61
 C6B6  91                                  sta     (vidptr_l),y
 C6B7  74
 C6B8  C8                                  iny
 C6B9  85                                  sta     $6a
 C6BA  6A
 C6BB  A5                                  lda     $62
 C6BC  62
 C6BD  85                                  sta     $6b
 C6BE  6B
 C6BF  29                                  and     #$1f
 C6C0  1F
 C6C1  91                                  sta     (vidptr_l),y
 C6C2  74
 C6C3  C8                                  iny
 C6C4  84                                  sty     $a9
 C6C5  A9
 C6C6  60                                  rts
 C6C7  A6          locc6c7:                ldx     $38
 C6C8  38
 C6C9  BD                                  lda     lane_spike_height,x
 C6CA  AC 03
 C6CC  D0                                  bne     locc6e4
 C6CD  16
  [ =C6E4 ]
 C6CE  A4                                  ldy     $a9
 C6CF  A9
 C6D0  A2                                  ldx     #$03
 C6D1  03
 C6D2  A9          locc6d2:                lda     #$00
 C6D3  00
 C6D4  91                                  sta     (vidptr_l),y
 C6D5  74
 C6D6  C8                                  iny
 C6D7  A9                                  lda     #$71
 C6D8  71
 C6D9  91                                  sta     (vidptr_l),y
 C6DA  74
 C6DB  C8                                  iny
 C6DC  CA                                  dex
 C6DD  10                                  bpl     locc6d2
 C6DE  F3
  [ =C6D2 ]
 C6DF  84                                  sty     $a9
 C6E0  A9
 C6E1  B8                                  clv
 C6E2  50                                  bvc     locc73b
 C6E3  57
  [ =C73B ]
 C6E4  85          locc6e4:                sta     $57
 C6E5  57
 C6E6  20                                  jsr     locc453
 C6E7  53 C4
 C6E9  BD                                  lda     mid_x,x
 C6EA  35 04
 C6EC  85                                  sta     $56
 C6ED  56
 C6EE  BD                                  lda     mid_y,x
 C6EF  45 04
 C6F1  85                                  sta     $58
 C6F2  58
 C6F3  20                                  jsr     locc098
 C6F4  98 C0
 C6F6  20                                  jsr     locc73c
 C6F7  3C C7
 C6F9  A6                                  ldx     $38
 C6FA  38
 C6FB  BD                                  lda     $039a,x
 C6FC  9A 03
 C6FE  29                                  and     #$40
 C6FF  40
 C700  F0                                  beq     locc721
 C701  1F
  [ =C721 ]
 C702  20                                  jsr     locbd3e
 C703  3E BD
 C705  AD                                  lda     pokey1_rand
 C706  CA 60
 C708  29                                  and     #$02
 C709  02
 C70A  18                                  clc
 C70B  69                                  adc     #$1c
 C70C  1C
 C70D  AA                                  tax
 C70E  BD                                  lda     graphic_table+1,x
 C70F  C9 CE
 C711  C8                                  iny
 C712  91                                  sta     (vidptr_l),y
 C713  74
 C714  88                                  dey
 C715  BD                                  lda     graphic_table,x
 C716  C8 CE
 C718  91                                  sta     (vidptr_l),y
 C719  74
 C71A  C8                                  iny
 C71B  C8                                  iny
 C71C  84                                  sty     $a9
 C71D  A9
 C71E  B8                                  clv
 C71F  50                                  bvc     locc73b
 C720  1A
  [ =C73B ]
 C721  A4          locc721:                ldy     $a9
 C722  A9
 C723  A9                                  lda     #$00
 C724  00
 C725  91                                  sta     (vidptr_l),y
 C726  74
 C727  C8                                  iny
 C728  A9                                  lda     #$68
 C729  68
 C72A  91                                  sta     (vidptr_l),y
 C72B  74
 C72C  C8                                  iny
 C72D  AD                                  lda     $3db2
 C72E  B2 3D
 C730  91                                  sta     (vidptr_l),y
 C731  74
 C732  C8                                  iny
 C733  AD                                  lda     $3db3
 C734  B3 3D
 C736  91                                  sta     (vidptr_l),y
 C737  74
 C738  C8                                  iny
 C739  84                                  sty     $a9
 C73A  A9
 C73B  60          locc73b:                rts
 C73C  A4          locc73c:                ldy     $a9
 C73D  A9
 C73E  A5                                  lda     $63
 C73F  63
 C740  38                                  sec
 C741  E5                                  sbc     $6c
 C742  6C
 C743  91                                  sta     (vidptr_l),y
 C744  74
 C745  C8                                  iny
 C746  A5                                  lda     $64
 C747  64
 C748  E5                                  sbc     $6d
 C749  6D
 C74A  29                                  and     #$1f
 C74B  1F
 C74C  91                                  sta     (vidptr_l),y
 C74D  74
 C74E  C8                                  iny
 C74F  A5                                  lda     $61
 C750  61
 C751  38                                  sec
 C752  E5                                  sbc     $6a
 C753  6A
 C754  91                                  sta     (vidptr_l),y
 C755  74
 C756  C8                                  iny
 C757  A5                                  lda     $62
 C758  62
 C759  E5                                  sbc     $6b
 C75A  6B
 C75B  29                                  and     #$1f
 C75C  1F
 C75D  09                                  ora     #$a0
 C75E  A0
 C75F  91                                  sta     (vidptr_l),y
 C760  74
 C761  C8                                  iny
 C762  84                                  sty     $a9
 C763  A9
 C764  60                                  rts

                   ; On entry, X contains zero-page address of a four.byte 
                   block, holding
                   ; AA BB CC DD.  Then, the following are appended to the 
                   video list:
                   ;       vscale  b=1 l=0
                   ;       vcentre
                   ;       vldraw  x=X y=Y z=off
                   ; where X=DDCC and Y=BBAA, in each case taken as 13-bit 
                   signed numbers
                   ; (ie, the high three bits are dropped).

 C765  A0          vapp_to_X_:             ldy     #$00
 C766  00
 C767  98                                  tya
 C768  91                                  sta     (vidptr_l),y
 C769  74
 C76A  A9                                  lda     #$71
 C76B  71
 C76C  C8                                  iny
 C76D  91                                  sta     (vidptr_l),y
 C76E  74
 C76F  C8                                  iny
 C770  D0                                  bne     locc774
 C771  02
  [ =C774 ]
 C772  A0          locc772:                ldy     #$00
 C773  00
 C774  A9          locc774:                lda     #$40
 C775  40
 C776  91                                  sta     (vidptr_l),y
 C777  74
 C778  A9                                  lda     #$80
 C779  80
 C77A  C8                                  iny
 C77B  91                                  sta     (vidptr_l),y
 C77C  74
 C77D  C8                                  iny
 C77E  B5                                  lda     $02,x
 C77F  02
 C780  85                                  sta     $6c
 C781  6C
 C782  91                                  sta     (vidptr_l),y
 C783  74
 C784  C8                                  iny
 C785  B5                                  lda     timectr,x
 C786  03
 C787  85                                  sta     $6d
 C788  6D
 C789  29                                  and     #$1f
 C78A  1F
 C78B  91                                  sta     (vidptr_l),y
 C78C  74
 C78D  B5                                  lda     gamestate,x
 C78E  00
 C78F  85                                  sta     $6a
 C790  6A
 C791  C8                                  iny
 C792  91                                  sta     (vidptr_l),y
 C793  74
 C794  B5                                  lda     $01,x
 C795  01
 C796  85                                  sta     $6b
 C797  6B
 C798  29                                  and     #$1f
 C799  1F
 C79A  C8                                  iny
 C79B  91                                  sta     (vidptr_l),y
 C79C  74
 C79D  4C                                  jmp     inc_vi.word
 C79E  5F DF
 C7A0  20          locc7a0:                jsr     loccd95
 C7A1  95 CD
 C7A3  A9                                  lda     #GS_GameStartup
 C7A4  00
 C7A5  85                                  sta     gamestate
 C7A6  00

                   ; This appears to be the game's main loop, from here 
                   through $c7bb.
                   ; (This does not apply to reset-in-service-mode 
                   selftest, which has its
                   ; own, different, main loop.)

 C7A7  A5          GameMainLoop:           lda     $53
 C7A8  53
 C7A9  C9                                  cmp     #$09
 C7AA  09
 C7AB  90                                  bcc     GameMainLoop
 C7AC  FA
  [ =C7A7 ]

 C7AD  A9                                  lda     #$00
 C7AE  00
 C7AF  85                                  sta     $53
 C7B0  53

 C7B1  20                                  jsr     locc7bd
 C7B2  BD C7
 C7B4  20                                  jsr     locc891
 C7B5  91 C8
 C7B7  20                                  jsr     locb1b6
 C7B8  B6 B1
 C7BA  18                                  clc
 C7BB  90                                  bcc     GameMainLoop
 C7BC  EA
  [ =C7A7 ]

 C7BD  AD          locc7bd:                lda     optsw1
 C7BE  00 0D

                   ; This and and cmp tests one of the bonus-coins bits 
                   and the coinage bits;
                   ; the compare will show equal if "bonus coins" is set 
                   to one of
                   ; "1 each 5", "1 each 3", or demo mode (frozen or not) 
                   and coinage is
                   ; set to free play.  Why this is a useful thing to test 
                   I have no idea;
                   ; perhaps it's documented as a magic combination?
                   ; Another disassembly comments this as checking for 
                   demonstration
                   ; freeze mode, which is inconsistent with the layout of 
                   the bits in
                   ; $0d00 - for it to be that, it'd have to be and #$e0, 
                   cmp #$e0.

 C7C0  29                                  and     #$83
 C7C1  83
 C7C2  C9                                  cmp     #$82
 C7C3  82
 C7C4  F0                                  beq     locc7d9
 C7C5  13
  [ =C7D9 ]
 C7C6  20                                  jsr     loca7d2
 C7C7  D2 A7
 C7C9  A6                                  ldx     gamestate
 C7CA  00
 C7CB  A5                                  lda     zap_fire_new
 C7CC  4E
 C7CD  09                                  ora     #$80
 C7CE  80
 C7CF  85                                  sta     zap_fire_new
 C7D0  4E
 C7D1  BD                                  lda     
                   GameStateDispatchTable+1,x
 C7D2  DB C7
 C7D4  48                                  pha
 C7D5  BD                                  lda     GameStateDispatchTable,x
 C7D6  DA C7
 C7D8  48                                  pha
 C7D9  60          locc7d9:                rts

                   ; Jump table used by the code at c7d1
                   ; Indexed by general game state.

 C7DA  0B C9       GameStateDispatchTable: .word   State_GameStartup-1     
                       ; 00 - Game Startup
 C7DC  3F C9                               .word   State_LevelStartup-1    
                       ; 02 - Level Startup
 C7DE  0A 97                               .word   State_Playing-1         
                       ; 04 - Playing
 C7E0  AE C9                               .word   State_Death-1           
                       ; 06 - Death Start
 C7E2  F0 C9                               .word   State_LevelBegin-1      
                       ; 08 - Level Begin?
 C7E4  FF C7                               .word   State_Delay-1           
                       ; 0A - Avoid Spikes, high-score, countdowns
 C7E6  00 00                               .word   0000                    
                       ; 0C - Unused, we assume
 C7E8  8B C9                               .word   State_ZoomOffEnd-1      
                       ; 0E - Zoomed off end of level
 C7EA  3E AC                               .word   state_10-1              
                       ; 10 - ???
 C7EC  6D AD                               .word   State_EnterInitials-1   
                       ; 12 - Entering Initials
 C7EE  17 CA                               .word   state_14-1              
                       ; 14 - ???
 C7F0  48 91                               .word   State_LevelSelect-1     
                       ; 16 - Level Selection Startup
 C7F2  4A 90                               .word   State_ZoomOntoNew-1     
                       ; 18 - Zoomed into new level
 C7F4  E6 B0                               .word   state_1a-1              
                       ; 1A - ???
 C7F6  07 91                               .word   state_1c-1              
                       ; 1C - ???
 C7F8  7A C9                               .word   State_DelayThenPlay-1   
                       ; 1E - A brief pause then flips to Playing state
 C7FA  28 97                               .word   State_ZoomingDown-1     
                       ; 20 - Zooing down tube
 C7FC  E0 D7                               .word   State_ServiceDisplay-1  
                       ; 22 - Service display
 C7FE  17 A6                               .word   
                   State_HighScoreExplosion-1  ; 24 - High Score Explosion

                   ;-------------------------------------------------------
                   ----------------------
                   ; State_Delay
                   ;-------------------------------------------------------
                   ----------------------
                   ; This state is used as a delay with the player input 
                   (whether in-game or
                   ; during high score input, etc) still active.  When the 
                   delay has expired,
                   ; whatever value was in 'state_after_delay' becomes the 
                   new gamestate.
                   ;-------------------------------------------------------
                   ----------------------

 C800  A5          State_Delay:            lda     timectr
 C801  03
 C802  2D                                  and     $016b
 C803  6B 01
 C805  D0                                  bne     locc818
 C806  11
  [ =C818 ]
 C807  A5                                  lda     countdown_timer
 C808  04
 C809  F0                                  beq     locc80d
 C80A  02
  [ =C80D ]
 C80B  C6                                  dec     countdown_timer
 C80C  04
 C80D  D0          locc80d:                bne     locc818
 C80E  09
  [ =C818 ]
 C80F  A5                                  lda     state_after_delay       
                       ; Replace game state with "next pending" state 
                   after delay
 C810  02
 C811  85                                  sta     gamestate
 C812  00
 C813  A9                                  lda     #$00
 C814  00
 C815  8D                                  sta     $016b
 C816  6B 01
 C818  4C          locc818:                jmp     move_player
 C819  49 97

                   ; Check to see if either START button is pressed, to 
                   start a new game.
                   ; Called only when credits > 0.

 C81B  A5          check_start:            lda     credits
 C81C  06
 C81D  A0                                  ldy     #$00
 C81E  00
 C81F  C9                                  cmp     #$02
 C820  02
 C821  A5                                  lda     zap_fire_new
 C822  4E
 C823  29                                  and     #$60                ; 
                   start1 & start2
 C824  60
 C825  84                                  sty     zap_fire_new
 C826  4E
 C827  F0                                  beq     locc871             ; 
                   branch if neither pressed
 C828  48
  [ =C871 ]
 C829  B0                                  bcs     locc830
 C82A  05
  [ =C830 ]
 C82B  29                                  and     #$20                ; 
                   start1
 C82C  20
 C82D  B8                                  clv
 C82E  50                                  bvc     locc835
 C82F  05
  [ =C835 ]
 C830  C8          locc830:                iny
 C831  C6                                  dec     credits
 C832  06
 C833  29                                  and     #$40                ; 
                   start2
 C834  40
 C835  F0          locc835:                beq     locc83a
 C836  03
  [ =C83A ]
 C837  C6                                  dec     credits
 C838  06
 C839  C8                                  iny

                   ; Y now holds 1 if 1p game, 2 if 2p

 C83A  98          locc83a:                tya
 C83B  85                                  sta     twoplayer
 C83C  3E
 C83D  F0                                  beq     locc86e         ; can 
                   this ever branch?  How could it be zero?
 C83E  2F
  [ =C86E ]
 C83F  A5                                  lda     game_mode
 C840  05
 C841  09                                  ora     #$c0            ; 
                   11000000
 C842  C0
 C843  85                                  sta     game_mode
 C844  05
 C845  A9                                  lda     #$00
 C846  00
 C847  85                                  sta     coin_string
 C848  16
 C849  85                                  sta     $18
 C84A  18
 C84B  A9                                  lda     #GS_GameStartup
 C84C  00
 C84D  85                                  sta     gamestate
 C84E  00
 C84F  C6                                  dec     twoplayer
 C850  3E
 C851  A6                                  ldx     twoplayer
 C852  3E
 C853  F0                                  beq     locc857
 C854  02
  [ =C857 ]
 C855  A2                                  ldx     #$03            ; 3 = 
                   games_2p_l - games_1p_l
 C856  03
 C857  FE          locc857:                inc     games_1p_l,x
 C858  0C 04
 C85A  D0                                  bne     locc85f
 C85B  03
  [ =C85F ]
 C85C  FE                                  inc     games_1p_m,x
 C85D  0D 04
 C85F  AD          locc85f:                lda     $0100
 C860  00 01
 C862  38                                  sec
 C863  65                                  adc     twoplayer
 C864  3E
 C865  C9                                  cmp     #$63            ; 99 
                   decimal
 C866  63
 C867  90                                  bcc     locc86b
 C868  02
  [ =C86B ]
 C869  A9                                  lda     #$63            ; 99 
                   again
 C86A  63
 C86B  8D          locc86b:                sta     $0100
 C86C  00 01
 C86E  B8          locc86e:                clv
 C86F  50                                  bvc     locc890
 C870  1F
  [ =C890 ]

                   ; Branch here if neither start button pressed

 C871  A5          locc871:                lda     $50
 C872  50
 C873  F0                                  beq     locc890
 C874  1B
  [ =C890 ]
 C875  24                                  bit     game_mode
 C876  05
 C877  30                                  bmi     locc890
 C878  17
  [ =C890 ]
 C879  A9                                  lda     #$10
 C87A  10
 C87B  85                                  sta     unknown_state
 C87C  01
 C87D  A9                                  lda     #$20
 C87E  20
 C87F  85                                  sta     countdown_timer
 C880  04
 C881  A9                                  lda     #GS_Delay
 C882  0A
 C883  85                                  sta     gamestate
 C884  00
 C885  A9                                  lda     #GS_Unknown14           
 C886  14
 C887  85                                  sta     state_after_delay
 C888  02
 C889  A9                                  lda     #$00
 C88A  00
 C88B  85                                  sta     $50
 C88C  50
 C88D  8D                                  sta     $0123
 C88E  23 01
 C890  60          locc890:                rts

 C891  AD          locc891:                lda     cabsw
 C892  00 0C
 C894  29                                  and     #$10                    
                   ; service mode
 C895  10
 C896  D0                                  bne     locc89f
 C897  07
  [ =C89F ]
 C898  A9                                  lda     #GS_ServiceDisplay
 C899  22
 C89A  85                                  sta     gamestate
 C89B  00
 C89C  B8                                  clv
 C89D  50                                  bvc     locc8e3
 C89E  44
  [ =C8E3 ]
 C89F  24          locc89f:                bit     game_mode
 C8A0  05
 C8A1  70                                  bvs     locc8e3
 C8A2  40
  [ =C8E3 ]
 C8A3  A5                                  lda     optsw2_shadow
 C8A4  0A
 C8A5  29                                  and     #$01                    
                   ; 2-credit-minimum bit
 C8A6  01
 C8A7  F0                                  beq     locc8d2
 C8A8  29
  [ =C8D2 ]
 C8A9  A4                                  ldy     credits
 C8AA  06
 C8AB  D0                                  bne     locc8b1
 C8AC  04
  [ =C8B1 ]
 C8AD  A9                                  lda     #$80
 C8AE  80
 C8AF  85                                  sta     $a2
 C8B0  A2
 C8B1  24          locc8b1:                bit     $a2
 C8B2  A2
 C8B3  10                                  bpl     locc8d2
 C8B4  1D
  [ =C8D2 ]
 C8B5  C0                                  cpy     #$02
 C8B6  02
 C8B7  B0                                  bcs     locc8ca
 C8B8  11
  [ =C8CA ]
 C8B9  98                                  tya
 C8BA  F0                                  beq     locc8c4
 C8BB  08
  [ =C8C4 ]
 C8BC  A9                                  lda     #$16
 C8BD  16
 C8BE  85                                  sta     unknown_state
 C8BF  01
 C8C0  A9                                  lda     #GS_Delay
 C8C1  0A
 C8C2  85                                  sta     gamestate
 C8C3  00
 C8C4  4C          locc8c4:                jmp     locc8d9
 C8C5  D9 C8
 C8C7  B8                                  clv
 C8C8  50                                  bvc     locc8d2
 C8C9  08
  [ =C8D2 ]
 C8CA  A9          locc8ca:                lda     #GS_Unknown14
 C8CB  14
 C8CC  85                                  sta     gamestate
 C8CD  00
 C8CE  A9                                  lda     #$00
 C8CF  00
 C8D0  85                                  sta     $a2
 C8D1  A2
 C8D2  A5          locc8d2:                lda     credits
 C8D3  06
 C8D4  F0                                  beq     locc8d9
 C8D5  03
  [ =C8D9 ]
 C8D6  20                                  jsr     check_start
 C8D7  1B C8
 C8D9  A5          locc8d9:                lda     coinage_shadow
 C8DA  09
 C8DB  29                                  and     #$03
 C8DC  03
 C8DD  D0                                  bne     locc8e3
 C8DE  04
  [ =C8E3 ]
 C8DF  A9                                  lda     #$02
 C8E0  02
 C8E1  85                                  sta     credits
 C8E2  06
 C8E3  E6          locc8e3:                inc     timectr
 C8E4  03
 C8E5  A5                                  lda     timectr
 C8E6  03
 C8E7  29                                  and     #$01
 C8E8  01
 C8E9  F0                                  beq     locc8ee
 C8EA  03
  [ =C8EE ]
 C8EB  20                                  jsr     locde1b
 C8EC  1B DE
 C8EE  A5          locc8ee:                lda     $0c
 C8EF  0C
 C8F0  F0                                  beq     SetDecimalIfPirated
 C8F1  03
  [ =C8F5 ]
 C8F2  20                                  jsr     locccfa
 C8F3  FA CC

                   ; Apparent anti-piracy test; if the 
                   copyright-displaying code has been
                   ; twiddled, then gratuitously drop into decimal mode 
                   over level 19, thereby
                   ; doing "interesting" things to arithmetic until we 
                   next have occasion to
                   ; use decimal mode "legitimately".
                   ; See also $a91c.

 C8F5  AD          SetDecimalIfPirated:    lda     copyr_disp_cksum1
 C8F6  6C 01
 C8F8  F0                                  beq     locc901
 C8F9  07
  [ =C901 ]
 C8FA  A9                                  lda     #$13
 C8FB  13
 C8FC  C5                                  cmp     curlevel
 C8FD  9F
 C8FE  B0                                  bcs     locc901
 C8FF  01
  [ =C901 ]
 C900  F8                                  sed

                   ; End apparent anti-piracy test

 C901  A5          locc901:                lda     zap_fire_new
 C902  4E
 C903  29                                  and     #$80
 C904  80
 C905  F0                                  beq     locc90b
 C906  04
  [ =C90B ]
 C907  A9                                  lda     #$00
 C908  00
 C909  85                                  sta     zap_fire_new
 C90A  4E
 C90B  60          locc90b:                rts

 C90C  20          State_GameStartup:      jsr     maybe_init_hs
 C90D  A2 AB
 C90F  20                                  jsr     InitVector
 C910  6E C1
 C912  A5                                  lda     game_mode
 C913  05
 C914  10                                  bpl     locc919
 C915  03
  [ =C919 ]
 C916  20                                  jsr     locca62
 C917  62 CA
 C919  A9          locc919:                lda     #$00
 C91A  00
 C91B  85                                  sta     p2_lives
 C91C  49
 C91D  A6                                  ldx     twoplayer
 C91E  3E
 C91F  86                                  stx     curplayer
 C920  3D
 C921  A6          locc921:                ldx     curplayer
 C922  3D
 C923  AD                                  lda     init_lives
 C924  58 01
 C926  9D                                  .byte $9d, $48, $00 ; BUGBUG 
                   non-zero page, was 'sta     p1_lives,x'
 C927  48
 C928  00
 C929  A9                                  lda     #$ff
 C92A  FF
 C92B  9D                                  .byte $9d, $46, 00  ; BUGBUG 
                   non-zero page, was 'sta     p1_level,x'
 C92C  46
 C92D  00
 C92E  C6                                  dec     curplayer
 C92F  3D
 C930  10                                  bpl     locc921
 C931  EF
  [ =C921 ]
 C932  A9                                  lda     #$00
 C933  00
 C934  85                                  sta     $3f
 C935  3F
 C936  8D                                  sta     $0115
 C937  15 01
 C939  A5                                  lda     twoplayer
 C93A  3E
 C93B  85                                  sta     curplayer
 C93C  3D
 C93D  4C                                  jmp     PlayerLevelSelect
 C93E  C4 90

 C940  A9          State_LevelStartup:     lda     #$00
 C941  00
 C942  85                                  sta     unknown_state
 C943  01
 C944  A9                                  lda     #GS_DelayThenPlay
 C945  1E
 C946  85                                  sta     gamestate
 C947  00
 C948  85                                  sta     state_after_delay
 C949  02
 C94A  A5                                  lda     $3f
 C94B  3F
 C94C  C5                                  cmp     curplayer
 C94D  3D
 C94E  F0                                  beq     locc96c
 C94F  1C
  [ =C96C ]
 C950  85                                  sta     curplayer
 C951  3D
 C952  A5                                  lda     game_mode
 C953  05
 C954  10                                  bpl     locc96c
 C955  16
  [ =C96C ]
 C956  A9                                  lda     #$0e
 C957  0E
 C958  85                                  sta     unknown_state
 C959  01
 C95A  A9                                  lda     #GS_Delay
 C95B  0A
 C95C  85                                  sta     gamestate
 C95D  00
 C95E  A9                                  lda     #$50
 C95F  50
 C960  AC                                  ldy     flagbits
 C961  17 01
 C963  F0                                  beq     locc967
 C964  02
  [ =C967 ]
 C965  A9                                  lda     #$28
 C966  28
 C967  85          locc967:                sta     countdown_timer
 C968  04
 C969  20                                  jsr     SwapPlayerStates
 C96A  B2 92
 C96C  20          locc96c:                jsr     locca48
 C96D  48 CA
 C96F  A6                                  ldx     curplayer
 C970  3D
 C971  B5                                  lda     p1_level,x
 C972  46
 C973  85                                  sta     curlevel
 C974  9F
 C975  20                                  jsr     InitializeGame
 C976  25 90
 C978  4C                                  jmp     loccd95
 C979  95 CD

 C97B  A9          State_DelayThenPlay:    lda     #GS_Playing             
                                
 C97C  04
 C97D  85                                  sta     state_after_delay
 C97E  02
 C97F  A9                                  lda     #$00
 C980  00
 C981  85                                  sta     unknown_state
 C982  01
 C983  A9                                  lda     #GS_Delay
 C984  0A
 C985  85                                  sta     gamestate
 C986  00
 C987  A9                                  lda     #$14
 C988  14
 C989  85                                  sta     countdown_timer
 C98A  04
 C98B  60                                  rts

 C98C  A6          State_ZoomOffEnd:       ldx     curplayer
 C98D  3D
 C98E  B5                                  lda     p1_level,x
 C98F  46
 C990  C9                                  cmp     #HIGHEST_LEVEL          
                           ; 98 (level 99) is the max
 C991  62
 C992  B0                                  bcs     level_already_maxed
 C993  04
  [ =C998 ]
 C994  F6                                  inc     p1_level,x
 C995  46
 C996  E6                                  inc     curlevel
 C997  9F
 C998  A9          level_already_maxed:    lda     #GS_ZoomOntoNew
 C999  18
 C99A  85                                  sta     gamestate
 C99B  00
 C99C  BD                                  lda     p1_startchoice,x        
                           ; Award any start level bonus
 C99D  02 01
 C99F  F0                                  beq     locc9ac
 C9A0  0B
  [ =C9AC ]
 C9A1  20                                  jsr     ld_startbonus
 C9A2  B5 91
 C9A4  A2                                  ldx     #$ff                    
                           ; Indicates bonus value loaded into 29/2a/2b
 C9A5  FF
 C9A6  20                                  jsr     inc_score
 C9A7  6C CA
 C9A9  20                                  jsr     locccb9
 C9AA  B9 CC
 C9AC  4C          locc9ac:                jmp     InitLevel
 C9AD  09 90

 C9AF  A9          State_Death:            lda     #$00
 C9B0  00
 C9B1  85                                  sta     countdown_timer
 C9B2  04
 C9B3  A6                                  ldx     curplayer               
                           ; Current player loses a life, decrement it
 C9B4  3D
 C9B5  D6                                  dec     p1_lives,x
 C9B6  48
 C9B7  A5                                  lda     p1_lives                
                           ; Combine Player1 and Player2 lives
 C9B8  48
 C9B9  05                                  ora     p2_lives
 C9BA  49
 C9BB  D0                                  bne     AnyPlayerLivesLeft      
                       
 C9BC  06
  [ =C9C3 ]

 C9BD  20                                  jsr     State_LevelBegin
 C9BE  F1 C9
 C9C0  B8                                  clv
 C9C1  50                                  bvc     locc9f0
 C9C2  2D
  [ =C9F0 ]

 C9C3  A6          AnyPlayerLivesLeft:     ldx     curplayer
 C9C4  3D
 C9C5  B5                                  lda     p1_lives,x
 C9C6  48
 C9C7  D0                                  bne     PlayerOutOfLives
 C9C8  08
  [ =C9D1 ]
 C9C9  A9                                  lda     #$0c
 C9CA  0C
 C9CB  85                                  sta     unknown_state
 C9CC  01
 C9CD  A9                                  lda     #$28
 C9CE  28
 C9CF  85                                  sta     countdown_timer
 C9D0  04
 C9D1  A5          PlayerOutOfLives:       lda     twoplayer
 C9D2  3E
 C9D3  F0                                  beq     locc9db
 C9D4  06
  [ =C9DB ]
 C9D5  A5                                  lda     $3f
 C9D6  3F
 C9D7  49                                  eor     #$01
 C9D8  01
 C9D9  85                                  sta     $3f
 C9DA  3F
 C9DB  A6          locc9db:                ldx     $3f
 C9DC  3F
 C9DD  B5                                  lda     p1_lives,x
 C9DE  48
 C9DF  F0                                  beq     PlayerOutOfLives
 C9E0  F0
  [ =C9D1 ]
 C9E1  A9                                  lda     #$02
 C9E2  02
 C9E3  B4                                  ldy     p1_level,x
 C9E4  46
 C9E5  C8                                  iny
 C9E6  D0                                  bne     locc9ea
 C9E7  02
  [ =C9EA ]
 C9E8  A9                                  lda     #GS_Unknown1C
 C9E9  1C
 C9EA  85          locc9ea:                sta     state_after_delay
 C9EB  02
 C9EC  A9                                  lda     #GS_Delay
 C9ED  0A
 C9EE  85                                  sta     gamestate
 C9EF  00
 C9F0  60          locc9f0:                rts

 C9F1  A9          State_LevelBegin:       lda     #$00
 C9F2  00
 C9F3  8D                                  sta     $0126
 C9F4  26 01
 C9F6  A6                                  ldx     twoplayer
 C9F7  3E
 C9F8  B5          -                       lda     p1_level,x
 C9F9  46
 C9FA  CD                                  cmp     $0126
 C9FB  26 01
 C9FD  90                                  bcc     +
 C9FE  03
  [ =CA02 ]
 C9FF  8D                                  sta     $0126
 CA00  26 01
 CA02  CA          +                       dex
 CA03  10                                  bpl     -
 CA04  F3
  [ =C9F8 ]
 CA05  AC                                  ldy     $0126
 CA06  26 01
 CA08  F0                                  beq     +
 CA09  03
  [ =CA0D ]
 CA0A  CE                                  dec     $0126
 CA0B  26 01
 CA0D  A9          +                       lda     #GS_Unknown14
 CA0E  14
 CA0F  24                                  bit     game_mode
 CA10  05
 CA11  10                                  bpl     +
 CA12  02
  [ =CA15 ]
 CA13  A9                                  lda     #GS_Unknown10
 CA14  10
 CA15  85          +                       sta     gamestate
 CA16  00
 CA17  60                                  rts

 CA18  A5          state_14:               lda     game_mode
 CA19  05
 CA1A  29                                  and     #$3f                    
                   ; ‭00111111‬
 CA1B  3F
 CA1C  85                                  sta     game_mode
 CA1D  05
 CA1E  A9                                  lda     #$00
 CA1F  00
 CA20  85                                  sta     twoplayer
 CA21  3E
 CA22  A9                                  lda     #GS_Unknown1A           
                   ; new gamestate
 CA23  1A
 CA24  85                                  sta     state_after_delay
 CA25  02
 CA26  A9                                  lda     #GS_Delay
 CA27  0A
 CA28  85                                  sta     gamestate
 CA29  00
 CA2A  A9                                  lda     #$a0                    
                   ; time delay
 CA2B  A0
 CA2C  85                                  sta     countdown_timer
 CA2D  04
 CA2E  A9                                  lda     #$01
 CA2F  01
 CA30  8D                                  sta     $016b
 CA31  6B 01
 CA33  A9                                  lda     #$0a
 CA34  0A
 CA35  85                                  sta     unknown_state
 CA36  01
 CA37  60                                  rts

                   ; Used at $98e6, $9910

 CA38  80          locca38:                .byte   $80     
 CA39  40                                  .byte   $40     
 CA3A  20                                  .byte   $20     
 CA3B  10                                  .byte   $10     
 CA3C  08                                  .byte   $08     
 CA3D  04                                  .byte   $04     
 CA3E  02                                  .byte   $02     
 CA3F  01                                  .byte   $01     
 CA40  01                                  .byte   $01     
 CA41  02                                  .byte   $02     
 CA42  04                                  .byte   $04     
 CA43  08                                  .byte   $08     
 CA44  10                                  .byte   $10     
 CA45  20                                  .byte   $20     
 CA46  40                                  .byte   $40     
 CA47  80                                  .byte   $80 

 CA48  A0          locca48:                ldy     #$10
 CA49  10
 CA4A  AD                                  lda     flagbits
 CA4B  17 01
 CA4D  F0                                  beq     locca57
 CA4E  08
  [ =CA57 ]
 CA4F  A5                                  lda     curplayer
 CA50  3D
 CA51  F0                                  beq     locca57
 CA52  04
  [ =CA57 ]
 CA53  A9                                  lda     #$04
 CA54  04
 CA55  A0                                  ldy     #$08
 CA56  08
 CA57  45          locca57:                eor     $a1
 CA58  A1
 CA59  29                                  and     #$04
 CA5A  04
 CA5B  45                                  eor     $a1
 CA5C  A1
 CA5D  85                                  sta     $a1
 CA5E  A1
 CA5F  84                                  sty     $b4
 CA60  B4
 CA61  60                                  rts

 CA62  A9          locca62:                lda     #$00
 CA63  00
 CA64  A2                                  ldx     #$05
 CA65  05
 CA66  95          locca66:                sta     p1_score_l,x
 CA67  40
 CA68  CA                                  dex
 CA69  10                                  bpl     locca66
 CA6A  FB
  [ =CA66 ]
 CA6B  60                                  rts

                   ;-------------------------------------------------------
                   ----------------------
                   ; inc_score
                   ;-------------------------------------------------------
                   ----------------------                      
                   ; If x <= 8 then that is used as the enemy type and the 
                   player score is credited
                   ; with a table-lookup value for that enemy type.
                   ; 
                   ; If x > 8 then the value at 2A/2B/2C is added to the 
                   current score.
                   ;-------------------------------------------------------
                   ----------------------


 CA6C  F8          inc_score:              sed
 CA6D  24                                  bit     game_mode
 CA6E  05
 CA6F  10                                  bpl     loccaef
 CA70  7E
  [ =CAEF ]
 CA71  A4                                  ldy     curplayer
 CA72  3D
 CA73  F0                                  beq     locca77
 CA74  02
  [ =CA77 ]
 CA75  A0                                  ldy     #(p2_score_l - 
                   p1_score_l)          ; Distance between two scores
 CA76  03
 CA77  E0          locca77:                cpx     #$08                    
                               ; 
 CA78  08
 CA79  90                                  bcc     ScoreByType
 CA7A  16
  [ =CA91 ]
 CA7B  A5                                  lda     $29
 CA7C  29
 CA7D  18                                  clc
 CA7E  79                                  adc     p1_score_l,y
 CA7F  40 00
 CA81  99                                  sta     p1_score_l,y
 CA82  40 00
 CA84  A5                                  lda     $2a
 CA85  2A
 CA86  79                                  adc     p1_score_m,y
 CA87  41 00
 CA89  99                                  sta     p1_score_m,y
 CA8A  41 00
 CA8C  A5                                  lda     $2b
 CA8D  2B
 CA8E  B8                                  clv
 CA8F  50                                  bvc     loccaa6
 CA90  15
  [ =CAA6 ]

 CA91  BD          ScoreByType:            lda     EnemyScoreValueLSB,x
 CA92  F1 CA
 CA94  18                                  clc
 CA95  79                                  adc     p1_score_l,y
 CA96  40 00
 CA98  99                                  sta     p1_score_l,y
 CA99  40 00
 CA9B  BD                                  lda     EnemyScoreValueMSB,x
 CA9C  F9 CA
 CA9E  79                                  adc     p1_score_m,y
 CA9F  41 00
 CAA1  99                                  sta     p1_score_m,y
 CAA2  41 00
 CAA4  A9                                  lda     #$00
 CAA5  00
 CAA6  08          loccaa6:                php
 CAA7  79                                  adc     p1_score_h,y
 CAA8  42 00
 CAAA  99                                  sta     p1_score_h,y
 CAAB  42 00
 CAAD  28                                  plp
 CAAE  F0                                  beq     loccabb
 CAAF  0B
  [ =CABB ]
 CAB0  AE                                  ldx     bonus_life_each
 CAB1  56 01
 CAB3  F0                                  beq     loccabb
 CAB4  06
  [ =CABB ]
 CAB5  E4                                  cpx     $2b
 CAB6  2B
 CAB7  F0                                  beq     loccadc
 CAB8  23
  [ =CADC ]
 CAB9  90                                  bcc     loccadc
 CABA  21
  [ =CADC ]
 CABB  90          loccabb:                bcc     loccaef
 CABC  32
  [ =CAEF ]
 CABD  AE                                  ldx     bonus_life_each
 CABE  56 01
 CAC0  F0                                  beq     loccaee
 CAC1  2C
  [ =CAEE ]
 CAC2  E0                                  cpx     #$03
 CAC3  03
 CAC4  90                                  bcc     loccad1
 CAC5  0B
  [ =CAD1 ]
 CAC6  38          loccac6:                sec
 CAC7  ED                                  sbc     bonus_life_each
 CAC8  56 01
 CACA  F0                                  beq     loccadc
 CACB  10
  [ =CADC ]
 CACC  B0                                  bcs     loccac6
 CACD  F8
  [ =CAC6 ]
 CACE  B8                                  clv
 CACF  50                                  bvc     loccaee
 CAD0  1D
  [ =CAEE ]
 CAD1  E0          loccad1:                cpx     #$02
 CAD2  02
 CAD3  D0                                  bne     loccadc
 CAD4  07
  [ =CADC ]
 CAD5  29                                  and     #$01
 CAD6  01
 CAD7  F0                                  beq     loccadc
 CAD8  03
  [ =CADC ]
 CAD9  B8                                  clv
 CADA  50                                  bvc     loccaee
 CADB  12
  [ =CAEE ]
 CADC  A6          loccadc:                ldx     curplayer
 CADD  3D
 CADE  B5                                  lda     p1_lives,x
 CADF  48
 CAE0  C9                                  cmp     #$06
 CAE1  06
 CAE2  B0                                  bcs     loccaee
 CAE3  0A
  [ =CAEE ]
 CAE4  F6                                  inc     p1_lives,x
 CAE5  48
 CAE6  20                                  jsr     locccb9
 CAE7  B9 CC
 CAE9  A9                                  lda     #$20
 CAEA  20
 CAEB  8D                                  sta     $0124
 CAEC  24 01
 CAEE  38          loccaee:                sec
 CAEF  D8          loccaef:                cld
 CAF0  60                                  rts

                   ; EnemyScoreValue - What each enemy type is worth

 CAF1  00          EnemyScoreValueLSB:     .byte   $00         ; Flipper  
                   150
 CAF2  50                                  .byte   $50         ; Pulsar   
                   200
 CAF3  00                                  .byte   $00         ; Tanker   
                   100
 CAF4  00                                  .byte   $00         ; Spiker    
                   50
 CAF5  50                                  .byte   $50         ; Fuseball 
                   250
 CAF6  50                                  .byte   $50         ; Fuseball 
                   500
 CAF7  00                                  .byte   $00         ; Fuseball 
                   750
 CAF8  50                                  .byte   $50

                   ; High BCD nibbles of whatever's at caf1.

 CAF9  00          EnemyScoreValueMSB:     .byte   $00
 CAFA  01                                  .byte   $01         ; Flipper  
                   150
 CAFB  02                                  .byte   $02         ; Pulsar   
                   200
 CAFC  01                                  .byte   $01         ; Tanker   
                   100
 CAFD  00                                  .byte   $00         ; Spiker    
                   50
 CAFE  02                                  .byte   $02         ; Fuseball 
                   250
 CAFF  05                                  .byte   $05         ; Fuseball 
                   500
 CB00  07                                  .byte   $07         ; Fuseball 
                   750

                   ; Not sure what this stuff is.
                   ; It's blocks of 16.bytes, one of which is copied to 
                   $c0-$cf by the loop
                   ; beginning around $ccc7.

                   ; Block 0
 CB01  00          loccb01:                .byte   $00, $00, $00, $00, $00,
                    $00, $00, $00, $35, $38, $00, $00, $00, $00, $00, $00
 CB02  00
 CB03  00
 CB04  00
 CB05  00
 CB06  00
 CB07  00
 CB08  00
 CB09  35
 CB0A  38
 CB0B  00
 CB0C  00
 CB0D  00
 CB0E  00
 CB0F  00
 CB10  00

                   ; Block 1
 CB11  00                                  .byte   $00, $00, $47, $4a, $00,
                    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
 CB12  00
 CB13  47
 CB14  4A
 CB15  00
 CB16  00
 CB17  00
 CB18  00
 CB19  00
 CB1A  00
 CB1B  00
 CB1C  00
 CB1D  00
 CB1E  00
 CB1F  00
 CB20  00

                   ; Block 2
 CB21  00                                  .byte   $00, $00, $00, $00, $0d,
                    $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
 CB22  00
 CB23  00
 CB24  00
 CB25  0D
 CB26  10
 CB27  00
 CB28  00
 CB29  00
 CB2A  00
 CB2B  00
 CB2C  00
 CB2D  00
 CB2E  00
 CB2F  00
 CB30  00

                   ; Block 3
 CB31  00                                  .byte   $00, $00, $00, $00, $00,
                    $00, $00, $00, $00, $00, $65, $68, $00, $00, $00, $00
 CB32  00
 CB33  00
 CB34  00
 CB35  00
 CB36  00
 CB37  00
 CB38  00
 CB39  00
 CB3A  00
 CB3B  65
 CB3C  68
 CB3D  00
 CB3E  00
 CB3F  00
 CB40  00

                   ; Block 4
 CB41  00                                  .byte   $00, $00, $00, $00, $00,
                    $00, $21, $32, $00, $00, $00, $00, $00, $00, $00, $00
 CB42  00
 CB43  00
 CB44  00
 CB45  00
 CB46  00
 CB47  21
 CB48  32
 CB49  00
 CB4A  00
 CB4B  00
 CB4C  00
 CB4D  00
 CB4E  00
 CB4F  00
 CB50  00

                   ; Block 5
 CB51  13                                  .byte   $13, $1a, $00, $00, $00,
                    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
 CB52  1A
 CB53  00
 CB54  00
 CB55  00
 CB56  00
 CB57  00
 CB58  00
 CB59  00
 CB5A  00
 CB5B  00
 CB5C  00
 CB5D  00
 CB5E  00
 CB5F  00
 CB60  00

                   ; Block 6
 CB61  00                                  .byte   $00, $00, $00, $00, $00,
                    $00, $00, $00, $00, $00, $53, $56, $00, $00, $00, $00
 CB62  00
 CB63  00
 CB64  00
 CB65  00
 CB66  00
 CB67  00
 CB68  00
 CB69  00
 CB6A  00
 CB6B  53
 CB6C  56
 CB6D  00
 CB6E  00
 CB6F  00
 CB70  00

                   ; Block 7
 CB71  00                                  .byte   $00, $00, $00, $00, $00,
                    $00, $00, $00, $00, $00, $59, $5c, $00, $00, $00, $00
 CB72  00
 CB73  00
 CB74  00
 CB75  00
 CB76  00
 CB77  00
 CB78  00
 CB79  00
 CB7A  00
 CB7B  59
 CB7C  5C
 CB7D  00
 CB7E  00
 CB7F  00
 CB80  00

                   ; Block 8
 CB81  00                                  .byte   $00, $00, $00, $00, $00,
                    $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $3e
 CB82  00
 CB83  00
 CB84  00
 CB85  00
 CB86  00
 CB87  00
 CB88  00
 CB89  00
 CB8A  00
 CB8B  00
 CB8C  00
 CB8D  00
 CB8E  00
 CB8F  3B
 CB90  3E

                   ; Block 9
 CB91  00                                  .byte   $00, $00, $00, $00, $00,
                    $00, $00, $00, $00, $00, $00, $00, $41, $44, $00, $00
 CB92  00
 CB93  00
 CB94  00
 CB95  00
 CB96  00
 CB97  00
 CB98  00
 CB99  00
 CB9A  00
 CB9B  00
 CB9C  00
 CB9D  41
 CB9E  44
 CB9F  00
 CBA0  00

                   ; Block a
 CBA1  4D                                  .byte   $4d, $50, $00, $00, $00,
                    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
 CBA2  50
 CBA3  00
 CBA4  00
 CBA5  00
 CBA6  00
 CBA7  00
 CBA8  00
 CBA9  00
 CBAA  00
 CBAB  00
 CBAC  00
 CBAD  00
 CBAE  00
 CBAF  00
 CBB0  00

                   ; Block b
 CBB1  5F                                  .byte   $5f, $62, $00, $00, $00,
                    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
 CBB2  62
 CBB3  00
 CBB4  00
 CBB5  00
 CBB6  00
 CBB7  00
 CBB8  00
 CBB9  00
 CBBA  00
 CBBB  00
 CBBC  00
 CBBD  00
 CBBE  00
 CBBF  00
 CBC0  00

                   ; Block c
 CBC1  00                                  .byte   $00, $00, $00, $00, $00,
                    $00, $00, $00, $00, $00
 CBC2  00
 CBC3  00
 CBC4  00
 CBC5  00
 CBC6  00
 CBC7  00
 CBC8  00
 CBC9  00
 CBCA  00
 CBCB  6D          loccbcb:                .byte   $6d
 CBCC  6D          loccbcc:                .byte   $6d, $00
 CBCD  00
 CBCE  00          loccbce:                .byte   $00, $00, $00
 CBCF  00
 CBD0  00
 CBD1  C0                                  .byte   $c0, $08, $04, $10, $00,
                    $00, $a6, $20, $f8, $04, $00, $00, $40, $08, $04, $10
 CBD2  08
 CBD3  04
 CBD4  10
 CBD5  00
 CBD6  00
 CBD7  A6
 CBD8  20
 CBD9  F8
 CBDA  04
 CBDB  00
 CBDC  00
 CBDD  40
 CBDE  08
 CBDF  04
 CBE0  10
 CBE1  00                                  .byte   $00, $00, $a6, $20, $fe,
                    $04, $00, $00, $10, $01, $07, $20, $00, $00, $a2, $01
 CBE2  00
 CBE3  A6
 CBE4  20
 CBE5  FE
 CBE6  04
 CBE7  00
 CBE8  00
 CBE9  10
 CBEA  01
 CBEB  07
 CBEC  20
 CBED  00
 CBEE  00
 CBEF  A2
 CBF0  01
 CBF1  F8                                  .byte   $f8, $20, $00, $00, $08,
                    $04, $20, $0a, $08, $04, $01, $09, $10, $0d, $04, $0c
 CBF2  20
 CBF3  00
 CBF4  00
 CBF5  08
 CBF6  04
 CBF7  20
 CBF8  0A
 CBF9  08
 CBFA  04
 CBFB  01
 CBFC  09
 CBFD  10
 CBFE  0D
 CBFF  04
 CC00  0C
 CC01  00                                  .byte   $00, $00, $08, $04, $00,
                    $0a, $68, $04, $00, $09, $68, $12, $ff, $09, $00, $00
 CC02  00
 CC03  08
 CC04  04
 CC05  00
 CC06  0A
 CC07  68
 CC08  04
 CC09  00
 CC0A  09
 CC0B  68
 CC0C  12
 CC0D  FF
 CC0E  09
 CC0F  00
 CC10  00
 CC11  40                                  .byte   $40, $01, $00, $01, $40,
                    $01, $ff, $40, $30, $01, $ff, $30, $20, $01, $ff, $20
 CC12  01
 CC13  00
 CC14  01
 CC15  40
 CC16  01
 CC17  FF
 CC18  40
 CC19  30
 CC1A  01
 CC1B  FF
 CC1C  30
 CC1D  20
 CC1E  01
 CC1F  FF
 CC20  20
 CC21  18                                  .byte   $18, $01, $ff, $18, $14,
                    $01, $ff, $14, $12, $01, $ff, $12, $10, $01, $ff, $10
 CC22  01
 CC23  FF
 CC24  18
 CC25  14
 CC26  01
 CC27  FF
 CC28  14
 CC29  12
 CC2A  01
 CC2B  FF
 CC2C  12
 CC2D  10
 CC2E  01
 CC2F  FF
 CC30  10
 CC31  00                                  .byte   $00, $00, $a8, $93, $00,
                    $02, $00, $00, $0f, $04, $00, $01, $00, $00, $a2, $04
 CC32  00
 CC33  A8
 CC34  93
 CC35  00
 CC36  02
 CC37  00
 CC38  00
 CC39  0F
 CC3A  04
 CC3B  00
 CC3C  01
 CC3D  00
 CC3E  00
 CC3F  A2
 CC40  04
 CC41  40                                  .byte   $40, $01, $00, $00, $00,
                    $03, $02, $09, $00, $00, $08, $03, $ff, $09, $00, $00
 CC42  01
 CC43  00
 CC44  00
 CC45  00
 CC46  03
 CC47  02
 CC48  09
 CC49  00
 CC4A  00
 CC4B  08
 CC4C  03
 CC4D  FF
 CC4E  09
 CC4F  00
 CC50  00
 CC51  80                                  .byte   $80, $01, $e8, $05, $00,
                    $00, $a1, $01, $01, $05, $00, $00, $01, $08, $02, $10
 CC52  01
 CC53  E8
 CC54  05
 CC55  00
 CC56  00
 CC57  A1
 CC58  01
 CC59  01
 CC5A  05
 CC5B  00
 CC5C  00
 CC5D  01
 CC5E  08
 CC5F  02
 CC60  10
 CC61  00                                  .byte   $00, $00, $86, $20, $00,
                    $04, $00, $00, $18, $04, $00, $ff, $00, $00, $af, $04
 CC62  00
 CC63  86
 CC64  20
 CC65  00
 CC66  04
 CC67  00
 CC68  00
 CC69  18
 CC6A  04
 CC6B  00
 CC6C  FF
 CC6D  00
 CC6E  00
 CC6F  AF
 CC70  04
 CC71  00                                  .byte   $00, $ff, $00, $00, $c0,
                    $02, $ff, $ff, $00, $00, $28, $02, $00, $f0, $00, $00
 CC72  FF
 CC73  00
 CC74  00
 CC75  C0
 CC76  02
 CC77  FF
 CC78  FF
 CC79  00
 CC7A  00
 CC7B  28
 CC7C  02
 CC7D  00
 CC7E  F0
 CC7F  00
 CC80  00
 CC81  10                                  .byte   $10, $0b, $01, $40, $00,
                    $00, $86, $40, $00, $0b, $00, $00, $20, $80, $00, $03
 CC82  0B
 CC83  01
 CC84  40
 CC85  00
 CC86  00
 CC87  86
 CC88  40
 CC89  00
 CC8A  0B
 CC8B  00
 CC8C  00
 CC8D  20
 CC8E  80
 CC8F  00
 CC90  03
 CC91  00                                  .byte   $00, $00, $a8, $40, $f8,
                    $06, $00, $00, $b0, $02, $00, $ff, $00, $00, $c8, $01
 CC92  00
 CC93  A8
 CC94  40
 CC95  F8
 CC96  06
 CC97  00
 CC98  00
 CC99  B0
 CC9A  02
 CC9B  00
 CC9C  FF
 CC9D  00
 CC9E  00
 CC9F  C8
 CCA0  01
 CCA1  02                                  .byte   $02, $ff, $c8, $01, $02,
                    $ff, $00, $00, $c0, $01, $00, $01, $00, $00, $00
 CCA2  FF
 CCA3  C8
 CCA4  01
 CCA5  02
 CCA6  FF
 CCA7  00
 CCA8  00
 CCA9  C0
 CCAA  01
 CCAB  00
 CCAC  01
 CCAD  00
 CCAE  00
 CCAF  00

 CCB0  A9          locccb0:                lda     #$5f        ; 13 1a 0 0 
                   0 0 0 0 0 0 0 0 0 0 0 0
 CCB1  5F
 CCB2  4C                                  jmp     locccc3
 CCB3  C3 CC

 CCB5  A9          locccb5:                lda     #$0f        ; 0 0 0 0 0 
                   0 0 0 35 38 0 0 0 0 0 0
 CCB6  0F
 CCB7  D0                                  bne     locccc3
 CCB8  0A
  [ =CCC3 ]

 CCB9  A9          locccb9:                lda     #$4f        ; 0 0 0 0 0 
                   0 21 32 0 0 0 0 0 0 0 0
 CCBA  4F
 CCBB  D0                                  bne     locccc3
 CCBC  06
  [ =CCC3 ]

 CCBD  A9          locccbd:                lda     #$8f        ; 0 0 0 0 0 
                   0 0 0 0 0 0 0 0 0 3b 3e
 CCBE  8F
 CCBF  D0                                  bne     locccc3
 CCC0  02
  [ =CCC3 ]

 CCC1  A9          locccc1:                lda     #$1f        ; 0 0 47 4a 
                   0 0 0 0 0 0 0 0 0 0 0 0
 CCC2  1F
 CCC3  24          locccc3:                bit     $05
 CCC4  05
 CCC5  10                                  bpl     loccce9
 CCC6  22
  [ =CCE9 ]
 CCC7  86          locccc7:                stx     $31
 CCC8  31
 CCC9  84                                  sty     $32
 CCCA  32
 CCCB  A8          loccccb:                tay
 CCCC  A2          loccccc:                ldx     #$0f
 CCCD  0F
 CCCE  B9          locccce:                lda     loccb01,y
 CCCF  01 CB
 CCD1  F0                                  beq     loccce1
 CCD2  0E
  [ =CCE1 ]
 CCD3  86                                  stx     $bf
 CCD4  BF
 CCD5  95                                  sta     $c0,x
 CCD6  C0
 CCD7  A9                                  lda     #$01
 CCD8  01
 CCD9  95                                  sta     $e0,x
 CCDA  E0
 CCDB  95                                  sta     $f0,x
 CCDC  F0
 CCDD  A9                                  lda     #$ff
 CCDE  FF
 CCDF  85                                  sta     $bf
 CCE0  BF
 CCE1  88          loccce1:                dey
 CCE2  CA                                  dex
 CCE3  10                                  bpl     locccce
 CCE4  E9
  [ =CCCE ]
 CCE5  A6                                  ldx     $31
 CCE6  31
 CCE7  A4                                  ldy     $32
 CCE8  32
 CCE9  60          loccce9:                rts

 CCEA  A9          locccea:                lda     #$2f        ; 0 0 0 0 
                   0d 10 0 0 0 0 0 0 0 0 0 0
 CCEB  2F
 CCEC  D0                                  bne     locccc3
 CCED  D5
  [ =CCC3 ]

 CCEE  A9          locccee:                lda     #$6f        ; 0 0 0 0 0 
                   0 0 0 0 0 53 56 0 0 0 0
 CCEF  6F
 CCF0  D0                                  bne     locccc3
 CCF1  D1
  [ =CCC3 ]

 CCF2  A9          locccf2:                lda     #$7f        ; 0 0 0 0 0 
                   0 0 0 0 0 59 5c 0 0 0 0
 CCF3  7F
 CCF4  D0                                  bne     locccc3
 CCF5  CD
  [ =CCC3 ]

 CCF6  A9          locccf6:                lda     #$9f        ; 0 0 0 0 0 
                   0 0 0 0 0 0 0 41 44 0 0
 CCF7  9F
 CCF8  D0                                  bne     locccc3
 CCF9  C9
  [ =CCC3 ]

 CCFA  A9          locccfa:                lda     #$af        ; 4d 50 0 0 
                   0 0 0 0 0 0 0 0 0 0 0 0
 CCFB  AF
 CCFC  D0                                  bne     locccc7
 CCFD  C9
  [ =CCC7 ]

 CCFE  A9          locccfe:                lda     #$bf        ; 5f 62 0 0 
                   0 0 0 0 0 0 0 0 0 0 0 0
 CCFF  BF
 CD00  D0                                  bne     locccc3
 CD01  C1
  [ =CCC3 ]

 CD02  A9          loccd02:                lda     #$3f        ; 0 0 0 0 0 
                   0 0 0 0 0 65 68 0 0 0 0
 CD03  3F
 CD04  D0                                  bne     locccc3
 CD05  BD
  [ =CCC3 ]

 CD06  A9          sound_pulsar:           lda     #$cf        ; 0 0 0 0 0 
                   0 0 0 0 0 6d 6d 0 0 0 0
 CD07  CF
 CD08  D0                                  bne     locccc3
 CD09  B9
  [ =CCC3 ]

 CD0A  A2          loccd0a:                ldx     #$0f
 CD0B  0F
 CD0C  B5          loccd0c:                lda     $c0,x
 CD0D  C0
 CD0E  F0                                  beq     loccd8e
 CD0F  7E
  [ =CD8E ]
 CD10  E4                                  cpx     $bf
 CD11  BF
 CD12  F0                                  beq     loccd8e
 CD13  7A
  [ =CD8E ]
 CD14  D6                                  dec     $e0,x
 CD15  E0
 CD16  D0                                  bne     loccd8e
 CD17  76
  [ =CD8E ]
 CD18  D6                                  dec     $f0,x
 CD19  F0
 CD1A  D0                                  bne     loccd54
 CD1B  38
  [ =CD54 ]
 CD1C  F6          loccd1c:                inc     $c0,x
 CD1D  C0
 CD1E  F6                                  inc     $c0,x
 CD1F  C0
 CD20  B5                                  lda     $c0,x
 CD21  C0
 CD22  0A                                  asl     a
 CD23  A8                                  tay
 CD24  B0                                  bcs     loccd36
 CD25  10
  [ =CD36 ]
 CD26  B9                                  lda     loccbcb,y
 CD27  CB CB
 CD29  95                                  sta     $d0,x
 CD2A  D0
 CD2B  B9                                  lda     loccbce,y
 CD2C  CE CB
 CD2E  95                                  sta     $f0,x
 CD2F  F0
 CD30  B9                                  lda     loccbcc,y
 CD31  CC CB
 CD33  B8                                  clv
 CD34  50                                  bvc     loccd43
 CD35  0D
  [ =CD43 ]
 CD36  B9          loccd36:                lda     loccccb,y
 CD37  CB CC
 CD39  95                                  sta     $d0,x
 CD3A  D0
 CD3B  B9                                  lda     locccce,y
 CD3C  CE CC
 CD3E  95                                  sta     $f0,x
 CD3F  F0
 CD40  B9                                  lda     loccccc,y
 CD41  CC CC
 CD43  95          loccd43:                sta     $e0,x
 CD44  E0
 CD45  D0                                  bne     loccd51
 CD46  0A
  [ =CD51 ]
 CD47  95                                  sta     $c0,x
 CD48  C0
 CD49  B5                                  lda     $d0,x
 CD4A  D0
 CD4B  F0                                  beq     loccd51
 CD4C  04
  [ =CD51 ]
 CD4D  95                                  sta     $c0,x
 CD4E  C0
 CD4F  D0                                  bne     loccd1c
 CD50  CB
  [ =CD1C ]
 CD51  B8          loccd51:                clv
 CD52  50                                  bvc     loccd7f
 CD53  2B
  [ =CD7F ]
 CD54  0A          loccd54:                asl     a
 CD55  A8                                  tay
 CD56  B0                                  bcs     loccd63
 CD57  0B
  [ =CD63 ]
 CD58  B9                                  lda     loccbcc,y
 CD59  CC CB
 CD5B  95                                  sta     $e0,x
 CD5C  E0
 CD5D  B9                                  lda     loccbcc+1,y
 CD5E  CD CB
 CD60  B8                                  clv
 CD61  50                                  bvc     loccd6b
 CD62  08
  [ =CD6B ]
 CD63  B9          loccd63:                lda     loccccc,y
 CD64  CC CC
 CD66  95                                  sta     $e0,x
 CD67  E0
 CD68  B9                                  lda     loccccc+1,y
 CD69  CD CC
 CD6B  B4          loccd6b:                ldy     $d0,x
 CD6C  D0
 CD6D  18                                  clc
 CD6E  75                                  adc     $d0,x
 CD6F  D0
 CD70  95                                  sta     $d0,x
 CD71  D0
 CD72  8A                                  txa
 CD73  4A                                  lsr     a
 CD74  90                                  bcc     loccd7f
 CD75  09
  [ =CD7F ]
 CD76  98                                  tya
 CD77  55                                  eor     $d0,x
 CD78  D0
 CD79  29                                  and     #$f0
 CD7A  F0
 CD7B  55                                  eor     $d0,x
 CD7C  D0
 CD7D  95                                  sta     $d0,x
 CD7E  D0
 CD7F  B5          loccd7f:                lda     $d0,x
 CD80  D0
 CD81  E0                                  cpx     #$08
 CD82  08
 CD83  90                                  bcc     loccd8b
 CD84  06
  [ =CD8B ]
 CD85  9D                                  sta     spinner_cabtyp,x
 CD86  C8 60
 CD88  B8                                  clv
 CD89  50                                  bvc     loccd8e
 CD8A  03
  [ =CD8E ]
 CD8B  9D          loccd8b:                sta     pokey1,x
 CD8C  C0 60
 CD8E  CA          loccd8e:                dex
 CD8F  30                                  bmi     loccd94
 CD90  03
  [ =CD94 ]
 CD91  4C                                  jmp     loccd0c
 CD92  0C CD
 CD94  60          loccd94:                rts

                   ; Commented in another disassembly as pokey 
                   initialization

 CD95  A9          loccd95:                lda     #$00
 CD96  00
 CD97  8D                                  sta     $60cf
 CD98  CF 60
 CD9A  8D                                  sta     $60df
 CD9B  DF 60
 CD9D  8D                                  sta     $0720
 CD9E  20 07
 CDA0  A2                                  ldx     #$04
 CDA1  04
 CDA2  AD                                  lda     pokey1_rand
 CDA3  CA 60
 CDA5  AC                                  ldy     pokey2_rand
 CDA6  DA 60
 CDA8  CD          loccda8:                cmp     pokey1_rand
 CDA9  CA 60
 CDAB  D0                                  bne     loccdb0
 CDAC  03
  [ =CDB0 ]
 CDAD  CC                                  cpy     pokey2_rand
 CDAE  DA 60
 CDB0  F0          loccdb0:                beq     loccdb7
 CDB1  05
  [ =CDB7 ]
 CDB2  8D                                  sta     $0720
 CDB3  20 07
 CDB5  A2                                  ldx     #$00
 CDB6  00
 CDB7  CA          loccdb7:                dex
 CDB8  10                                  bpl     loccda8
 CDB9  EE
  [ =CDA8 ]
 CDBA  A9                                  lda     #$07
 CDBB  07
 CDBC  8D                                  sta     $60cf
 CDBD  CF 60
 CDBF  8D                                  sta     $60df
 CDC0  DF 60
 CDC2  A2                                  ldx     #$07
 CDC3  07
 CDC4  A9                                  lda     #$00
 CDC5  00
 CDC6  9D          loccdc6:                sta     pokey1,x
 CDC7  C0 60
 CDC9  9D                                  sta     pokey2,x
 CDCA  D0 60
 CDCC  95                                  sta     $c0,x
 CDCD  C0
 CDCE  95                                  sta     $d0,x
 CDCF  D0
 CDD0  CA                                  dex
 CDD1  10                                  bpl     loccdc6
 CDD2  F3
  [ =CDC6 ]
 CDD3  A9                                  lda     #$00
 CDD4  00
 CDD5  8D                                  sta     spinner_cabtyp
 CDD6  C8 60
 CDD8  A9                                  lda     #$00
 CDD9  00
 CDDA  8D                                  sta     zap_fire_starts
 CDDB  D8 60
 CDDD  60                                  rts

                   ;-------------------------------------------------------
                   ------------------------------------------------
                   ;
                   ; Pre-calced display code for the score, high score, 
                   level, number, ie: stuff at the top of the screen.
                   ; First this pre-calced display code is copied into the 
                   $2f60/video_data buffer, then the variable pieces such
                   ; as the score, number of remaining ships, etc, is 
                   copied into (on top of) this static copy.
                   ;
                   ; At the top of this table you will find the offsets 
                   for where each important piece of info, such
                   ; as the player 1 score, player 2 score, etc, lives 
                   within the buffer.  This is how it knows where
                   ; to go and overwrite the static data with the current 
                   game info.
                   ;
                   ; Note:  The total length cannot exceed $a0 bytes since 
                   much of the math does not account for
                   ;        the possibility of an overflow past $3000, and 
                   who knows 
                   ;
                   ;-------------------------------------------------------
                   ------------------------------------------------

                   ; Where to find the scaling factors for each player's 
                   score: see $a991

 CDDE  0B          ScaleOffset:            .byte   
                   p1scaleoff-hdr_template+1       ; Where to find the 
                   scale factor for P1 score
 CDDF  5D                                  .byte   
                   p2scaleoff-hdr_template+1       ; Where to find the 
                   scale factor for P1 score

                   ; Where to find the code to draw each player's 
                   remaining ships: see $a997

 CDE0  22          ShipsLeftOffset:        .byte   p1shipoff-hdr_template  
                           ; Index into video_data to draw P1 remaining 
                   ships
 CDE1  74                                  .byte   p2shipoff-hdr_template  
                           ; Index into video_data to draw P2 remaining 
                   ships

                   ; Where to find the code to draw the scores and high 
                   score: see $a9cb

 CDE2  0C          ScoresOffset:           .byte   p1scoreoff-hdr_template 
                           ; Index into video_data to draw P1 score
 CDE3  5E                                  .byte   p2scoreoff-hdr_template 
                           ; Index into video_data to draw P2 score

 CDE4  34          HiScoreOffset:          .byte   hiscoreoff-hdr_template 
                           ; Index into video_data to draw High Score

                   ; Offset of high-score initials code from video_data, 
                   used at $a929

 CDE5  50          hsinitidx:              .byte   hsinitoff-hdr_template  
                           ; Index into video_data to draw HS Initials

                   hdr_template: 
 CDE6  00                                  .byte $00,$71           ; 
                   vscale  b=1 l=0                   [ Set scaling ]
 CDE7  71
 CDE8  C5                                  .byte $c5,$68           ; vstat 
                     z=12 c=5 sparkle=1        [ Color 5 ]
 CDE9  68
 CDEA  40                                  .byte $40,$80           ; 
                   vcenter                           [ Go to center of 
                   screen]
 CDEB  80
 CDEC  6C                                  .byte $6c,$01,$40,$1e   ; vdraw 
                     x=-449 y=+364 z=off       [ Move to -449,364 with pen 
                   off]
 CDED  01
 CDEE  40
 CDEF  1E

 CDF0  00          p1scaleoff:             .byte $00,$71           ; 
                   vscale  b=0 l=0                   [ Clear scaling ? ]
 CDF1  71

                   p1scoreoff:             

 CDF2  B4                                  .byte $b4,$a8           ; vjsr  
                                               [ Draw _ ]
 CDF3  A8
 CDF4  B4                                  .byte $b4,$a8           ; vjsr  
                                               [ Draw _ ]
 CDF5  A8
 CDF6  B4                                  .byte $b4,$a8           ; vjsr  
                                               [ Draw _ ]
 CDF7  A8
 CDF8  B4                                  .byte $b4,$a8           ; vjsr  
                                               [ Draw _ ]
 CDF9  A8
 CDFA  B4                                  .byte $b4,$a8           ; vjsr  
                                               [ Draw _ ]
 CDFB  A8
 CDFC  65                                  .byte $65,$a8           ; vjsr  
                                               [ Draw 0 ]
 CDFD  A8

 CDFE  00                                  .byte $00,$00,$70,$1f   ; 
                   vldraw  x=-144 y=+0 z=off         [ Go left -144 ]
 CDFF  00
 CE00  70
 CE01  1F
 CE02  00                                  .byte $00,$71           ; 
                   vscale  b=1 l=0                   [ Set scaling to 1 ]
 CE03  71
 CE04  00                                  .byte $00,$58, $c1,$68  ; 
                   vsdraw  x=+0 y=-16 z=off          [ Move down 16 ]
 CE05  58
 CE06  C1
 CE07  68

 CE08  3F          p1shipoff:              .byte $3f,$a9           ; vjsr  
                                               [ Space for Ship ]
 CE09  A9
 CE0A  3F                                  .byte $3f,$a9           ; vjsr  
                                               [ Space for Ship ]
 CE0B  A9
 CE0C  3F                                  .byte $3f,$a9           ; vjsr  
                                               [ Space for Ship ]
 CE0D  A9
 CE0E  3F                                  .byte $3f,$a9           ; vjsr  
                                               [ Space for Ship ]
 CE0F  A9
 CE10  3F                                  .byte $3f,$a9           ; vjsr  
                                               [ Space for Ship ]
 CE11  A9
 CE12  3F                                  .byte $3f,$a9           ; vjsr  
                                               [ Space for Ship ]
 CE13  A9

 CE14  30                                  .byte $30,$00,$D0,$1f   ; 
                   vldraw  x=-48 y=+48 z=off         [ Pen off, 48 left, 
                   48 up ]
 CE15  00
 CE16  D0
 CE17  1F
 CE18  C5                                  .byte $c5,$68           
 CE19  68

                   hiscoreoff:             

 CE1A  B4                                  .byte $b4,$a8           ; vjsr  
                                               [ Draw _ ]
 CE1B  A8
 CE1C  B4                                  .byte $b4,$a8           ; vjsr  
                                               [ Draw _ ]
 CE1D  A8
 CE1E  B4                                  .byte $b4,$a8           ; vjsr  
                                               [ Draw _ ]
 CE1F  A8
 CE20  B4                                  .byte $b4,$a8           ; vjsr  
                                               [ Draw _ ]
 CE21  A8
 CE22  B4                                  .byte $b4,$a8           ; vjsr  
                                               [ Draw _ ]
 CE23  A8
 CE24  B4                                  .byte $b4,$a8           ; vjsr  
                                               [ Draw _ ]
 CE25  A8

 CE26  DC                                  .byte $dc,$1f,$0,$00    ; 
                   vldraw  x=-36 y=+0 z=off          [ Pen off, 36 left, 0 
                   down ]
 CE27  1F
 CE28  00
 CE29  00
 CE2A  C7                                  .byte $c7,$68           ; vstat 
                     z=12 c=7 sparkle=1        [ Color 7 ]
 CE2B  68

 CE2C  B4          levelnumoffset:         .byte $b4,$a8           ; vjsr  
                                               [ Draw _ ] Level Number
 CE2D  A8
 CE2E  B4                                  .byte $b4,$a8           ; vjsr  
                                               [ Draw _ ]
 CE2F  A8

 CE30  C5                                  .byte $c5,$68           ; vstat 
                     z=12 c=5 sparkle=1        [ Color 5 ]
 CE31  68
 CE32  24                                  .byte $24,$00,$e8,$1f   ; 
                   vldraw  x=-24 y=+36 z=off         [ Pen off, 24 left, 
                   36 up ]
 CE33  00
 CE34  E8
 CE35  1F

 CE36  B4          hsinitoff:              .byte $b4,$a8           ; vjsr  
                                               [ Draw _ ] Hi Score Initials
 CE37  A8
 CE38  B4                                  .byte $b4,$a8           ; vjsr  
                                               [ Draw _ ]
 CE39  A8
 CE3A  B4                                  .byte $b4,$a8           ; vjsr  
                                               [ Draw _ ]
 CE3B  A8

 CE3C  00                                  .byte $00,$71           ; 
                   vscale  b=1 l=0                   [ Set scaling]
 CE3D  71
 CE3E  E0                                  .byte $e0,$1f,$28,$00   ; 
                   vldraw  x=+40 y=-32 z=off         [ Pen off, 40 right, 
                   32 up]
 CE3F  1F
 CE40  28
 CE41  00

 CE42  00          p2scaleoff:             .byte $00,$71           ; 
                   vscale  b=1 l=0
 CE43  71

                   p2scoreoff:             

 CE44  B4                                  .byte $b4,$a8           ; vjsr  
                                               [ Draw _ ]
 CE45  A8
 CE46  B4                                  .byte $b4,$a8           ; vjsr  
                                               [ Draw _ ]
 CE47  A8
 CE48  B4                                  .byte $b4,$a8           ; vjsr  
                                               [ Draw _ ]
 CE49  A8
 CE4A  B4                                  .byte $b4,$a8           ; vjsr  
                                               [ Draw _ ]
 CE4B  A8
 CE4C  B4                                  .byte $b4,$a8           ; vjsr  
                                               [ Draw _ ]
 CE4D  A8
 CE4E  65                                  .byte $65,$a8           ; vjsr  
                                               [ Draw _ ]
 CE4F  A8

 CE50  00                                  .byte $00,$00,$70,$1f   ; 
                   vldraw  x=-144 y=+0 z=off
 CE51  00
 CE52  70
 CE53  1F
 CE54  00                                  .byte $00,$71           ; 
                   vscale  b=1 l=0
 CE55  71
 CE56  00                                  .byte $00,$58           ; vjsr
 CE57  58
 CE58  C1                                  .byte $c1,$68           ; vstat 
                     z=12 c=1 sparkle=1        [ Color 1 - Same as Player ]
 CE59  68

 CE5A  3F          p2shipoff:              .byte $3f,$a9           ; vjsr 
                   $127e                        [ Space for Ship ]
 CE5B  A9
 CE5C  3F                                  .byte $3f,$a9           ; vjsr 
                   $127e                        [ Space for Ship ]
 CE5D  A9
 CE5E  3F                                  .byte $3f,$a9           ; vjsr 
                   $127e                        [ Space for Ship ]
 CE5F  A9
 CE60  3F                                  .byte $3f,$a9           ; vjsr 
                   $127e                        [ Space for Ship ]
 CE61  A9
 CE62  3F                                  .byte $3f,$a9           ; vjsr 
                   $127e                        [ Space for Ship ]
 CE63  A9
 CE64  3F                                  .byte $3f,$a9           ; vjsr 
                   $127e                        [ Space for Ship ]
 CE65  A9

 0000  65 CE 00 00 hdr_template_end = *-1

 CE66  55          hdr_template_len:       .byte $55                       
                           ; Length when in demo mode?
 CE67  7F                                  .byte 
                   hdr_template_end-hdr_template     ; Length of header 
                   template canned data 
 0000  01 00 00 00 .assert (hdr_template_end-hdr_template < $a0)           
                           ; Otherwise would run off past $3000 when 
                   copied starting at $2f60

                   ; Tables of addresses of areas to assemble various 
                   video sequences into.
                   ; 
                   ; These are the 6502-seen addresses; see the vjmp 
                   tables below, which hold
                   ; the corresponding vector-generator addresses in the 
                   form of a vjmp.
                   ; These tables are used at b2c1 and b2e1; which one is 
                   used is based on
                   ; the values in the dblbuf_flg vector.

                   ; Table A

 CE68  06 20       dblbuf_addr_A:          .word       $2006
 CE6A  02 22                               .word       $2202
 CE6C  0C 24                               .word       $240c
 CE6E  92 26       locce6e:                .word       $2692
 CE70  00 29                               .word       $2900
 CE72  56 2A                               .word       $2a56
 CE74  D8 2C                               .word       $2cd8
 CE76  BE 2D                               .word       $2dbe
 CE78  24 2E                               .word       $2e24

                   ; Table B

 CE7A  04 21       dblbuf_addr_B:          .word       $2104
 CE7C  06 23                               .word       $2306
 CE7E  4E 25                               .word       $254e
 CE80  C8 27                               .word       $27c8
 CE82  AA 29                               .word       $29aa
 CE84  96 2B                               .word       $2b96
 CE86  4A 2D       locce86:                .word       $2d4a
 CE88  F0 2D                               .word       $2df0
 CE8A  A6 2E                               .word       $2ea6

                   ; This table gives the location to stuff the vjmp from 
                   the tables below
                   ; depending on which way the double-buffering flag is 
                   set.

 CE8C  04 20       dblbuf_vjsr_loc:        .word       $2004
 CE8E  00 22                               .word       $2200
 CE90  0A 24                               .word       $240a
 CE92  90 26                               .word       $2690
 CE94  FE 28                               .word       $28fe
 CE96  54 2A                               .word       $2a54
 CE98  D6 2C                               .word       $2cd6
 CE9A  BC 2D                               .word       $2dbc
 CE9C  22 2E                               .word       $2e22

                   ; These tables contain vjmp instructions corresponding 
                   to Tables A and B
                   ; above.  The addresses here are the 
                   vector-generator-visible addresses
                   ; that refer to the same video RAM as the 6502-visible 
                   addresses above.

                   ; Table C

 CE9E  03 E0       dblbuf_vjmp_C:          .word 0E003h
 CEA0  01                                  .byte    1
 CEA1  E1                                  .byte 0E1h 
 CEA2  06                                  .byte    6
 CEA3  E2                                  .byte 0E2h 
 CEA4  49                                  .byte  49h 
 CEA5  E3                                  .byte 0E3h 
 CEA6  80                                  .byte  80h 
 CEA7  E4                                  .byte 0E4h 
 CEA8  2B                                  .byte  2Bh 
 CEA9  E5                                  .byte 0E5h 
 CEAA  6C                                  .byte  6Ch 
 CEAB  E6                                  .byte 0E6h 
 CEAC  DF                                  .byte 0DFh 
 CEAD  E6                                  .byte 0E6h 
 CEAE  12                                  .byte  12h
 CEAF  E7                                  .byte 0E7h 

                   ; Table D

 CEB0  82          dblbuf_vjmp_D:          .byte  82h
 CEB1  E0                                  .byte 0E0h 
 CEB2  83                                  .byte  83h 
 CEB3  E1                                  .byte 0E1h 
 CEB4  A7                                  .byte 0A7h 
 CEB5  E2                                  .byte 0E2h 
 CEB6  E4                                  .byte 0E4h 
 CEB7  E3                                  .byte 0E3h 
 CEB8  D5                                  .byte 0D5h 
 CEB9  E4                                  .byte 0E4h 
 CEBA  CB                                  .byte 0CBh 
 CEBB  E5                                  .byte 0E5h 
 CEBC  A5                                  .byte 0A5h 
 CEBD  E6                                  .byte 0E6h 
 CEBE  F8                                  .byte 0F8h 
 CEBF  E6                                  .byte 0E6h 
 CEC0  53                                  .byte  53h 
 CEC1  E7                                  .byte 0E7h 

                   ; I don't know what these three are used for.  The 
                   first jumps to a
                   ; routine that calls the double-buffered stuff (in an 
                   order different
                   ; from that of the above tables); the second calls just 
                   one of them,
                   ; and the third does nothing.  All three halt after 
                   doing their things.
                   ; But see $b1bc.

 CEC2  DA          loccEC2:                .byte 0DAh                      
                       
 CEC3  EE          loccEC3:                .byte 0EEh 
 CEC4  E4          loccEC4:                .byte 0E4h                      
                         
 CEC5  EE          loccEC5:                .byte 0EEh 
 CEC6  E6          locCEC6:                .byte 0E6h 
 CEC7  EE          locCEC7:                .byte 0EEh                      
                          

                   graphic_table: 
 CEC8  61                                  .byte  61h
 CEC9  AA                                  .byte 0AAh 
 CECA  7C                                  .byte  7Ch 
 CECB  AA                                  .byte 0AAh 
 CECC  91                                  .byte  91h 
 CECD  AA                                  .byte 0AAh 
 CECE  AD                                  .byte 0ADh 
 CECF  AA                                  .byte 0AAh 
 CED0  CA                                  .byte 0CAh 
 CED1  AA                                  .byte 0AAh 
 CED2  14                                  .byte  14h
 CED3  AB                                  .byte 0ABh 
 CED4  6F                                  .byte  6Fh 
 CED5  AB                                  .byte 0ABh 
 CED6  C0                                  .byte 0C0h 
 CED7  AB                                  .byte 0ABh 
 CED8  15                                  .byte  15h
 CED9  AC                                  .byte 0ACh 
 CEDA  66                                  .byte  66h 
 CEDB  AC                                  .byte 0ACh 
 CEDC  7D                                  .byte  7Dh 
 CEDD  AC                                  .byte 0ACh 
 CEDE  94                                  .byte  94h 
 CEDF  AC                                  .byte 0ACh 
 CEE0  AB                                  .byte 0ABh 
 CEE1  AC                                  .byte 0ACh 
 CEE2  D8                                  .byte 0D8h 
 CEE3  AC                                  .byte 0ACh 
 CEE4  FA                                  .byte 0FAh 
 CEE5  AC                                  .byte 0ACh 
 CEE6  0D                                  .byte  0Dh
 CEE7  AD                                  .byte 0ADh 
 CEE8  20                                  .byte  20h
 CEE9  AD                                  .byte 0ADh 
 CEEA  39                                  .byte  39h 
 CEEB  AD                                  .byte 0ADh 
 CEEC  51                                  .byte  51h 
 CEED  AD                                  .byte 0ADh 
 CEEE  6A                                  .byte  6Ah 
 CEEF  AD                                  .byte 0ADh 
 CEF0  8C                                  .byte  8Ch 
 CEF1  AD                                  .byte 0ADh 
 CEF2  8A                                  .byte  8Ah 
 CEF3  AD                                  .byte 0ADh 
 CEF4  88                                  .byte  88h 
 CEF5  AD                                  .byte 0ADh 
 CEF6  86                                  .byte  86h 
 CEF7  AD                                  .byte 0ADh 
 CEF8  84                                  .byte  84h 
 CEF9  AD                                  .byte 0ADh 
 CEFA  82                                  .byte  82h 
 CEFB  AD                                  .byte 0ADh 
 CEFC  86                                  .byte  86h 
 CEFD  AD                                  .byte 0ADh 
 CEFE  8A                                  .byte  8Ah 
 CEFF  AD                                  .byte 0ADh 
 CF00  8C                                  .byte  8Ch 
 CF01  AD                                  .byte 0ADh 
 CF02  D7                                  .byte 0D7h 
 CF03  AD                                  .byte 0ADh 
 CF04  C2                                  .byte 0C2h 
 CF05  AD                                  .byte 0ADh 
 CF06  C5                                  .byte 0C5h 
 CF07  AD                                  .byte 0ADh 
 CF08  C8                                  .byte 0C8h 
 CF09  AD                                  .byte 0ADh 
 CF0A  CB                                  .byte 0CBh 
 CF0B  AD                                  .byte 0ADh 
 CF0C  CE                                  .byte 0CEh 
 CF0D  AD                                  .byte 0ADh 
 CF0E  D1                                  .byte 0D1h 
 CF0F  AD                                  .byte 0ADh 
 CF10  D4                                  .byte 0D4h 
 CF11  AD                                  .byte 0ADh 
 CF12  C2                                  .byte 0C2h 
 CF13  AC                                  .byte 0ACh 
 CF14  CB                                  .byte 0CBh 
 CF15  AC                                  .byte 0ACh 
 CF16  35                                  .byte  35h 
 CF17  AE                                  .byte 0AEh 
 CF18  59                                  .byte  59h 
 CF19  AE                                  .byte 0AEh 
 CF1A  7E                                  .byte  7Eh 
 CF1B  AE                                  .byte 0AEh 
 CF1C  A2                                  .byte 0A2h 
 CF1D  AE                                  .byte 0AEh 
 CF1E  C5                                  .byte 0C5h 
 CF1F  AE                                  .byte 0AEh 
 CF20  CB                                  .byte 0CBh 
 CF21  AE                                  .byte 0AEh 
 CF22  D2                                  .byte 0D2h 
 CF23  AE                                  .byte 0AEh 

 CF24  A2          loccf24:                ldx     #$02
 CF25  02
 CF26  AD          loccf26:                .byte $ad, $08, $00             
                       ; BUGBUG Non-zero-page, was 'lda     
                   zap_fire_shadow'
 CF27  08
 CF28  00
 CF29  E0                                  cpx     #$01
 CF2A  01
 CF2B  F0                                  beq     loccf30
 CF2C  03
  [ =CF30 ]
 CF2D  B0                                  bcs     loccf31
 CF2E  02
  [ =CF31 ]
 CF2F  4A                                  lsr     a
 CF30  4A          loccf30:                lsr     a
 CF31  4A          loccf31:                lsr     a
 CF32  B5                                  lda     $0d,x
 CF33  0D
 CF34  29                                  and     #$1f
 CF35  1F
 CF36  B0                                  bcs     loccf6f
 CF37  37
  [ =CF6F ]
 CF38  F0                                  beq     loccf4a
 CF39  10
  [ =CF4A ]
 CF3A  C9                                  cmp     #$1b
 CF3B  1B
 CF3C  B0                                  bcs     loccf48
 CF3D  0A
  [ =CF48 ]
 CF3E  A8                                  tay
 CF3F  A5                                  lda     $07
 CF40  07
 CF41  29                                  and     #$07
 CF42  07
 CF43  C9                                  cmp     #$07
 CF44  07
 CF45  98                                  tya
 CF46  90                                  bcc     loccf4a
 CF47  02
  [ =CF4A ]
 CF48  E9          loccf48:                sbc     #$01
 CF49  01
 CF4A  95          loccf4a:                sta     $0d,x
 CF4B  0D
 CF4C  AD                                  .byte $ad, $08, $00             
                       ; BUGBUG Non-zero-page, was 'lda     
                   zap_fire_shadow'lda     zap_fire_shadow
 CF4D  08
 CF4E  00
 CF4F  29                                  and     #$08
 CF50  08
 CF51  D0                                  bne     loccf57
 CF52  04
  [ =CF57 ]
 CF53  A9                                  lda     #$f0
 CF54  F0
 CF55  85                                  sta     $0c
 CF56  0C
 CF57  A5          loccf57:                lda     $0c
 CF58  0C
 CF59  F0                                  beq     loccf63
 CF5A  08
  [ =CF63 ]
 CF5B  C6                                  dec     $0c
 CF5C  0C
 CF5D  A9                                  lda     #$00
 CF5E  00
 CF5F  95                                  sta     $0d,x
 CF60  0D
 CF61  95                                  sta     $10,x
 CF62  10
 CF63  18          loccf63:                clc
 CF64  B5                                  lda     $10,x
 CF65  10
 CF66  F0                                  beq     loccf8b
 CF67  23
  [ =CF8B ]
 CF68  D6                                  dec     $10,x
 CF69  10
 CF6A  D0                                  bne     loccf8b
 CF6B  1F
  [ =CF8B ]
 CF6C  38                                  sec
 CF6D  B0                                  bcs     loccf8b
 CF6E  1C
  [ =CF8B ]
 CF6F  C9          loccf6f:                cmp     #$1b
 CF70  1B
 CF71  B0                                  bcs     loccf7c
 CF72  09
  [ =CF7C ]
 CF73  B5                                  lda     $0d,x
 CF74  0D
 CF75  69                                  adc     #$20
 CF76  20
 CF77  90                                  bcc     loccf4a
 CF78  D1
  [ =CF4A ]
 CF79  F0                                  beq     loccf7c
 CF7A  01
  [ =CF7C ]
 CF7B  18                                  clc
 CF7C  A9          loccf7c:                lda     #$1f
 CF7D  1F
 CF7E  B0                                  bcs     loccf4a
 CF7F  CA
  [ =CF4A ]
 CF80  95                                  sta     $0d,x
 CF81  0D
 CF82  B5                                  lda     $10,x
 CF83  10
 CF84  F0                                  beq     loccf87
 CF85  01
  [ =CF87 ]
 CF86  38                                  sec
 CF87  A9          loccf87:                lda     #$78
 CF88  78
 CF89  95                                  sta     $10,x
 CF8A  10
 CF8B  90          loccf8b:                bcc     loccfb7
 CF8C  2A
  [ =CFB7 ]
 CF8D  A9                                  lda     #$00
 CF8E  00
 CF8F  E0                                  cpx     #$01
 CF90  01
 CF91  90                                  bcc     loccfa9
 CF92  16
  [ =CFA9 ]
 CF93  F0                                  beq     loccfa1
 CF94  0C
  [ =CFA1 ]

                   ; coin in right slot

 CF95  A5                                  lda     coinage_shadow
 CF96  09
 CF97  29                                  and     #$0c ; right slot 
                   multiplier
 CF98  0C
 CF99  4A                                  lsr     a
 CF9A  4A                                  lsr     a
 CF9B  F0                                  beq     loccfa9 ; branch if x1
 CF9C  0C
  [ =CFA9 ]
 CF9D  69                                  adc     #$02
 CF9E  02
 CF9F  D0                                  bne     loccfa9
 CFA0  08
  [ =CFA9 ]

                   ; coin in left slot

 CFA1  A5          loccfa1:                lda     coinage_shadow
 CFA2  09
 CFA3  29                                  and     #$10 ; left slot 
                   multiplier
 CFA4  10
 CFA5  F0                                  beq     loccfa9
 CFA6  02
  [ =CFA9 ]
 CFA7  A9                                  lda     #$01
 CFA8  01

                   ; At this point, A holds the post-multiplier coin count,
                    minus 1.

 CFA9  38          loccfa9:                sec
 CFAA  48                                  pha
 CFAB  65                                  adc     coin_string
 CFAC  16
 CFAD  85                                  sta     coin_string
 CFAE  16
 CFAF  68                                  pla
 CFB0  38                                  sec
 CFB1  65                                  adc     uncredited
 CFB2  17
 CFB3  85                                  sta     uncredited
 CFB4  17
 CFB5  F6                                  inc     $13,x
 CFB6  13
 CFB7  CA          loccfb7:                dex
 CFB8  30                                  bmi     loccfbd
 CFB9  03
  [ =CFBD ]
 CFBA  4C                                  jmp     loccf26
 CFBB  26 CF
 CFBD  A5          loccfbd:                lda     coinage_shadow
 CFBE  09
 CFBF  4A                                  lsr     a                   ; 
                   extract bonus coins bits
 CFC0  4A                                  lsr     a
 CFC1  4A                                  lsr     a
 CFC2  4A                                  lsr     a
 CFC3  4A                                  lsr     a
 CFC4  A8                                  tay
 CFC5  A5                                  lda     coin_string
 CFC6  16
 CFC7  38                                  sec
 CFC8  F9                                  sbc     loccfd9,y
 CFC9  D9 CF
 CFCB  30                                  bmi     loccfe1
 CFCC  14
  [ =CFE1 ]
 CFCD  85                                  sta     coin_string
 CFCE  16
 CFCF  E6                                  inc     $18
 CFD0  18
 CFD1  C0                                  cpy     #$03                ; 
                   setting for 2 bonus
 CFD2  03
 CFD3  D0                                  bne     loccfe1
 CFD4  0C
  [ =CFE1 ]
 CFD5  E6                                  inc     $18
 CFD6  18
 CFD7  D0                                  bne     loccfe1
 CFD8  08
  [ =CFE1 ]

                   ; Bonus coins table (see code just above)

 CFD9  7F          loccfd9:                .byte   $7f                 ; 
                   no bonus coins
 CFDA  02                                  .byte   $02                 ; 1 
                   bonus for each 2
 CFDB  04                                  .byte   $04                 ; 1 
                   bonus for each 4
 CFDC  04                                  .byte   $04                 ; 2 
                   bonus for each 4
 CFDD  05                                  .byte   $05                 ; 1 
                   bonus for each 5
 CFDE  03                                  .byte   $03                 ; 1 
                   bonus for each 3
 CFDF  7F                                  .byte   $7f                 ; 
                   no bonus coins
 CFE0  7F                                  .byte   $7f                 ; 
                   no bonus coins

 CFE1  A5          loccfe1:                lda     coinage_shadow
 CFE2  09
 CFE3  29                                  and     #$03                ; 
                   coins-to-credits bits (XOR $02)
 CFE4  03
 CFE5  A8                                  tay
 CFE6  F0                                  beq     locd002             ; 
                   branch if free play
 CFE7  1A
  [ =D002 ]

                   ; A now 1 for 1c/2c, 2 for 1c/1c, 3 for 2c/1c

 CFE8  4A                                  lsr     a
 CFE9  69                                  adc     #$00
 CFEA  00
 CFEB  49                                  eor     #$ff
 CFEC  FF

                   ; A now fe for 1c/*, fd for 2c/1c

 CFED  38                                  sec
 CFEE  65                                  adc     uncredited
 CFEF  17
 CFF0  B0                                  bcs     loccffa
 CFF1  08
  [ =CFFA ]
 CFF2  65                                  adc     $18
 CFF3  18
 CFF4  30                                  bmi     locd004
 CFF5  0E
  [ =D004 ]
 CFF6  85                                  sta     $18
 CFF7  18
 CFF8  A9                                  lda     #$00
 CFF9  00
 CFFA  C0          loccffa:                cpy     #$02
 CFFB  02
 CFFC  B0                                  bcs     locd000
 CFFD  02
  [ =D000 ]
 CFFE  E6                                  inc     credits
 CFFF  06
 D000  E6          locd000:                inc     credits
 D001  06
 D002  85          locd002:                sta     uncredited
 D003  17
 D004  A5          locd004:                lda     $07
 D005  07
 D006  4A                                  lsr     a
 D007  B0                                  bcs     locd030
 D008  27
  [ =D030 ]
 D009  A0                                  ldy     #$00
 D00A  00
 D00B  A2                                  ldx     #$02
 D00C  02
 D00D  B5          locd00d:                lda     $13,x
 D00E  13
 D00F  F0                                  beq     locd01a
 D010  09
  [ =D01A ]
 D011  C9                                  cmp     #$10
 D012  10
 D013  90                                  bcc     locd01a
 D014  05
  [ =D01A ]
 D015  69                                  adc     #$ef
 D016  EF
 D017  C8                                  iny
 D018  95                                  sta     $13,x
 D019  13
 D01A  CA          locd01a:                dex
 D01B  10                                  bpl     locd00d
 D01C  F0
  [ =D00D ]
 D01D  98                                  tya
 D01E  D0                                  bne     locd030
 D01F  10
  [ =D030 ]
 D020  A2                                  ldx     #$02
 D021  02
 D022  B5          locd022:                lda     $13,x
 D023  13
 D024  F0                                  beq     locd02d
 D025  07
  [ =D02D ]
 D026  18                                  clc
 D027  69                                  adc     #$ef
 D028  EF
 D029  95                                  sta     $13,x
 D02A  13
 D02B  30                                  bmi     locd030
 D02C  03
  [ =D030 ]
 D02D  CA          locd02d:                dex
 D02E  10                                  bpl     locd022
 D02F  F2
  [ =D022 ]
 D030  60          locd030:                rts

                   ;-------------------------------------------------------
                   --------------------------
                   ; Message Tables
                   ;-------------------------------------------------------
                   --------------------------

                   msgs_en:

 D031  5D D1       MsgEnGameOver:          .WORD   xposMsgGameOver         
                        ; "GAME OVER"
 D033  8F D1       MsgEnPlayer:            .WORD   xposMsgPlayer           
                        ; "PLAYER "
 D035  8F D1       MsgEnPlayer2:           .WORD   xposMsgPlayer           
                        ; "PLAYER "
 D037  B1 D1       MsgEnStart:             .WORD   xposMsgStart            
                        ; "PRESS START"
 D039  EB D1       MsgEnPlay:              .WORD   xposMsgPlay             
                        ; "PLAY"
 D03B  03 D2       MsgEnInitials:          .WORD   xPosMsgInitials         
                        ; "ENTER YOUR INITIALS"
 D03D  61 D2       MsgEnSpinKnob:          .WORD   xposMsgSpinKnob         
                        ; "SPIN KNOB TO CHANGE"
 D03F  CB D2       MsgEnPressFire:         .WORD   xposMsgPressFire        
                        ; "PRESS FIRE TO SELECT"
 D041  33 D3       MsgEnHiScores:          .WORD   xposMsgHiScores         
                        ; "HIGH SCORES"
 D043  66 D3       MsgEnRanking:           .WORD   xposMsgRanking          
                        ; "RANKING FROM 1 TO "
 D045  B0 D3       MsgEnRateSelf:          .WORD   xposMsgRateSelf         
                        ; "RATE YOURSELF"
 D047  E6 D3       MsgEnNovice:            .WORD   xposMsgNovice           
                        ; "NOVICE"
 D049  FF D3       MsgEnExpert:            .WORD   xposMsgExpert           
                        ; "EXPERT"
 D04B  17 D4       MsgEnBonus:             .WORD   xposMsgBonus            
                        ; "BONUS"
 D04D  1D D4       MsgEnTime:              .WORD   xposMsgTime             
                        ; "TIME"
 D04F  34 D4       MsgEnLevel:             .WORD   xposMsgLevel            
                        ; "LEVEL"
 D051  4C D4       MsgEnHole:              .WORD   xposMsgHole             
                        ; "HOLE"
 D053  60 D4       MsgEnInsCoin:           .WORD   xposMsgInsCoin          
                        ; "INSERT COINS"
 D055  A1 D4       MsgEnFreePlay:          .WORD   xposMsgFreePlay         
                        ; "FREE PLAY"
 D057  AB D4       MsgEn1Coin2Crd:         .WORD   xposMsg1Coin2Crd        
                        ; "1 COIN 2 PLAYS"
 D059  EF D4       MsgEn1Coin1Crd:         .WORD   xposMsg1Coin1Crd        
                        ; "1 COIN 1 PLAY"
 D05B  30 D5       MsgEn2Coin1Crd:         .WORD   xposMsg2Coin1Crd        
                        ; "2 COINS 1 PLAY"
 D05D  75 D5       MsgEnAtari:             .WORD   xposMsgAtari            
                        ; "(c) MCMLXXX ATARI"
 D05F  85 D5       MsgEnCredits:           .WORD   xposMsgCredits          
                        ; "CREDITS "
 D061  A1 D5       MsgEnBonusSpc:          .WORD   xposMsgBonusSpc         
                        ; "BONUS "
 D063  A8 D5       MsgEn2CrdMin:           .WORD   xposMsg2CrdMin          
                        ; "2 CREDIT MINIMUM"
 D065  E9 D5       MsgEnBonusEv:           .WORD   xposMsgBonusEv          
                        ; "BONUS EVERY "
 D067  1C D6       MsgEnAvoidSpk:          .WORD   xposMsgAvoidSpk         
                        ; "AVOID SPIKES"
 D069  62 D6       MsgEnLevelNS:           .WORD   xposMsgLevelNS          
                        ; "LEVEL"
 D06B  7A D6       MsgEnRecharge:          .WORD   xposMsgRecharge         
                        ; "SUPERZAPPER RECHARGE"

                   ; Byte offset table - How far into the table each 
                   message is.  This distance
                   ; will be the same for all languages so long as they 
                   are all kept in sync.

 0000  00 00 00 00 ibMsgGameOver  = MsgEnGameOver  - msgs_en
 0000  02 00 00 00 ibMsgPlayer    = MsgEnPlayer    - msgs_en
 0000  04 00 00 00 ibMsgPlayer2   = MsgEnPlayer2   - msgs_en
 0000  06 00 00 00 ibMsgStart     = MsgEnStart     - msgs_en
 0000  08 00 00 00 ibMsgPlay      = MsgEnPlay      - msgs_en
 0000  0A 00 00 00 ibMsgInitials  = MsgEnInitials  - msgs_en
 0000  0C 00 00 00 ibMsgSpinKnob  = MsgEnSpinKnob  - msgs_en
 0000  0E 00 00 00 ibMsgPressFire = MsgEnPressFire - msgs_en
 0000  10 00 00 00 ibMsgHiScores  = MsgEnHiScores  - msgs_en
 0000  12 00 00 00 ibMsgRanking   = MsgEnRanking   - msgs_en
 0000  14 00 00 00 ibMsgRateSelf  = MsgEnRateSelf  - msgs_en
 0000  16 00 00 00 ibMsgNovice    = MsgEnNovice    - msgs_en
 0000  18 00 00 00 ibMsgExpert    = MsgEnExpert    - msgs_en
 0000  1A 00 00 00 ibMsgBonus     = MsgEnBonus     - msgs_en
 0000  1C 00 00 00 ibMsgTime      = MsgEnTime      - msgs_en
 0000  1E 00 00 00 ibMsgLevel     = MsgEnLevel     - msgs_en
 0000  20 00 00 00 ibMsgHole      = MsgEnHole      - msgs_en
 0000  22 00 00 00 ibMsgInsCoin   = MsgEnInsCoin   - msgs_en
 0000  24 00 00 00 ibMsgFreePlay  = MsgEnFreePlay  - msgs_en
 0000  26 00 00 00 ibMsg1Coin2Crd = MsgEn1Coin2Crd - msgs_en
 0000  28 00 00 00 ibMsg1Coin1Crd = MsgEn1Coin1Crd - msgs_en
 0000  2A 00 00 00 ibMsg2Coin1Crd = MsgEn2Coin1Crd - msgs_en
 0000  2C 00 00 00 ibMsgAtari     = MsgEnAtari     - msgs_en
 0000  2E 00 00 00 ibMsgCredits   = MsgEnCredits   - msgs_en
 0000  30 00 00 00 ibMsgBonusSpc  = MsgEnBonusSpc  - msgs_en
 0000  32 00 00 00 ibMsg2CrdMin   = MsgEn2CrdMin   - msgs_en
 0000  34 00 00 00 ibMsgBonusEv   = MsgEnBonusEv   - msgs_en
 0000  36 00 00 00 ibMsgAvoidSpk  = MsgEnAvoidSpk  - msgs_en
 0000  38 00 00 00 ibMsgLevelNS   = MsgEnLevelNS   - msgs_en
 0000  3A 00 00 00 ibMsgRecharge  = MsgEnRecharge  - msgs_en

                   .if !REMOVE_LANGUAGES
 D06D  67 D1       msgs_fr:                .WORD   xposMsgGameOverFr       
                        ; "FIN DE PARTIE"
 D06F  97 D1                               .WORD   xposMsgPlayerFr         
                        ; "JOUEUR "
 D071  97 D1                               .WORD   xposMsgPlayerFr         
                        ; "JOUEUR "
 D073  BD D1                               .WORD   xposMsgStartFr          
                        ; "APPUYEZ SUR START"
 D075  F0 D1                               .WORD   xposMsgPlayFr           
                        ; "JOUEZ"
 D077  17 D2                               .WORD   xPosMsgInitialsFr       
                        ; "SVP ENTREZ VOS INITIALES"
 D079  75 D2                               .WORD   xposMsgSpinKnobFr       
                        ; "TOURNEZ LE BOUTON POUR CHANGER"
 D07B  E0 D2                               .WORD   xposMsgPressFireFr      
                        ; "POUSSEZ FEU QUAND CORRECTE"
 D07D  3F D3                               .WORD   xposMsgHiScoresFr       
                        ; "MEILLEURS SCORES"
 D07F  79 D3                               .WORD   xposMsgRankingFr        
                        ; "PLACEMENT DE 1 A "
 D081  BE D3                               .WORD   xposMsgRateSelfFr       
                        ; "EVALUEZ-VOUS"
 D083  E6 D3                               .WORD   xposMsgNovice           
                        ; "NOVICE"
 D085  FF D3                               .WORD   xposMsgExpert           
                        ; "EXPERT"
 D087  17 D4                               .WORD   xposMsgBonus            
                        ; "BONUS"
 D089  22 D4                               .WORD   xposMsgTimeFr           
                        ; "DUREE"
 D08B  3A D4                               .WORD   xposMsgLevelFr          
                        ; "NIVEAU"
 D08D  51 D4                               .WORD   xposMsgHoleFr           
                        ; "TROU"
 D08F  6D D4                               .WORD   xposMsgInsCoinFr        
                        ; "INTRODUIRE LES PIECES"
 D091  A1 D4                               .WORD   xposMsgFreePlay         
                        ; "FREE PLAY"
 D093  BA D4                               .WORD   xposMsg1Coin2CrdFr      
                        ; "1 PIECE 2 JOUEURS"
 D095  FD D4                               .WORD   xposMsg1Coin1CrdFr      
                        ; "1 PIECE 1 JOUEUR"
 D097  3F D5                               .WORD   xposMsg2Coin1CrdFr      
                        ; "2 PIECES 1 JOUEUR"
 D099  75 D5                               .WORD   xposMsgAtari            
                        ; "(c) MCMLXXX ATARI"
 D09B  85 D5                               .WORD   xposMsgCredits          
                        ; "CREDITS "
 D09D  A1 D5                               .WORD   xposMsgBonusSpc         
                        ; "BONUS "
 D09F  B9 D5                               .WORD   xposMsg2CrdMinFr        
                        ; "2 JEUX MINIMUM"
 D0A1  F6 D5                               .WORD   xposMsgBonusEvFr        
                        ; "BONUS CHAQUE "
 D0A3  29 D6                               .WORD   xposMsgAvoidSpkFr       
                        ; "ATTENTION AUX LANCES"
 D0A5  68 D6                               .WORD   xposMsgLevelNSFr        
                        ; "NIVEAU"
 D0A7  7A D6                               .WORD   xposMsgRecharge         
                        ; "SUPERZAPPER RECHARGE"

 D0A9  75 D1       msgs_de:                .WORD   xposMsgGameOverGer      
                        ; "SPIELENDE"
 D0AB  9F D1                               .WORD   xposMsgPlayerGer        
                        ; "SPIELER "
 D0AD  9F D1                               .WORD   xposMsgPlayerGer        
                        ; "SPIELER "
 D0AF  CF D1                               .WORD   xposMsgStartGer         
                        ; "START DRUECKEN"
 D0B1  F6 D1                               .WORD   xposMsgPlayGer          
                        ; "SPIEL"
 D0B3  30 D2                               .WORD   xPosMsgInitialsGer      
                        ; "GEBEN SIE IHRE INITIALEN EIN"
 D0B5  94 D2                               .WORD   xposMsgSpinKnobGer      
                        ; "KNOPF DREHEN ZUM WECHSELN"
 D0B7  FB D2                               .WORD   xposMsgPressFireGer     
                        ; "FIRE DRUECKEN WENN RICHTIG"
 D0B9  50 D3                               .WORD   xposMsgHiScoresGer      
                        ; "HOECHSTZAHLEN"
 D0BB  8B D3                               .WORD   xposMsgRankingGer       
                        ; "RANGLISTE VON 1 ZUM "
 D0BD  CB D3                               .WORD   xposMsgRateSelfGer      
                        ; "SELBST RECHNEN"
 D0BF  F5 D3                               .WORD   xposMsgNoviceGer        
                        ; "ANFAENGER"
 D0C1  0E D4                               .WORD   xposMsgExpertGer        
                        ; "ERFAHREN"
 D0C3  17 D4                               .WORD   xposMsgBonus            
                        ; "BONUS"
 D0C5  28 D4                               .WORD   xposMsgTimeGer          
                        ; "ZEIT"
 D0C7  41 D4                               .WORD   xposMsgLevelGer         
                        ; "GRAD"
 D0C9  5B D4                               .WORD   xposMsgHoleGer          
                        ; "LOCH"
 D0CB  83 D4                               .WORD   xposMsgInsCoinGer       
                        ; "GELD EINWERFEN"
 D0CD  A1 D4                               .WORD   xposMsgFreePlay         
                        ; "FREE PLAY"
 D0CF  CC D4                               .WORD   xposMsg1Coin2CrdGer     
                        ; "1 MUENZ 2 SPIELE"
 D0D1  0E D5                               .WORD   xposMsg1Coin1CrdGer     
                        ; "1 MUENZE 1 SPIEL"
 D0D3  51 D5                               .WORD   xposMsg2Coin1CrdGer     
                        ; "2 MUENZEN 1 SPIEL"
 D0D5  75 D5                               .WORD   xposMsgAtari            
                        ; "(c) MCMLXXX ATARI"
 D0D7  8E D5                               .WORD   xposMsgCreditsGer       
                        ; "KREDITE "
 D0D9  A1 D5                               .WORD   xposMsgBonusSpc         
                        ; "BONUS "
 D0DB  C8 D5                               .WORD   xposMsg2CrdMinGer       
                        ; "2 SPIELE MINIMUM"
 D0DD  04 D6                               .WORD   xposMsgBonusEvGer       
                        ; "BONUS JEDE "
 D0DF  3E D6                               .WORD   xposMsgAvoidSpkGer      
                        ; "SPITZEN AUSWEICHEN"
 D0E1  6F D6                               .WORD   xposMsgLevelNSGer       
                        ; "GRAD"
 D0E3  8F D6                               .WORD   xposMsgRechargeGer      
                        ; "NEUER SUPERZAPPER"

 D0E5  7F D1       msgs_es:                .WORD   xposMsgGameOverSpn      
                        ; "JUEGO TERMINADO"
 D0E7  A8 D1                               .WORD   xposMsgPlayerSpn        
                        ; "JUGADOR "
 D0E9  A8 D1                               .WORD   xposMsgPlayerSpn        
                        ; "JUGADOR "
 D0EB  DE D1                               .WORD   xposMsgStartSpn         
                        ; "PULSAR START"
 D0ED  FC D1                               .WORD   xposMsgPlaySpn          
                        ; "JUEGUE"
 D0EF  4D D2                               .WORD   xPosMsgInitialsSpn      
                        ; "ENTRE SUS INICIALES"
 D0F1  AE D2                               .WORD   xposMsgSpinKnobSpn      
                        ; "GIRE LA PERILLA PARA CAMBIAR"
 D0F3  16 D3                               .WORD   xposMsgPressFireSpn     
                        ; "OPRIMA FIRE PARA SELECCIONAR"
 D0F5  5E D3                               .WORD   xposMsgHiScoresSpn      
                        ; "RECORDS"
 D0F7  A0 D3                               .WORD   xposMsgRankingSpn       
                        ; "RANKING DE 1 A "
 D0F9  DA D3                               .WORD   xposMsgRateSelfSpn      
                        ; "CALIFIQUESE"
 D0FB  ED D3                               .WORD   xposMsgNoviceSpn        
                        ; "NOVICIO"
 D0FD  06 D4                               .WORD   xposMsgExpertSpn        
                        ; "EXPERTO"
 D0FF  17 D4                               .WORD   xposMsgBonus            
                        ; "BONUS"
 D101  2D D4                               .WORD   xposMsgTimeSpn          
                        ; "TIEMPO"
 D103  46 D4                               .WORD   xposMsgLevelSpn         
                        ; "NIVEL"
 D105  56 D4                               .WORD   xposMsgHoleSpn          
                        ; "HOYO"
 D107  92 D4                               .WORD   xposMsgInsCoinSpn       
                        ; "INSERTE FICHAS"
 D109  A1 D4                               .WORD   xposMsgFreePlay         
                        ; "FREE PLAY"
 D10B  DD D4                               .WORD   xposMsg1Coin2CrdSpn     
                        ; "1 MONEDA 2 JUEGOS"
 D10D  1F D5                               .WORD   xposMsg1Coin1CrdSpn     
                        ; "1 MONEDA 1 JUEGO"
 D10F  63 D5                               .WORD   xposMsg2Coin1CrdSpn     
                        ; "2 MONEDAS 1 JUEGO"
 D111  75 D5                               .WORD   xposMsgAtari            
                        ; "(c) MCMLXXX ATARI"
 D113  97 D5                               .WORD   xposMsgCreditsSpn       
                        ; "CREDITOS "
 D115  A1 D5                               .WORD   xposMsgBonusSpc         
                        ; "BONUS "
 D117  D9 D5                               .WORD   xposMsg2CrdMinSpn       
                        ; "2 JUEGOS MINIMO"
 D119  10 D6                               .WORD   xposMsgBonusEvSpn       
                        ; "BONUS CADA "
 D11B  51 D6                               .WORD   xposMsgAvoidSpkSpn      
                        ; "EVITE LAS PUNTAS"
 D11D  74 D6                               .WORD   xposMsgLevelNSSpn       
                        ; "NIVEL"
 D11F  A1 D6                               .WORD   xposMsgRechargeSpn      
                        ; "NUEVO SUPERZAPPER"
                   .endif

                    ;**** Message Tables
                    ;
                    ; Y-coordinates, colours, and sizes of messages.  
                   X-coordinates vary with
                    ; string length and thus with language; they are 
                   therefore stored with the
                    ; (language-specific) string contents.
                    ; Each message has two bytes here.  The first contains 
                   the message's
                    ; colour in its high nibble, with its size (b value) 
                   in its low nibble.
                    ; The second byte is the Y coordinate (signed).
                    ; See the code at ab14 for more.

 D121  51          aMsgsColorAndYPos:      .BYTE   $51,$56                 
                        ; GAME OVER
 D122  56
 D123  00                                  .BYTE   0,26                    
                        ; PLAYER
 D124  1A
 D125  01                                  .BYTE   1,$20                   
                        ; PLAYER
 D126  20
 D127  31                                  .BYTE   $31,$56                 
                        ; PRESS START
 D128  56
 D129  01                                  .BYTE   1,$38                   
                        ; PLAY
 D12A  38
 D12B  31                                  .BYTE   $31,$B0                 
                        ; ENTER YOUR INITIALS
 D12C  B0
 D12D  41                                  .BYTE   $41,0                   
                        ; SPIN KNOB TO CHANGE
 D12E  00
 D12F  11                                  .BYTE   $11,$F6                 
                        ; PRESS FIRE TO SELECT
 D130  F6
 D131  30                                  .BYTE   $30,$38                 
                        ; HIGH SCORES
 D132  38
 D133  31                                  .BYTE   $31,$CE                 
                        ; RANKING FROM 1 TO
 D134  CE
 D135  51                                  .BYTE   $51,$A                  
                        ; RATE YOURSELF
 D136  0A
 D137  31                                  .BYTE   $31,$E2                 
                        ; NOVICE
 D138  E2
 D139  31                                  .BYTE   $31,$E2                 
                        ; EXPERT
 D13A  E2
 D13B  51                                  .BYTE   $51,$BA                 
                        ; BONUS
 D13C  BA
 D13D  51                                  .BYTE   $51,$98                 
                        ; TIME
 D13E  98
 D13F  51                                  .BYTE   $51,$D8                 
                        ; LEVEL
 D140  D8
 D141  51                                  .BYTE   $51,$C9                 
                        ; HOLE
 D142  C9
 D143  31                                  .BYTE   $31,$56                 
                        ; INSERT COINS
 D144  56
 D145  51                                  .BYTE   $51,$80                 
                        ; FREE PLAY
 D146  80
 D147  51                                  .BYTE   $51,$80                 
                        ; 1 COIN 2 PLAYS
 D148  80
 D149  51                                  .BYTE   $51,$80                 
                        ; 1 COIN 1 PLAY
 D14A  80
 D14B  51                                  .BYTE   $51,$80                 
                        ; 2 COINS 1 PLAY
 D14C  80
 D14D  71                                  .BYTE   $71,$92                 
                        ; (c) MCMLXXX ATARI
 D14E  92
 D14F  51                                  .BYTE   $51,$80                 
                        ; CREDITS
 D150  80
 D151  31                                  .BYTE   $31,$B0                 
                        ; BONUS
 D152  B0
 D153  51                                  .BYTE   $51,$89                 
                        ; 2 CREDIT MINIMUM
 D154  89
 D155  41                                  .BYTE   $41,$89                 
                        ; BONUS EVERY
 D156  89
 D157  00                                  .BYTE   0,0                     
                        ; AVOID SPIKES
 D158  00
 D159  71                                  .BYTE   $71,$5A                 
                        ; LEVEL
 D15A  5A
 D15B  71                                  .BYTE   $71,$A0                 
                        ; SUPERZAPPER RECHARGE
 D15C  A0

                   ; Each string is preceded by the X-coordinate at which 
                   it should be drawn.
                    ; Y-coordinates come from a table at $d122 (they don't 
                   vary with string
                    ; length and hence don't have to be language-specific; 
                   X coordinates do,
                    ; so they are attached to the language-specific 
                   strings).
                    ; See the code at ab14 for more.

                    ;                    "GAME OVER"
 D15D  E5          xposMsgGameOver:    .BYTE $E5                          
 D15E  22          sMsgGameOver:       .BYTE 34,22,46,30,0,50,64,30,184
 D15F  16
 D160  2E
 D161  1E
 D162  00
 D163  32
 D164  40
 D165  1E
 D166  B8

                   .if !REMOVE_LANGUAGES
                    ;                    "FINE DE PARTIE"
 D167  D9          xposMsgGameOverFr:  .BYTE $D9                          
 D168  20          sMsgGameOverFr:     .BYTE 32,38,48,0,28,30,0,52
 D169  26
 D16A  30
 D16B  00
 D16C  1C
 D16D  1E
 D16E  00
 D16F  34
 D170  16                               .BYTE 22,56,60,38,158
 D171  38
 D172  3C
 D173  26
 D174  9E

                    ;                    "SPIELENDE"
 D175  E5          xposMsgGameOverGer: .BYTE $E5                          
 D176  3A          sMsgGameOverGer:    .BYTE 58,52,38,30,44,30,48,28,158
 D177  34
 D178  26
 D179  1E
 D17A  2C
 D17B  1E
 D17C  30
 D17D  1C
 D17E  9E

                    ;                    "JUEGO TERMINADO"
 D17F  D3          xposMsgGameOverSpn: .BYTE $D3                          
 D180  28                              .BYTE 40,62,30,34,50,0,60,30,56
 D181  3E
 D182  1E
 D183  22
 D184  32
 D185  00
 D186  3C
 D187  1E
 D188  38
 D189  2E                               .BYTE 46,38,48,22,28,178
 D18A  26
 D18B  30
 D18C  16
 D18D  1C
 D18E  B2
                   .endif

                    ;                    "PLAYER "
 D18F  CD          xposMsgPlayer:      .BYTE $CD                           
                                                                        
 D190  34          sMsgPlayer:         .BYTE 52,44,22,70,30,56,128
 D191  2C
 D192  16
 D193  46
 D194  1E
 D195  38
 D196  80

                   .if !REMOVE_LANGUAGES
                    ;                    "JOUEUR"
 D197  C6          xposMsgPlayerFr:    .BYTE $C6                          

 D198  28          sMsgPlayerFr:       .BYTE 40,50,62,30,62,56,128
 D199  32
 D19A  3E
 D19B  1E
 D19C  3E
 D19D  38
 D19E  80

                    ;                    "SPIELER"
 D19F  C6          xposMsgPlayerGer:   .BYTE $C6                          

 D1A0  3A          sMsgPlayerGer:      .BYTE 58,52,38,30,44,30,56,128
 D1A1  34
 D1A2  26
 D1A3  1E
 D1A4  2C
 D1A5  1E
 D1A6  38
 D1A7  80

                    ;                    "JUGADOR"
 D1A8  C6          xposMsgPlayerSpn:   .BYTE $C6                          

 D1A9  28          sMsgPlayerSpn:      .BYTE 40,62,34,22,28,50,56,128
 D1AA  3E
 D1AB  22
 D1AC  16
 D1AD  1C
 D1AE  32
 D1AF  38
 D1B0  80
                   .endif

                    ;                    "PRESS START"
 D1B1  DF          xposMsgStart:       .BYTE $DF                          
 D1B2  34          sMsgStart:          .BYTE 52,56,30,58,58,0,58,60,22
 D1B3  38
 D1B4  1E
 D1B5  3A
 D1B6  3A
 D1B7  00
 D1B8  3A
 D1B9  3C
 D1BA  16
 D1BB  38                               .BYTE 56,188
 D1BC  BC

                   .if !REMOVE_LANGUAGES
                    ;                    "APPUYEZ SUR START"
 D1BD  CD          xposMsgStartFr:     .BYTE $CD                          
 D1BE  16          sMsgStartFr:        .BYTE 22,52,52,62,70,30,72,0,58
 D1BF  34
 D1C0  34
 D1C1  3E
 D1C2  46
 D1C3  1E
 D1C4  48
 D1C5  00
 D1C6  3A
 D1C7  3E                               .BYTE 62,56,0,58,60,22,56,188
 D1C8  38
 D1C9  00
 D1CA  3A
 D1CB  3C
 D1CC  16
 D1CD  38
 D1CE  BC

                    ;                    "START DRUECKEN"
 D1CF  D6          xposMsgStartGer:    .BYTE $D6                          
 D1D0  3A          sMsgStartGer:       .BYTE 58,60,22,56,60,0,28,56,62
 D1D1  3C
 D1D2  16
 D1D3  38
 D1D4  3C
 D1D5  00
 D1D6  1C
 D1D7  38
 D1D8  3E
 D1D9  1E                               .BYTE 30,26,42,30,176
 D1DA  1A
 D1DB  2A
 D1DC  1E
 D1DD  B0

                    ;                    "PULSAR START"
 D1DE  DC          xposMsgStartSpn:    .BYTE $DC                          
 D1DF  34          sMsgStartSpn:       .BYTE 52,62,44,58,22,56,0,58,60
 D1E0  3E
 D1E1  2C
 D1E2  3A
 D1E3  16
 D1E4  38
 D1E5  00
 D1E6  3A
 D1E7  3C
 D1E8  16                               .BYTE 22,56,188
 D1E9  38
 D1EA  BC
                   .endif

                    ;                    "PLAY"
 D1EB  F4          xposMsgPlay:        .BYTE $F4                          
 D1EC  34          sMsgPlay:           .BYTE 52,44,22,198
 D1ED  2C
 D1EE  16
 D1EF  C6

                   .if !REMOVE_LANGUAGES
                    ;                    "JOUEZ"
 D1F0  F1          xposMsgPlayFr:      .BYTE $F1 ; �                     
                    
 D1F1  28          sMsgPlayFr:         .BYTE 40,50,62,30,200
 D1F2  32
 D1F3  3E
 D1F4  1E
 D1F5  C8

                    ;                    "SPIEL"
 D1F6  F1          xposMsgPlayGer:     .BYTE $F1                          
 D1F7  3A          sMsgPlayGer:        .BYTE 58,52,38,30,172
 D1F8  34
 D1F9  26
 D1FA  1E
 D1FB  AC

                    ;                    "JUEGUE"
 D1FC  EE          xposMsgPlaySpn:     .BYTE $EE                          
 D1FD  28          sMsgPlaySpn:        .BYTE 40,62,30,34,62,158
 D1FE  3E
 D1FF  1E
 D200  22
 D201  3E
 D202  9E
                   .endif

                    ;                    "ENTER YOUR INITIALS"
 D203  C7          xPosMsgInitials:    .BYTE $C7                          
 D204  1E          sMsgInitials:       .BYTE 30,48,60,30,56,0,70,50,62
 D205  30
 D206  3C
 D207  1E
 D208  38
 D209  00
 D20A  46
 D20B  32
 D20C  3E
 D20D  38                               .BYTE 56,0,38,48,38,60,38,22,44
 D20E  00
 D20F  26
 D210  30
 D211  26
 D212  3C
 D213  26
 D214  16
 D215  2C
 D216  BA                               .BYTE 186
                   .if !REMOVE_LANGUAGES
                    ;                    "SVP ENTREZ VOS INITIALES"
 D217  B8          xPosMsgInitialsFr:  .BYTE $B8                          
 D218  3A          sMsgInitialsFr:     .BYTE 58,64,52,0,30,48,60,56,30
 D219  40
 D21A  34
 D21B  00
 D21C  1E
 D21D  30
 D21E  3C
 D21F  38
 D220  1E
 D221  48                               .BYTE 72,0,64,50,58,0,38,48,38
 D222  00
 D223  40
 D224  32
 D225  3A
 D226  00
 D227  26
 D228  30
 D229  26
 D22A  3C                               .BYTE 60,38,22,44,30,186
 D22B  26
 D22C  16
 D22D  2C
 D22E  1E
 D22F  BA

                    ;                    "GEBEN SIE IHRE INITIALEN EIN"
 D230  AC          xPosMsgInitialsGer: .BYTE $AC                          
 D231  22          sMsgInitialsGer:    .BYTE 34,30,24,30,48,0,58,38,30
 D232  1E
 D233  18
 D234  1E
 D235  30
 D236  00
 D237  3A
 D238  26
 D239  1E
 D23A  00                               .BYTE 0,38,36,56,30,0,38,48,38
 D23B  26
 D23C  24
 D23D  38
 D23E  1E
 D23F  00
 D240  26
 D241  30
 D242  26
 D243  3C                               .BYTE 60,38,22,44,30,48,0,30,38
 D244  26
 D245  16
 D246  2C
 D247  1E
 D248  30
 D249  00
 D24A  1E
 D24B  26
 D24C  B0                               .BYTE 176

                    ;                    "ENTRE SUS INICIALES"
 D24D  C7          xPosMsgInitialsSpn: .BYTE $C7                          
 D24E  1E          sMsgInitialsSpn:    .BYTE 30,48,60,56,30,0,58,62,58
 D24F  30
 D250  3C
 D251  38
 D252  1E
 D253  00
 D254  3A
 D255  3E
 D256  3A
 D257  00                               .BYTE 0,38,48,38,26,38,22,44,30
 D258  26
 D259  30
 D25A  26
 D25B  1A
 D25C  26
 D25D  16
 D25E  2C
 D25F  1E
 D260  BA                               .BYTE 186
                   .endif

                    ;                    "SPIN KNOB TO CHANGE"
 D261  C7          xposMsgSpinKnob:    .BYTE $C7                          
 D262  3A          sMsgSpinKnob:       .BYTE 58,52,38,48,0,42,48,50,24
 D263  34
 D264  26
 D265  30
 D266  00
 D267  2A
 D268  30
 D269  32
 D26A  18
 D26B  00                               .BYTE 0,60,50,0,26,36,22,48,34
 D26C  3C
 D26D  32
 D26E  00
 D26F  1A
 D270  24
 D271  16
 D272  30
 D273  22
 D274  9E                               .BYTE 158

                   .if !REMOVE_LANGUAGES
                    ;                    "TOURNEZ LE BOUTON POUR CHANGER"
 D275  A6          xposMsgSpinKnobFr:  .BYTE $A6                          
 D276  3C          sMsgSpinKnobFr:     .BYTE 60,50,62,56,48,30,72,0,44
 D277  32
 D278  3E
 D279  38
 D27A  30
 D27B  1E
 D27C  48
 D27D  00
 D27E  2C
 D27F  1E                               .BYTE 30,0,24,50,62,60,50,48,0
 D280  00
 D281  18
 D282  32
 D283  3E
 D284  3C
 D285  32
 D286  30
 D287  00
 D288  34                               .BYTE 52,50,62,56,0,26,36,22,48
 D289  32
 D28A  3E
 D28B  38
 D28C  00
 D28D  1A
 D28E  24
 D28F  16
 D290  30
 D291  22                               .BYTE 34,30,184
 D292  1E
 D293  B8

                    ;                    "KNOPF DREHEN ZUM WECHSELN"
 D294  B5          xposMsgSpinKnobGer: .BYTE $B5                          
 D295  2A          sMsgSpinKnobGer:    .BYTE 42,48,50,52,32,0,28,56,30
 D296  30
 D297  32
 D298  34
 D299  20
 D29A  00
 D29B  1C
 D29C  38
 D29D  1E
 D29E  24                               .BYTE 36,30,48,0,72,62,46,0,66
 D29F  1E
 D2A0  30
 D2A1  00
 D2A2  48
 D2A3  3E
 D2A4  2E
 D2A5  00
 D2A6  42
 D2A7  1E                               .BYTE 30,26,36,58,30,44,176
 D2A8  1A
 D2A9  24
 D2AA  3A
 D2AB  1E
 D2AC  2C
 D2AD  B0

                    ;                    "GIRE LA PERILLA PARA CAMBIAR"
 D2AE  AC          xposMsgSpinKnobSpn: .BYTE $AC                          
 D2AF  22          sMsgSpinKnobSpn:    .BYTE 34,38,56,30,0,44,22,0,52
 D2B0  26
 D2B1  38
 D2B2  1E
 D2B3  00
 D2B4  2C
 D2B5  16
 D2B6  00
 D2B7  34
 D2B8  1E                               .BYTE 30,56,38,44,44,22,0,52,22
 D2B9  38
 D2BA  26
 D2BB  2C
 D2BC  2C
 D2BD  16
 D2BE  00
 D2BF  34
 D2C0  16
 D2C1  38                               .BYTE 56,22,0,26,22,46,24,38,22
 D2C2  16
 D2C3  00
 D2C4  1A
 D2C5  16
 D2C6  2E
 D2C7  18
 D2C8  26
 D2C9  16
 D2CA  B8                               .BYTE 184
                   .endif

                    ;                    "PRESS FIRE TO SELECT"
 D2CB  C4          xposMsgPressFire:   .BYTE $C4                          
 D2CC  34          sMsgPressFire:      .BYTE 52,56,30,58,58,0,32,38,56
 D2CD  38
 D2CE  1E
 D2CF  3A
 D2D0  3A
 D2D1  00
 D2D2  20
 D2D3  26
 D2D4  38
 D2D5  1E                               .BYTE 30,0,60,50,0,58,30,44,30
 D2D6  00
 D2D7  3C
 D2D8  32
 D2D9  00
 D2DA  3A
 D2DB  1E
 D2DC  2C
 D2DD  1E
 D2DE  1A                               .BYTE 26,188
 D2DF  BC

                   .if !REMOVE_LANGUAGES
                    ;                    "POUSSEZ FEU QUAND CORRECTE"
 D2E0  B2          xposMsgPressFireFr: .BYTE $B2                          
 D2E1  34          sMsgPressFireFr:    .BYTE 52,50,62,58,58,30,72,0,32
 D2E2  32
 D2E3  3E
 D2E4  3A
 D2E5  3A
 D2E6  1E
 D2E7  48
 D2E8  00
 D2E9  20
 D2EA  1E                               .BYTE 30,62,0,54,62,22,48,28,0
 D2EB  3E
 D2EC  00
 D2ED  36
 D2EE  3E
 D2EF  16
 D2F0  30
 D2F1  1C
 D2F2  00
 D2F3  1A                               .BYTE 26,50,56,56,30,26,60,158
 D2F4  32
 D2F5  38
 D2F6  38
 D2F7  1E
 D2F8  1A
 D2F9  3C
 D2FA  9E

                    ;                    "FIRE DRUECKEN WENN RICHTIG"
 D2FB  B2          xposMsgPressFireGer: .BYTE $B2                          
 D2FC  20          sMsgPressFireGer:   .BYTE 32,38,56,30,0,28,56,62,30
 D2FD  26
 D2FE  38
 D2FF  1E
 D300  00
 D301  1C
 D302  38
 D303  3E
 D304  1E
 D305  1A                               .BYTE 26,42,30,48,0,66,30,48,48
 D306  2A
 D307  1E
 D308  30
 D309  00
 D30A  42
 D30B  1E
 D30C  30
 D30D  30
 D30E  00                               .BYTE 0,56,38,26,36,60,38,162
 D30F  38
 D310  26
 D311  1A
 D312  24
 D313  3C
 D314  26
 D315  A2

                    ;                    "OPRIMA FIRE PARA SELECCIONAR"
 D316  AC          xposMsgPressFireSpn: .BYTE $AC                          
 D317  32          sMsgPressFireSpn:   .BYTE 50,52,56,38,46,22,0,32,38
 D318  34
 D319  38
 D31A  26
 D31B  2E
 D31C  16
 D31D  00
 D31E  20
 D31F  26
 D320  38                               .BYTE 56,30,0,52,22,56,22,0,58
 D321  1E
 D322  00
 D323  34
 D324  16
 D325  38
 D326  16
 D327  00
 D328  3A
 D329  1E                               .BYTE 30,44,30,26,26,38,50,48,22
 D32A  2C
 D32B  1E
 D32C  1A
 D32D  1A
 D32E  26
 D32F  32
 D330  30
 D331  16
 D332  B8                               .BYTE 184
                   .endif

                    ;                    "HIGH SCORES"
 D333  BC          xposMsgHiScores:    .BYTE $BC                          
 D334  24          sMsgHiScores:       .BYTE 36,38,34,36,0,58,26,50,56
 D335  26
 D336  22
 D337  24
 D338  00
 D339  3A
 D33A  1A
 D33B  32
 D33C  38
 D33D  1E                               .BYTE 30,186
 D33E  BA

                   .if !REMOVE_LANGUAGES
                    ;                    "MEILLEURS SCORES"
 D33F  9E          xposMsgHiScoresFr:  .BYTE $9E                          
 D340  2E          sMsgHiScoresFr:     .BYTE 46,30,38,44,44,30,62,56,58
 D341  1E
 D342  26
 D343  2C
 D344  2C
 D345  1E
 D346  3E
 D347  38
 D348  3A
 D349  00                               .BYTE 0,58,26,50,56,30,186
 D34A  3A
 D34B  1A
 D34C  32
 D34D  38
 D34E  1E
 D34F  BA

                    ;                    "HOECHSTZAHLEN"
 D350  B0          xposMsgHiScoresGer: .BYTE $B0                          
 D351  24          sMsgHiScoresGer:    .BYTE 36,50,30,26,36,58,60,72,22
 D352  32
 D353  1E
 D354  1A
 D355  24
 D356  3A
 D357  3C
 D358  48
 D359  16
 D35A  24                               .BYTE 36,44,30,176
 D35B  2C
 D35C  1E
 D35D  B0

                    ;                    "RECORDS"
 D35E  D4          xposMsgHiScoresSpn: .BYTE $D4                          
 D35F  38          sMsgHiScoresSpn:    .BYTE $38,$1E,$1A,$32,$38,$1C,$BA
 D360  1E
 D361  1A
 D362  32
 D363  38
 D364  1C
 D365  BA
                    ;
                   .endif

 D366  C2          xposMsgRanking:     .BYTE $C2                          
 D367  38          sMsgRanking:        .BYTE 56,22,48,42,38,48,34,0,32
 D368  16
 D369  30
 D36A  2A
 D36B  26
 D36C  30
 D36D  22
 D36E  00
 D36F  20
 D370  38                               .BYTE 56,50,46,0,4,0,60,50,128
 D371  32
 D372  2E
 D373  00
 D374  04
 D375  00
 D376  3C
 D377  32
 D378  80

                   .if !REMOVE_LANGUAGES
                    ;                    "PLACEMENT DE 1 A "
 D379  C2          xposMsgRankingFr:   .BYTE $C2                          
 D37A  34          sMsgRankingFr:      .BYTE 52,44,22,26,30,46,30,48,60
 D37B  2C
 D37C  16
 D37D  1A
 D37E  1E
 D37F  2E
 D380  1E
 D381  30
 D382  3C
 D383  00                               .BYTE 0,28,30,0,4,0,22,128
 D384  1C
 D385  1E
 D386  00
 D387  04
 D388  00
 D389  16
 D38A  80

                    ;                    "RANGLISTE VON 1 ZUM "
 D38B  BC          xposMsgRankingGer:  .BYTE $BC                          
 D38C  38          sMsgRankingGer:     .BYTE 56,22,48,34,44,38,58,60,30
 D38D  16
 D38E  30
 D38F  22
 D390  2C
 D391  26
 D392  3A
 D393  3C
 D394  1E
 D395  00                               .BYTE 0,64,50,48,0,4,0,72,62
 D396  40
 D397  32
 D398  30
 D399  00
 D39A  04
 D39B  00
 D39C  48
 D39D  3E
 D39E  2E                               .BYTE 46,128
 D39F  80

                    ;                    "RANKING DE 1 A "
 D3A0  C8          xposMsgRankingSpn:  .BYTE $C8 ; +                      
 D3A1  38          sMsgRankingSpn:     .BYTE 56,22,48,42,38,48,34,0,28
 D3A2  16
 D3A3  30
 D3A4  2A
 D3A5  26
 D3A6  30
 D3A7  22
 D3A8  00
 D3A9  1C
 D3AA  1E                               .BYTE 30,0,4,0,22,128
 D3AB  00
 D3AC  04
 D3AD  00
 D3AE  16
 D3AF  80
                   .endif

                    ;                    "RATE YOURSELF"
 D3B0  D9          xposMsgRateSelf:    .BYTE $D9                          
 D3B1  38          sMsgRateSelf:       .BYTE 56,22,60,30,0,70,50,62,56
 D3B2  16
 D3B3  3C
 D3B4  1E
 D3B5  00
 D3B6  46
 D3B7  32
 D3B8  3E
 D3B9  38
 D3BA  3A                               .BYTE 58,30,44,160
 D3BB  1E
 D3BC  2C
 D3BD  A0

                   .if !REMOVE_LANGUAGES
                    ;                    "EVALUEZ-VOUS"
 D3BE  DC          xposMsgRateSelfFr:  .BYTE $DC                          
 D3BF  1E          sMsgRateSelfFr:     .BYTE 30,64,22,44,62,30,72,76,64
 D3C0  40
 D3C1  16
 D3C2  2C
 D3C3  3E
 D3C4  1E
 D3C5  48
 D3C6  4C
 D3C7  40
 D3C8  32                               .BYTE 50,62,186
 D3C9  3E
 D3CA  BA

                    ;                    "SELBST RECHNEN"
 D3CB  D6          xposMsgRateSelfGer: .BYTE $D6                          
 D3CC  3A          sMsgRateSelfGer:    .BYTE 58,30,44,24,58,60,0,56,30
 D3CD  1E
 D3CE  2C
 D3CF  18
 D3D0  3A
 D3D1  3C
 D3D2  00
 D3D3  38
 D3D4  1E
 D3D5  1A                               .BYTE 26,36,48,30,176
 D3D6  24
 D3D7  30
 D3D8  1E
 D3D9  B0

                    ;                    "CALIFIQUESE"
 D3DA  DF          xposMsgRateSelfSpn: .BYTE $DF                          
 D3DB  1A          sMsgRateSelfSpn:    .BYTE 26,22,44,38,32,38,54,62,30
 D3DC  16
 D3DD  2C
 D3DE  26
 D3DF  20
 D3E0  26
 D3E1  36
 D3E2  3E
 D3E3  1E
 D3E4  3A                               .BYTE 58,158
 D3E5  9E
                   .endif

                    ;                    "NOVICE"
 D3E6  AA          xposMsgNovice:      .BYTE $AA                          
 D3E7  30          sMsgNovice:         .BYTE 48,50,64,38,26,158
 D3E8  32
 D3E9  40
 D3EA  26
 D3EB  1A
 D3EC  9E

                   .if !REMOVE_LANGUAGES
                    ;                    "NOVICIO"
 D3ED  AA          xposMsgNoviceSpn:   .BYTE $AA                          
 D3EE  30          sMsgNoviceSpn:      .BYTE $30,$32,$40,$26,$1A,$26,$B2
 D3EF  32
 D3F0  40
 D3F1  26
 D3F2  1A
 D3F3  26
 D3F4  B2

                    ;                    "ANFAENGER"
 D3F5  AA          xposMsgNoviceGer:   .BYTE $AA                          
 D3F6  16          sMsgNoviceGer:      .BYTE 22,48,32,22,30,48,34,30,184
 D3F7  30
 D3F8  20
 D3F9  16
 D3FA  1E
 D3FB  30
 D3FC  22
 D3FD  1E
 D3FE  B8
                   .endif

                    ;                    "EXPERT"
 D3FF  4A          xposMsgExpert:      .BYTE $4A                           
                                                                         
 D400  1E          sMsgExpert:         .BYTE 30,68,52,30,56,188
 D401  44
 D402  34
 D403  1E
 D404  38
 D405  BC

                   .if !REMOVE_LANGUAGES

                    ;                    "EXPERTO"
 D406  45          xposMsgExpertSpn:   .BYTE $45                          
 D407  1E          sMsgExpertSpn:      .BYTE 30,68,52,30,56,60,178
 D408  44
 D409  34
 D40A  1E
 D40B  38
 D40C  3C
 D40D  B2

                    ;                    "ERFAHREN"
 D40E  40          xposMsgExpertGer:   .BYTE $40                          
 D40F  1E          sMsgExpertGer:      .BYTE 30,56,32,22,36,56,30,176
 D410  38
 D411  20
 D412  16
 D413  24
 D414  38
 D415  1E
 D416  B0
                   .endif

                    ;                    "BONUS"
 D417  8B          xposMsgBonus:       .BYTE $8B                          
 D418  18          sMsgBonus:          .BYTE 24,50,48,62,186
 D419  32
 D41A  30
 D41B  3E
 D41C  BA

                    ;                    "TIME"
 D41D  E8          xposMsgTime:        .BYTE $E8                          
 D41E  3C          sMsgTime:           .BYTE 60,38,46,158
 D41F  26
 D420  2E
 D421  9E

                   .if !REMOVE_LANGUAGES
                    ;                    "DUREE"
 D422  E0          xposMsgTimeFr:      .BYTE $E0                          
 D423  1C          sMsgTimeFr:         .BYTE 28,62,56,30,158
 D424  3E
 D425  38
 D426  1E
 D427  9E

                    ;                    "ZEIT"
 D428  E8          xposMsgTimeGer:     .BYTE $E8                          
 D429  48          sMsgTimeGer:        .BYTE 72,30,38,188
 D42A  1E
 D42B  26
 D42C  BC

                    ;                    "TIEMPO"
 D42D  E4          xposMsgTimeSpn:     .BYTE $E4                          
 D42E  3C          sMsgTimeSpn:        .BYTE 60,38,30,46,52,178
 D42F  26
 D430  1E
 D431  2E
 D432  34
 D433  B2
                   .endif

                    ;                    "LEVEL"
 D434  8B          xposMsgLevel:       .BYTE $8B                          
 D435  2C          sMsgLevel:          .BYTE 44,30,64,30,172
 D436  1E
 D437  40
 D438  1E
 D439  AC

                   .if !REMOVE_LANGUAGES
                    ;                    "NIVEAU"
 D43A  8B          xposMsgLevelFr:     .BYTE $8B                          
 D43B  30          sMsgLevelFr:        .BYTE 48,38,64,30,22,190
 D43C  26
 D43D  40
 D43E  1E
 D43F  16
 D440  BE

                    ;                    "GRAD"
 D441  8B          xposMsgLevelGer:    .BYTE $8B                          
 D442  22          sMsgLevelGer:       .BYTE 34,56,22,156
 D443  38
 D444  16
 D445  9C

                    ;                    "NIVEL"
 D446  8B          xposMsgLevelSpn:    .BYTE $8B                          
 D447  30          sMsgLevelSpn:       .BYTE 48,38,64,30,172
 D448  26
 D449  40
 D44A  1E
 D44B  AC
                   .endif

                    ;                    "HOLE"
 D44C  8B          xposMsgHole:        .BYTE $8B                          
 D44D  24          sMsgHole:           .BYTE 36,50,44,158
 D44E  32
 D44F  2C
 D450  9E

                   .if !REMOVE_LANGUAGES
                    ;                    "TROU"
 D451  8B          xposMsgHoleFr:      .BYTE $8B                          
 D452  3C          sMsgHoleFr:         .BYTE 60,56,50,190
 D453  38
 D454  32
 D455  BE

                    ;                    "HOYO"
 D456  8B          xposMsgHoleSpn:     .BYTE $8B                          
 D457  24          sMsgHoleSpn:        .BYTE 36,50,70,178
 D458  32
 D459  46
 D45A  B2

                    ;                    "LOCH"
 D45B  8B          xposMsgHoleGer:     .BYTE $8B                          
 D45C  2C          sMsgHoleGer:        .BYTE 44,50,26,164
 D45D  32
 D45E  1A
 D45F  A4
                   .endif

                    ;                    "INSERT COINS"
 D460  DC          xposMsgInsCoin:     .BYTE $DC    
                   .if DAVEPL_MSG
                   .else                      
 D461  26          sMsgInsCoin:        .BYTE 38,48,58,30,56,60,0,26,50
 D462  30
 D463  3A
 D464  1E
 D465  38
 D466  3C
 D467  00
 D468  1A
 D469  32
 D46A  26                              .BYTE 38,48,186
 D46B  30
 D46C  BA
                   .endif
                   .if !REMOVE_LANGUAGES
                    ;                    "INTRODUIRE LES PIECES"
 D46D  C1          xposMsgInsCoinFr:   .BYTE $C1                          
 D46E  26          sMsgInsCoinFr:      .BYTE 38,48,60,56,50,28,62,38,56
 D46F  30
 D470  3C
 D471  38
 D472  32
 D473  1C
 D474  3E
 D475  26
 D476  38
 D477  1E                               .BYTE 30,0,44,30,58,0,52,38,30
 D478  00
 D479  2C
 D47A  1E
 D47B  3A
 D47C  00
 D47D  34
 D47E  26
 D47F  1E
 D480  1A                               .BYTE 26,30,186
 D481  1E
 D482  BA

                    ;                    "GELD EINWERFEN"
 D483  D6          xposMsgInsCoinGer:  .BYTE $D6                          
 D484  22          sMsgInsCoinGer:     .BYTE 34,30,44,28,0,30,38,48,66
 D485  1E
 D486  2C
 D487  1C
 D488  00
 D489  1E
 D48A  26
 D48B  30
 D48C  42
 D48D  1E                               .BYTE 30,56,32,30,176
 D48E  38
 D48F  20
 D490  1E
 D491  B0

                    ;                    "INSERT FICHAS"
 D492  D6          xposMsgInsCoinSpn:  .BYTE $D6                          
 D493  26          sMsgInsCoinSpn:     .BYTE 38,48,58,30,56,60,30,0,32
 D494  30
 D495  3A
 D496  1E
 D497  38
 D498  3C
 D499  1E
 D49A  00
 D49B  20
 D49C  26                               .BYTE 38,26,36,22,186
 D49D  1A
 D49E  24
 D49F  16
 D4A0  BA
                   .endif

                    ;                    "FREE PLAY"
 D4A1  00          xposMsgFreePlay:    .BYTE 0                            
 D4A2  20          sMsgFreePlay:       .BYTE 32,56,30,30,00,52,44,22,198
 D4A3  38
 D4A4  1E
 D4A5  1E
 D4A6  00
 D4A7  34
 D4A8  2C
 D4A9  16
 D4AA  C6

                    ;                    "1 COIN 2 PLAYS"
 D4AB  0E          xposMsg1Coin2Crd:   .BYTE $E                           
 D4AC  04          sMsg1Coin2Crd:      .BYTE 4,0,26,50,38,48,0,6,0
 D4AD  00
 D4AE  1A
 D4AF  32
 D4B0  26
 D4B1  30
 D4B2  00
 D4B3  06
 D4B4  00
 D4B5  34                               .BYTE 52,44,22,70,186
 D4B6  2C
 D4B7  16
 D4B8  46
 D4B9  BA

                   .if !REMOVE_LANGUAGES
                    ;                    "1 PIECE 2 JOUEURS"
 D4BA  FA          xposMsg1Coin2CrdFr: .BYTE $FA                          
 D4BB  04          sMsg1Coin2CrdFr:    .BYTE 4,0,52,38,30,26,30,0,6
 D4BC  00
 D4BD  34
 D4BE  26
 D4BF  1E
 D4C0  1A
 D4C1  1E
 D4C2  00
 D4C3  06
 D4C4  00                               .BYTE 0,40,50,62,30,62,56,186
 D4C5  28
 D4C6  32
 D4C7  3E
 D4C8  1E
 D4C9  3E
 D4CA  38
 D4CB  BA

                    ;                    "1 MUENZ 2 SPIELE"
 D4CC  00          xposMsg1Coin2CrdGer: .BYTE 0                            
 D4CD  04          sMsg1Coin2CrdGer:   .BYTE 4,0,46,62,30,48,72,0,6
 D4CE  00
 D4CF  2E
 D4D0  3E
 D4D1  1E
 D4D2  30
 D4D3  48
 D4D4  00
 D4D5  06
 D4D6  00                               .BYTE 0,58,52,38,30,44,158
 D4D7  3A
 D4D8  34
 D4D9  26
 D4DA  1E
 D4DB  2C
 D4DC  9E

                    ;                    "1 MONEDA 2 JUEGOS"
 D4DD  FA          xposMsg1Coin2CrdSpn: .BYTE $FA                          
 D4DE  04          sMsg1Coin2CrdSpn:   .BYTE 4,0,46,50,48,30,28,22,0
 D4DF  00
 D4E0  2E
 D4E1  32
 D4E2  30
 D4E3  1E
 D4E4  1C
 D4E5  16
 D4E6  00
 D4E7  06                               .BYTE 6,0,40,62,30,34,50,186
 D4E8  00
 D4E9  28
 D4EA  3E
 D4EB  1E
 D4EC  22
 D4ED  32
 D4EE  BA
                   .endif

                    ;                    "1 COIN 1 PLAY"
 D4EF  14          xposMsg1Coin1Crd:   .BYTE $14                          
 D4F0  04          sMsg1Coin1Crd:      .BYTE 4,0,26,50,38,48,0,4,0
 D4F1  00
 D4F2  1A
 D4F3  32
 D4F4  26
 D4F5  30
 D4F6  00
 D4F7  04
 D4F8  00
 D4F9  34                               .BYTE 52,44,22,198
 D4FA  2C
 D4FB  16
 D4FC  C6

                   .if !REMOVE_LANGUAGES
                    ;                    "1 PIECE 1 JOUEUR"
 D4FD  00          xposMsg1Coin1CrdFr: .BYTE 0                            
 D4FE  04          sMsg1Coin1CrdFr:    .BYTE 4,0,52,38,30,26,30,0,4
 D4FF  00
 D500  34
 D501  26
 D502  1E
 D503  1A
 D504  1E
 D505  00
 D506  04
 D507  00                               .BYTE 0,40,50,62,30,62,184
 D508  28
 D509  32
 D50A  3E
 D50B  1E
 D50C  3E
 D50D  B8

                    ;                    "1 MUENZE 1 SPIEL"
 D50E  00          xposMsg1Coin1CrdGer: .BYTE 0                            
 D50F  04          sMsg1Coin1CrdGer:   .BYTE 4,0,46,62,30,48,72,30,0
 D510  00
 D511  2E
 D512  3E
 D513  1E
 D514  30
 D515  48
 D516  1E
 D517  00
 D518  04                               .BYTE 4,0,58,52,38,30,172
 D519  00
 D51A  3A
 D51B  34
 D51C  26
 D51D  1E
 D51E  AC

                    ;                    "1 MONEDA 1 JUEGO"
 D51F  00          xposMsg1Coin1CrdSpn: .BYTE 0                            
 D520  04          sMsg1Coin1CrdSpn:   .BYTE 4,0,46,50,48,30,28,22,0
 D521  00
 D522  2E
 D523  32
 D524  30
 D525  1E
 D526  1C
 D527  16
 D528  00
 D529  04                               .BYTE 4,0,40,62,30,34,178
 D52A  00
 D52B  28
 D52C  3E
 D52D  1E
 D52E  22
 D52F  B2
                   .endif

                    ;                    "2 COINS 1 PLAY"
 D530  0E          xposMsg2Coin1Crd:   .BYTE $E                           
 D531  06          sMsg2Coin1Crd:      .BYTE 6,0,26,50,38,48,58,0,4
 D532  00
 D533  1A
 D534  32
 D535  26
 D536  30
 D537  3A
 D538  00
 D539  04
 D53A  00                               .BYTE 0,52,44,22,198
 D53B  34
 D53C  2C
 D53D  16
 D53E  C6

                   .if !REMOVE_LANGUAGES
                    ;                    "2 PIECES 1 JOUEUR"
 D53F  FA          xposMsg2Coin1CrdFr: .BYTE $FA                          
 D540  06          sMsg2Coin1CrdFr:    .BYTE 6,0,52,38,30,26,30,58,0
 D541  00
 D542  34
 D543  26
 D544  1E
 D545  1A
 D546  1E
 D547  3A
 D548  00
 D549  04                               .BYTE 4,0,40,50,62,30,62,184
 D54A  00
 D54B  28
 D54C  32
 D54D  3E
 D54E  1E
 D54F  3E
 D550  B8

                    ;                    "2 MUENZEN 1 SPIEL"
 D551  FA          xposMsg2Coin1CrdGer: .BYTE $FA                          
 D552  06          sMsg2Coin1CrdGer:   .BYTE 6,0,46,62,30,48,72,30,48
 D553  00
 D554  2E
 D555  3E
 D556  1E
 D557  30
 D558  48
 D559  1E
 D55A  30
 D55B  00                               .BYTE 0,4,0,58,52,38,30,172
 D55C  04
 D55D  00
 D55E  3A
 D55F  34
 D560  26
 D561  1E
 D562  AC

                    ;                    "2 MONEDA 1 JUEGO"
 D563  FA          xposMsg2Coin1CrdSpn: .BYTE $FA                          
 D564  06          sMsg2Coin1CrdSpn:   .BYTE 6,0,46,50,48,30,28,22,58
 D565  00
 D566  2E
 D567  32
 D568  30
 D569  1E
 D56A  1C
 D56B  16
 D56C  3A
 D56D  00                               .BYTE 0,4,0,40,62,30,34,178
 D56E  04
 D56F  00
 D570  28
 D571  3E
 D572  1E
 D573  22
 D574  B2
                   .endif

                    ;                    "(c) MCMLXXX ATARI"
 D575  D3          xposMsgAtari:       .BYTE $D3                          
 D576  50          sMsgAtari:          .BYTE 80,0,46,26,46,44,68,68,68
 D577  00
 D578  2E
 D579  1A
 D57A  2E
 D57B  2C
 D57C  44
 D57D  44
 D57E  44
 D57F  00                               .BYTE 0,22,60,22,56,166
 D580  16
 D581  3C
 D582  16
 D583  38
 D584  A6

                    ;                    "CREDITS "
 D585  A0          xposMsgCredits:     .BYTE $A0                          
 D586  1A          sMsgCredits:        .BYTE 26,56,30,28,38,60,58,128
 D587  38
 D588  1E
 D589  1C
 D58A  26
 D58B  3C
 D58C  3A
 D58D  80

                   .if !REMOVE_LANGUAGES
                    ;                    "KREDITE "
 D58E  A0          xposMsgCreditsGer:  .BYTE $A0                          
 D58F  2A          sMsgCreditsGer:     .BYTE 42,56,30,28,38,60,30,128
 D590  38
 D591  1E
 D592  1C
 D593  26
 D594  3C
 D595  1E
 D596  80

                    ;                    "CREDITOS "
 D597  A0          xposMsgCreditsSpn:  .BYTE $A0                          
 D598  1A          sMsgCreditsSpn:     .BYTE 26,56,30,28,38,60,50,58,128
 D599  38
 D59A  1E
 D59B  1C
 D59C  26
 D59D  3C
 D59E  32
 D59F  3A
 D5A0  80
                   .endif

                    ;                    "BONUS "
 D5A1  DA          xposMsgBonusSpc:    .BYTE $DA                           
                                                                          
 D5A2  18          sMsgBonusSpc:       .BYTE 24,50,48,62,58,128
 D5A3  32
 D5A4  30
 D5A5  3E
 D5A6  3A
 D5A7  80

                    ;                    "2 CREDIT MINIMUM"
 D5A8  D0          xposMsg2CrdMin:     .BYTE $D0                          
 D5A9  06          sMsg2CrdMin:        .BYTE 6,0,26,56,30,28,38,60,0
 D5AA  00
 D5AB  1A
 D5AC  38
 D5AD  1E
 D5AE  1C
 D5AF  26
 D5B0  3C
 D5B1  00
 D5B2  2E                               .BYTE 46,38,48,38,46,62,174
 D5B3  26
 D5B4  30
 D5B5  26
 D5B6  2E
 D5B7  3E
 D5B8  AE

                   .if !REMOVE_LANGUAGES
                    ;                    "2 JEUX MINIMUM"
 D5B9  D6          xposMsg2CrdMinFr:   .BYTE $D6                          
 D5BA  06          sMsg2CrdMinFr:      .BYTE 6,0,40,30,62,68,0,46,38
 D5BB  00
 D5BC  28
 D5BD  1E
 D5BE  3E
 D5BF  44
 D5C0  00
 D5C1  2E
 D5C2  26
 D5C3  30                               .BYTE 48,38,46,62,174
 D5C4  26
 D5C5  2E
 D5C6  3E
 D5C7  AE

                    ;                    "2 SPIELE MINIMUM"
 D5C8  D0          xposMsg2CrdMinGer:  .BYTE $D0                          
 D5C9  06          sMsg2CrdMinGer:     .BYTE 6,0,58,52,38,30,44,30,0
 D5CA  00
 D5CB  3A
 D5CC  34
 D5CD  26
 D5CE  1E
 D5CF  2C
 D5D0  1E
 D5D1  00
 D5D2  2E                               .BYTE 46,38,48,38,46,62,174
 D5D3  26
 D5D4  30
 D5D5  26
 D5D6  2E
 D5D7  3E
 D5D8  AE

                    ;                    "2 JUEGOS MINIMO"
 D5D9  D3          xposMsg2CrdMinSpn:  .BYTE $D3                          
 D5DA  06          sMsg2CrdMinSpn:     .BYTE 6,0,40,62,30,34,50,58,0
 D5DB  00
 D5DC  28
 D5DD  3E
 D5DE  1E
 D5DF  22
 D5E0  32
 D5E1  3A
 D5E2  00
 D5E3  2E                               .BYTE 46,38,48,38,46,178
 D5E4  26
 D5E5  30
 D5E6  26
 D5E7  2E
 D5E8  B2
                   .endif

                    ;                    "BONUS EVERY "
 D5E9  C8          xposMsgBonusEv:     .BYTE $C8                          
 D5EA  18          sMsgBonusEv:        .BYTE 24,50,48,62,58,0,30,64,30
 D5EB  32
 D5EC  30
 D5ED  3E
 D5EE  3A
 D5EF  00
 D5F0  1E
 D5F1  40
 D5F2  1E
 D5F3  38                               .BYTE 56,70,128
 D5F4  46
 D5F5  80

                   .if !REMOVE_LANGUAGES
                    ;                    "BONUS CHAQUE"
 D5F6  CE          xposMsgBonusEvFr:   .BYTE $CE                          
 D5F7  18          sMsgBonusEvFr:      .BYTE 24,50,48,62,58,0,26,36,22
 D5F8  32
 D5F9  30
 D5FA  3E
 D5FB  3A
 D5FC  00
 D5FD  1A
 D5FE  24
 D5FF  16
 D600  36                               .BYTE 54,62,30,128
 D601  3E
 D602  1E
 D603  80

                    ;                    "BONUS JEDE "
 D604  CE          xposMsgBonusEvGer:  .BYTE $CE                          
 D605  18          sMsgBonusEvGer:     .BYTE 24,50,48,62,58,0,40,30,28
 D606  32
 D607  30
 D608  3E
 D609  3A
 D60A  00
 D60B  28
 D60C  1E
 D60D  1C
 D60E  1E                               .BYTE 30,128
 D60F  80

                    ;                    "BONUS CADA "
 D610  C8          xposMsgBonusEvSpn:  .BYTE $C8                          
 D611  18          sMsgBonusEvSpn:     .BYTE 24,50,48,62,58,0,26,22,28
 D612  32
 D613  30
 D614  3E
 D615  3A
 D616  00
 D617  1A
 D618  16
 D619  1C
 D61A  16                               .BYTE 22,128
 D61B  80
                   .endif

                    ;                    "AVOID SPIKES"
 D61C  B8          xposMsgAvoidSpk:    .BYTE $B8                          
 D61D  16          sMsgAvoidSpk:       .BYTE 22,64,50,38,28,0,58,52,38
 D61E  40
 D61F  32
 D620  26
 D621  1C
 D622  00
 D623  3A
 D624  34
 D625  26
 D626  2A                               .BYTE 42,30,186
 D627  1E
 D628  BA

                   .if !REMOVE_LANGUAGES
                    ;                    "ATTENTION AUX LANCES"
 D629  88          xposMsgAvoidSpkFr:  .BYTE $88                          
 D62A  16          sMsgAvoidSpkFr:     .BYTE 22,60,60,30,48,60,38,50,48
 D62B  3C
 D62C  3C
 D62D  1E
 D62E  30
 D62F  3C
 D630  26
 D631  32
 D632  30
 D633  00                               .BYTE 0,22,62,68,0,44,22,48,26
 D634  16
 D635  3E
 D636  44
 D637  00
 D638  2C
 D639  16
 D63A  30
 D63B  1A
 D63C  1E                               .BYTE 30,186
 D63D  BA

                    ;                    "SPITZEN AUSWEICHEN"
 D63E  96          xposMsgAvoidSpkGer: .BYTE $96                          
 D63F  3A          sMsgAvoidSpkGer:    .BYTE 58,52,38,60,72,30,48,0,22
 D640  34
 D641  26
 D642  3C
 D643  48
 D644  1E
 D645  30
 D646  00
 D647  16
 D648  3E                               .BYTE 62,58,66,30,38,26,36,30,176
 D649  3A
 D64A  42
 D64B  1E
 D64C  26
 D64D  1A
 D64E  24
 D64F  1E
 D650  B0

                    ;                    "EVITA LAS PUNTAS"
 D651  A0          xposMsgAvoidSpkSpn: .BYTE $A0                          
 D652  1E          sMsgAvoidSpkSpn:    .BYTE 30,64,38,60,30,0,44,22,58
 D653  40
 D654  26
 D655  3C
 D656  1E
 D657  00
 D658  2C
 D659  16
 D65A  3A
 D65B  00                               .BYTE 0,52,62,48,60,22,186
 D65C  34
 D65D  3E
 D65E  30
 D65F  3C
 D660  16
 D661  BA
                   .endif


                    ;                    "LEVEL"
 D662  E0          xposMsgLevelNS:     .BYTE $E0                          
 D663  2C          sMsgLevelNS:        .BYTE 44,30,64,30,172
 D664  1E
 D665  40
 D666  1E
 D667  AC

                   .if !REMOVE_LANGUAGES
                    ;                    "NIVEAU"
 D668  DA          xposMsgLevelNSFr:   .BYTE $DA                          
 D669  30          sMsgLevelNSFr:      .BYTE 48,38,64,30,22,190
 D66A  26
 D66B  40
 D66C  1E
 D66D  16
 D66E  BE

                    ;                    "GRAD"
 D66F  E2          xposMsgLevelNSGer:  .BYTE $E2                          
 D670  22          sMsgLevelNSGer:     .BYTE 34,56,22,156
 D671  38
 D672  16
 D673  9C

                    ;                    "NIVEL"
 D674  E0          xposMsgLevelNSSpn:  .BYTE $E0                          
 D675  30          sMsgLevelNSSpn:     .BYTE 48,38,64,30,172
 D676  26
 D677  40
 D678  1E
 D679  AC
                   .endif

                    ;                    "SUPERZAPPER RECHARGE"
 D67A  C4          xposMsgRecharge:    .BYTE $C4                          
 D67B  3A          sMsgRecharge:       .BYTE 58,62,52,30,56,72,22,52,52
 D67C  3E
 D67D  34
 D67E  1E
 D67F  38
 D680  48
 D681  16
 D682  34
 D683  34
 D684  1E                               .BYTE 30,56,0,56,30,26,36,22,56
 D685  38
 D686  00
 D687  38
 D688  1E
 D689  1A
 D68A  24
 D68B  16
 D68C  38
 D68D  22                               .BYTE 34,158
 D68E  9E

                   .if !REMOVE_LANGUAGES
                    ;                    "NEUER SUPERZAPPER"
 D68F  CD          xposMsgRechargeGer: .BYTE $CD                          
 D690  30          sMsgRechargeGer:    .BYTE 48,30,62,30,56,0,58,62,52
 D691  1E
 D692  3E
 D693  1E
 D694  38
 D695  00
 D696  3A
 D697  3E
 D698  34
 D699  1E                               .BYTE 30,56,72,22,52,52,30,184
 D69A  38
 D69B  48
 D69C  16
 D69D  34
 D69E  34
 D69F  1E
 D6A0  B8

                    ;                    "NEUVO SUPERZAPPER"
 D6A1  CD          xposMsgRechargeSpn: .BYTE $CD                          
 D6A2  30          sMsgRechargeSpn:    .BYTE 48,62,30,64,50,0,58,62,52
 D6A3  3E
 D6A4  1E
 D6A5  40
 D6A6  32
 D6A7  00
 D6A8  3A
 D6A9  3E
 D6AA  34
 D6AB  1E                               .BYTE 30,56,72,22,52,52,30,184
 D6AC  38
 D6AD  48
 D6AE  16
 D6AF  34
 D6B0  34
 D6B1  1E
 D6B2  B8
                   .endif

 D6B3  31 D0       language_base_tbl:      .word   msgs_en
                   .if !REMOVE_LANGUAGES
 D6B5  6D D0                               .word   msgs_fr
 D6B7  A9 D0                               .word   msgs_de
 D6B9  E5 D0                               .word   msgs_es
                   .else
                   .endif        
                   ; Updates optsw2_shadow, coinage_shadow, 
                   bonus_life_each, init_lives, and
                   ; diff_bits, from the hardware.

 D6BB  AD          read_optsws:            lda     optsw2
 D6BC  00 0E
 D6BE  85                                  sta     optsw2_shadow
 D6BF  0A
 D6C0  29                                  and     #$38 ; bonus life 
                   setting
 D6C1  38
 D6C2  4A                                  lsr     a
 D6C3  4A                                  lsr     a
 D6C4  4A                                  lsr     a
 D6C5  AA                                  tax
 D6C6  BD                                  lda     bonus_pts_tbl,x
 D6C7  F7 D6
 D6C9  8D                                  sta     bonus_life_each
 D6CA  56 01
 D6CC  AD                                  lda     optsw1
 D6CD  00 0D
 D6CF  49                                  eor     #$02 ; one of the 
                   coinage bits
 D6D0  02
 D6D1  85                                  sta     coinage_shadow
 D6D2  09
 D6D3  A5                                  lda     optsw2_shadow
 D6D4  0A
 D6D5  2A                                  rol     a
 D6D6  2A                                  rol     a
 D6D7  2A                                  rol     a
 D6D8  29                                  and     #$03 ; lives
 D6D9  03
 D6DA  AA                                  tax
 D6DB  BD                                  lda     init_lives_tbl,x
 D6DC  FF D6
 D6DE  8D                                  sta     init_lives
 D6DF  58 01
 D6E1  A5                                  lda     optsw2_shadow
 D6E2  0A
 D6E3  29                                  and     #$06 ; language
 D6E4  06
 D6E5  A8                                  tay
 D6E6  B9                                  lda     language_base_tbl,y
 D6E7  B3 D6
 D6E9  85                                  sta     strtbl
 D6EA  AC
 D6EB  B9                                  lda     language_base_tbl+1,y
 D6EC  B4 D6
 D6EE  85                                  sta     strtbl+1
 D6EF  AD
 D6F0  20                                  jsr     get_diff_bits
 D6F1  E0 DB
 D6F3  8D                                  sta     diff_bits
 D6F4  6A 01
 D6F6  60                                  rts

                   ; Table mapping bonus life setting values to tens of 
                   thousands of points

 D6F7  02          bonus_pts_tbl:          .BYTE 2,1,3,4,5,6,7,0
 D6F8  01
 D6F9  03
 D6FA  04
 D6FB  05
 D6FC  06
 D6FD  07
 D6FE  00

                   ; Table mapping initial lives setting values to initial 
                   lives

 D6FF  03          init_lives_tbl:         .BYTE 3,4,5,2
 D700  04
 D701  05
 D702  02

 D703  7C                                  .byte $7c

 D704  48          nmi_irq_brk:            pha
 D705  8A                                  txa
 D706  48                                  pha
 D707  98                                  tya
 D708  48                                  pha
 D709  D8                                  cld
 D70A  BA                                  tsx
 D70B  E0                                  cpx     #$d0
 D70C  D0
 D70D  90                                  bcc     locd713
 D70E  04
  [ =D713 ]
 D70F  A5                                  lda     $53
 D710  53
 D711  10                                  bpl     locd717
 D712  04
  [ =D717 ]

 D713  00          locd713:                brk

 D714  4C                                  jmp     reset
 D715  3F D9
 D717  8D          locd717:                sta     watchdog
 D718  00 50
 D71A  8D                                  sta     $60cb ; pokey 1 potgo
 D71B  CB 60
 D71D  AD                                  lda     spinner_cabtyp
 D71E  C8 60
 D720  49                                  eor     #$0f
 D721  0F
 D722  A8                                  tay
 D723  29                                  and     #$10 ; upright/cocktail 
                   bit
 D724  10
 D725  8D                                  sta     flagbits
 D726  17 01
 D728  98                                  tya
 D729  38                                  sec
 D72A  E5                                  sbc     $52
 D72B  52
 D72C  29                                  and     #$0f
 D72D  0F
 D72E  C9                                  cmp     #$08
 D72F  08
 D730  90                                  bcc     locd734
 D731  02
  [ =D734 ]
 D732  09                                  ora     #$f0
 D733  F0
 D734  18          locd734:                clc
 D735  65                                  adc     $50
 D736  50
 D737  85                                  sta     $50
 D738  50
 D739  84                                  sty     $52
 D73A  52
 D73B  8D                                  sta     $60db ; pokey 2 potgo
 D73C  DB 60
 D73E  AC                                  ldy     zap_fire_starts
 D73F  D8 60
 D741  AD                                  lda     cabsw
 D742  00 0C
 D744  85                                  sta     zap_fire_shadow
 D745  08
 D746  A5                                  lda     zap_fire_tmp1
 D747  4C
 D748  84                                  sty     zap_fire_tmp1
 D749  4C
 D74A  A8                                  tay
 D74B  25                                  and     zap_fire_tmp1
 D74C  4C
 D74D  05                                  ora     zap_fire_debounce
 D74E  4D
 D74F  85                                  sta     zap_fire_debounce
 D750  4D
 D751  98                                  tya
 D752  05                                  ora     zap_fire_tmp1
 D753  4C
 D754  25                                  and     zap_fire_debounce
 D755  4D
 D756  85                                  sta     zap_fire_debounce
 D757  4D
 D758  A8                                  tay
 D759  45                                  eor     zap_fire_tmp2
 D75A  4F
 D75B  25                                  and     zap_fire_debounce
 D75C  4D
 D75D  05                                  ora     zap_fire_new
 D75E  4E
 D75F  85                                  sta     zap_fire_new
 D760  4E
 D761  84                                  sty     zap_fire_tmp2
 D762  4F
 D763  A5                                  lda     $b4
 D764  B4
 D765  A4                                  ldy     $13
 D766  13
 D767  10                                  bpl     locd76b
 D768  02
  [ =D76B ]
 D769  09                                  ora     #$04
 D76A  04
 D76B  A4          locd76b:                ldy     $14
 D76C  14
 D76D  10                                  bpl     locd771
 D76E  02
  [ =D771 ]
 D76F  09                                  ora     #$02
 D770  02
 D771  A4          locd771:                ldy     $15
 D772  15
 D773  10                                  bpl     locd777
 D774  02
  [ =D777 ]
 D775  09                                  ora     #$01
 D776  01
 D777  8D          locd777:                sta     vid_coins
 D778  00 40
 D77A  A6                                  ldx     twoplayer
 D77B  3E
 D77C  E8                                  inx
 D77D  A4                                  ldy     game_mode
 D77E  05
 D77F  D0                                  bne     locd791
 D780  10
  [ =D791 ]
 D781  A2                                  ldx     #$00
 D782  00
 D783  A4                                  ldy     $07
 D784  07
 D785  C0                                  cpy     #$40
 D786  40
 D787  90                                  bcc     locd791
 D788  08
  [ =D791 ]
 D789  A6                                  ldx     credits
 D78A  06
 D78B  E0                                  cpx     #$02
 D78C  02
 D78D  90                                  bcc     locd791
 D78E  02
  [ =D791 ]
 D78F  A2                                  ldx     #$03
 D790  03
 D791  BD          locd791:                lda     locd7dd,x
 D792  DD D7
 D794  45                                  eor     $a1
 D795  A1
 D796  29                                  and     #$03
 D797  03
 D798  45                                  eor     $a1
 D799  A1
 D79A  85                                  sta     $a1
 D79B  A1
 D79C  8D                                  sta     leds_flip
 D79D  E0 60
 D79F  20                                  jsr     loccf24
 D7A0  24 CF
 D7A2  20                                  jsr     loccd0a
 D7A3  0A CD
 D7A5  E6                                  inc     $53
 D7A6  53
 D7A7  E6                                  inc     $07
 D7A8  07
 D7A9  D0                                  bne     locd7c9
 D7AA  1E
  [ =D7C9 ]
 D7AB  EE                                  inc     on_time_l
 D7AC  06 04
 D7AE  D0                                  bne     locd7b8
 D7AF  08
  [ =D7B8 ]
 D7B0  EE                                  inc     on_time_m
 D7B1  07 04
 D7B3  D0                                  bne     locd7b8
 D7B4  03
  [ =D7B8 ]
 D7B5  EE                                  inc     on_time_h
 D7B6  08 04
 D7B8  24          locd7b8:                bit     game_mode
 D7B9  05
 D7BA  50                                  bvc     locd7c9
 D7BB  0D
  [ =D7C9 ]
 D7BC  EE                                  inc     play_time_l
 D7BD  09 04
 D7BF  D0                                  bne     locd7c9
 D7C0  08
  [ =D7C9 ]
 D7C1  EE                                  inc     play_time_m
 D7C2  0A 04
 D7C4  D0                                  bne     locd7c9
 D7C5  03
  [ =D7C9 ]
 D7C6  EE                                  inc     play_time_h
 D7C7  0B 04
 D7C9  2C          locd7c9:                bit     cabsw
 D7CA  00 0C
 D7CC  50                                  bvc     locd7d7
 D7CD  09
  [ =D7D7 ]
 D7CE  EE                                  inc     $0133
 D7CF  33 01
 D7D1  8D                                  sta     vg_reset
 D7D2  00 58
 D7D4  8D                                  sta     vg_go
 D7D5  00 48
 D7D7  68          locd7d7:                pla
 D7D8  A8                                  tay
 D7D9  68                                  pla
 D7DA  AA                                  tax
 D7DB  68                                  pla
 D7DC  40                                  rti

 D7DD  FF          locd7dd:                .byte   $ff
 D7DE  FD                                  .byte   $fd
 D7DF  FE                                  .byte   $fe
 D7E0  FC                                  .byte   $fc

                   ; Non-selftest service display

 D7E1  A9          State_ServiceDisplay:   lda     #$00
 D7E2  00
 D7E3  85                                  sta     game_mode
 D7E4  05
 D7E5  A9                                  lda     #$02
 D7E6  02
 D7E7  85                                  sta     unknown_state
 D7E8  01
 D7E9  AD                                  lda     earom_op
 D7EA  CA 01
 D7EC  D0                                  bne     locd803
 D7ED  15
  [ =D803 ]
 D7EE  AD                                  lda     cabsw
 D7EF  00 0C
 D7F1  29                                  and     #$10 ; service switch
 D7F2  10
 D7F3  F0                                  beq     locd803
 D7F4  0E
  [ =D803 ]
 D7F5  A9                                  lda     #GS_GameStartup
 D7F6  00
 D7F7  85                                  sta     gamestate
 D7F8  00
 D7F9  AD                                  lda     hs_initflag
 D7FA  C9 01
 D7FC  29                                  and     #$03
 D7FD  03
 D7FE  F0                                  beq     locd803
 D7FF  03
  [ =D803 ]
 D800  20                                  jsr     init_hs
 D801  AC AB
 D803  60          locd803:                rts
 D804  20          locd804:                jsr     read_optsws
 D805  BB D6
 D807  20                                  jsr     show_coin_stuff
 D808  A8 AA
 D80A  20                                  jsr     vapp_test_i3
 D80B  0D DD
 D80D  20                                  jsr     vapp_stats
 D80E  41 DD
 D810  AD                                  lda     init_lives
 D811  58 01
 D813  85                                  sta     $37
 D814  37
 D815  20                                  jsr     vapp_vcentre_2
 D816  53 DF
 D818  A9                                  lda     #$e8 ; -24
 D819  E8
 D81A  A2                                  ldx     #$c0 ; -64
 D81B  C0
 D81C  20                                  jsr     vapp_ldraw_A_X
 D81D  75 DF

 0000  6C 32 00 00                         ST_VECTOR_PLAYER = $326c        
                       ; $326c = player nominal picture

 D81F  A9          locd81f:                lda     #>ST_VECTOR_PLAYER
 D820  32
 D821  A2                                  ldx     #<ST_VECTOR_PLAYER
 D822  6C
 D823  20                                  jsr     vapp_vjsr_AX
 D824  39 DF
 D826  C6                                  dec     $37
 D827  37
 D828  D0                                  bne     locd81f
 D829  F5
  [ =D81F ]
 D82A  AD                                  lda     diff_bits
 D82B  6A 01
 D82D  29                                  and     #$03 ; difficulty
 D82E  03
 D82F  0A                                  asl     a
 D830  A8                                  tay
 D831  B9                                  lda     diff_str_tbl+1,y
 D832  1F 3F
 D834  BE                                  ldx     diff_str_tbl,y
 D835  1E 3F
 D837  20                                  jsr     vapp_vjsr_AX
 D838  39 DF
 D83A  AD                                  lda     player_seg
 D83B  00 02
 D83D  20                                  jsr     track_spinner
 D83E  CE AD
 D840  8D                                  sta     player_seg
 D841  00 02
 D843  29                                  and     #$06
 D844  06
 D845  48                                  pha
 D846  A8                                  tay
 D847  B9                                  lda     test_magic_tbl+1,y
 D848  17 3F
 D84A  BE                                  ldx     test_magic_tbl,y
 D84B  16 3F
 D84D  20                                  jsr     vapp_vjsr_AX
 D84E  39 DF
 D850  68                                  pla
 D851  4A                                  lsr     a
 D852  AA                                  tax
 D853  A5                                  lda     zap_fire_debounce
 D854  4D
 D855  3D                                  and     test_magic_bits,x
 D856  B6 D8
 D858  DD                                  cmp     test_magic_bits,x
 D859  B6 D8
 D85B  D0                                  bne     locd877
 D85C  1A
  [ =D877 ]
 D85D  CA                                  dex
 D85E  CA                                  dex
 D85F  10                                  bpl     locd864
 D860  03
  [ =D864 ]

                   ; 0, 1: fire&zap -> reset (enter selftest, since test 
                   switch is on)

 D861  4C                                  jmp     reset
 D862  3F D9
 D864  D0          locd864:                bne     locd86c
 D865  06
  [ =D86C ]

                   ; 2:    fire&start1 -> zero times

 D866  20                                  jsr     zero_times
 D867  E9 DD
 D869  B8                                  clv
 D86A  50                                  bvc     locd877
 D86B  0B
  [ =D877 ]

                   ; 3:    fire&start2 -> zero scores

 D86C  20          locd86c:                jsr     zero_scores
 D86D  ED DD
 D86F  AD                                  lda     hs_initflag
 D870  C9 01
 D872  09                                  ora     #$03
 D873  03
 D874  8D                                  sta     hs_initflag
 D875  C9 01

                   ; Common code, after magic button sequence handling done

 D877  AD          locd877:                lda     earom_op
 D878  CA 01
 D87A  2D                                  and     earom_clr
 D87B  C6 01
 D87D  F0                                  beq     locd886
 D87E  07
  [ =D886 ]

                   ; 346e = draw ERASING

 0000  6E 34 00 00                         ST_VECTOR_ERASING .equ $346E

 D87F  A9                                  lda     #>ST_VECTOR_ERASING
 D880  34
 D881  A2                                  ldx     #<ST_VECTOR_ERASING
 D882  6E

 D883  20                                  jsr     vapp_vjsr_AX
 D884  39 DF
 D886  20          locd886:                jsr     vapp_vcentre_2
 D887  53 DF
 D889  A5                                  lda     coinage_shadow
 D88A  09
 D88B  29                                  and     #$1c ; coin-slot 
                   multiplier bits
 D88C  1C
 D88D  4A                                  lsr     a
 D88E  4A                                  lsr     a
 D88F  AA                                  tax
 D890  BD                                  lda     locd8ba,x
 D891  BA D8
 D893  A0                                  ldy     #$ee ; -18
 D894  EE
 D895  A2                                  ldx     #$1b ; 27
 D896  1B
 D897  20                                  jsr     vapp_ldraw_Y_X_2dig_A
 D898  A9 D8
 D89A  A5                                  lda     coinage_shadow
 D89B  09
 D89C  4A                                  lsr     a ; extract bonus-coins 
                   bits
 D89D  4A                                  lsr     a
 D89E  4A                                  lsr     a
 D89F  4A                                  lsr     a
 D8A0  4A                                  lsr     a
 D8A1  AA                                  tax
 D8A2  BD                                  lda     locd8c2,x
 D8A3  C2 D8
 D8A5  A0                                  ldy     #$32 ; x offset 50
 D8A6  32
 D8A7  A2                                  ldx     #$f8 ; y offset -8
 D8A8  F8

                   ; Append an ldraw per Y,X, then append A as a two-digit 
                   hex number.

 D8A9  85          vapp_ldraw_Y_X_2dig_A:  sta     $29
 D8AA  29
 D8AB  98                                  tya
 D8AC  20                                  jsr     vapp_ldraw_A_X
 D8AD  75 DF
 D8AF  A9                                  lda     #$29
 D8B0  29
 D8B1  A0                                  ldy     #$01
 D8B2  01
 D8B3  4C                                  jmp     vapp_multdig_y_a
 D8B4  B1 DF

                   ; Magic button combinations for when test-mode switch 
                   is turned on live.
                   ; 08 = zap, 10 = fire, 20 = start 1, 40 = start 2

 D8B6  18          test_magic_bits:        .byte   $18         ; fire&zap: 
                      selftest
 D8B7  18                                  .byte   $18         ; fire&zap: 
                      selftest
 D8B8  30                                  .byte   $30         ; 
                   fire&start1: zero times
 D8B9  50                                  .byte   $50         ; 
                   fire&start2: zero scores

                   ; Coin-slot multiplier display values, two-digit BCD.  
                   Indexed by the
                   ; coin-slot multiplier bits in coinage_shadow.  These 
                   do not actually
                   ; affect the multipliers used; they are used only for 
                   test mode display.

 D8BA  11          locd8ba:                .byte   $11
 D8BB  14                                  .byte   $14
 D8BC  15                                  .byte   $15
 D8BD  16                                  .byte   $16
 D8BE  21                                  .byte   $21
 D8BF  24                                  .byte   $24
 D8C0  25                                  .byte   $25
 D8C1  26                                  .byte   $26

                   ; "BONUS ADDER" values - extra credits for multiple 
                   coins.  Indexed by
                   ; the bonus-coin bits in coinage_shadow.  These do not 
                   actually affect
                   ; bonus coins awarded; they are used only for test mode 
                   display.

 D8C2  00          locd8c2:                .byte   $00
 D8C3  12                                  .byte   $12
 D8C4  14                                  .byte   $14
 D8C5  24                                  .byte   $24
 D8C6  15                                  .byte   $15
 D8C7  13                                  .byte   $13
 D8C8  00                                  .byte   $00
 D8C9  00                                  .byte   $00

                   ; Selftest of low RAM failed.

 D8CA  A8          locd8ca:                tay
 D8CB  A9                                  lda     #$00
 D8CC  00
 D8CD  84          locd8cd:                sty     $79
 D8CE  79
 D8CF  4A                                  lsr     a
 D8D0  4A                                  lsr     a
 D8D1  0A                                  asl     a
 D8D2  AA                                  tax
 D8D3  98                                  tya
 D8D4  29                                  and     #$0f
 D8D5  0F
 D8D6  D0                                  bne     locd8d9
 D8D7  01
  [ =D8D9 ]
 D8D8  E8                                  inx
 D8D9  9A          locd8d9:                txs
 D8DA  A9          locd8da:                lda     #$a2
 D8DB  A2
 D8DC  8D                                  sta     $60c1
 D8DD  C1 60
 D8DF  BA                                  tsx
 D8E0  D0                                  bne     locd8e9
 D8E1  07
  [ =D8E9 ]
 D8E2  A9                                  lda     #$60
 D8E3  60
 D8E4  A0                                  ldy     #$09
 D8E5  09
 D8E6  B8                                  clv
 D8E7  50                                  bvc     locd8ed
 D8E8  04
  [ =D8ED ]
 D8E9  A9          locd8e9:                lda     #$c0
 D8EA  C0
 D8EB  A0                                  ldy     #$01
 D8EC  01
 D8ED  8D          locd8ed:                sta     pokey1
 D8EE  C0 60
 D8F0  A9                                  lda     #$03
 D8F1  03
 D8F2  8D                                  sta     leds_flip
 D8F3  E0 60
 D8F5  A2                                  ldx     #$00
 D8F6  00
 D8F7  2C          locd8f7:                bit     cabsw
 D8F8  00 0C
 D8FA  30                                  bmi     locd8f7
 D8FB  FB
  [ =D8F7 ]
 D8FC  2C          locd8fc:                bit     cabsw
 D8FD  00 0C
 D8FF  10                                  bpl     locd8fc
 D900  FB
  [ =D8FC ]
 D901  8D                                  sta     watchdog
 D902  00 50
 D904  CA                                  dex
 D905  D0                                  bne     locd8f7
 D906  F0
  [ =D8F7 ]
 D907  88                                  dey
 D908  D0                                  bne     locd8f7
 D909  ED
  [ =D8F7 ]
 D90A  8E                                  stx     $60c1
 D90B  C1 60
 D90D  A9                                  lda     #$00
 D90E  00
 D90F  8D                                  sta     leds_flip
 D910  E0 60
 D912  A0                                  ldy     #$09
 D913  09
 D914  2C          locd914:                bit     cabsw
 D915  00 0C
 D917  30                                  bmi     locd914
 D918  FB
  [ =D914 ]
 D919  2C          locd919:                bit     cabsw
 D91A  00 0C
 D91C  10                                  bpl     locd919
 D91D  FB
  [ =D919 ]
 D91E  8D                                  sta     watchdog
 D91F  00 50
 D921  CA                                  dex
 D922  D0                                  bne     locd914
 D923  F0
  [ =D914 ]
 D924  88                                  dey
 D925  D0                                  bne     locd914
 D926  ED
  [ =D914 ]
 D927  BA                                  tsx
 D928  CA                                  dex
 D929  9A                                  txs
 D92A  10                                  bpl     locd8da
 D92B  AE
  [ =D8DA ]
                   .if !REMOVE_SELFTEST                      
 D92C  4C                                  jmp     SelfTestROM
 D92D  0A DA
                   .else
                   .endif

 D92F  51          locd92f:                eor     (gamestate),y
 D930  00
 D931  A8          locd931:                tay
 D932  A5                                  lda     $01
 D933  01
 D934  C9                                  cmp     #$20
 D935  20
 D936  90                                  bcc     locd93a
 D937  02
  [ =D93A ]
 D938  E9                                  sbc     #$18
 D939  18
 D93A  29          locd93a:                and     #$1f
 D93B  1F
 D93C  4C                                  jmp     locd8cd
 D93D  CD D8

 D93F  78          reset:                  sei
 D940  8D                                  sta     watchdog
 D941  00 50
 D943  8D                                  sta     vg_reset
 D944  00 58

                   ; clear all RAM: 0000-07ff (game RAM) and 2000-2fff 
                   (vector RAM)

 D946  A2                                  ldx     #$ff
 D947  FF
 D948  9A                                  txs
 D949  D8                                  cld
 D94A  E8                                  inx
 D94B  8A                                  txa
 D94C  A8                                  tay
 D94D  84          locd94d:                sty     $00                     
                           ; Being used as a zp pointer, not actually 
                   gamestate
 D94E  00
 D94F  86                                  stx     $01
 D950  01
 D951  A0                                  ldy     #$00
 D952  00
 D953  91          locd953:                sta     ($00),y
 D954  00
 D955  C8                                  iny
 D956  D0                                  bne     locd953
 D957  FB
  [ =D953 ]
 D958  E8                                  inx
 D959  E0                                  cpx     #$08
 D95A  08
 D95B  D0                                  bne     locd95f
 D95C  02
  [ =D95F ]
 D95D  A2                                  ldx     #$20
 D95E  20
 D95F  E0          locd95f:                cpx     #$30
 D960  30
 D961  8D                                  sta     watchdog
 D962  00 50
 D964  90                                  bcc     locd94d
 D965  E7
  [ =D94D ]
 D966  85                                  sta     unknown_state
 D967  01
 D968  8D                                  sta     leds_flip
 D969  E0 60

                   ; init pokeys

 D96B  8D                                  sta     $60cf
 D96C  CF 60
 D96E  8D                                  sta     $60df
 D96F  DF 60
 D971  A2                                  ldx     #$07
 D972  07
 D973  8E                                  stx     $60cf
 D974  CF 60
 D976  8E                                  stx     $60df
 D977  DF 60
 D979  E8                                  inx
 D97A  9D          locd97a:                sta     pokey1,x
 D97B  C0 60
 D97D  9D                                  sta     pokey2,x
 D97E  D0 60
 D980  CA                                  dex
 D981  10                                  bpl     locd97a
 D982  F7
  [ =D97A ]
 D983  AD                                  lda     cabsw
 D984  00 0C
 D986  29                                  and     #$10 ; selftest switch
 D987  10

                   .if !REMOVE_SELFTEST
 D988  F0                                  beq     BeginSelfTest ; branch 
                   if selftest
 D989  1F
  [ =D9A9 ]
                   .endif

                   ; reset in non-selftest mode

 D98A  8D          locd98a:                sta     watchdog
 D98B  00 50
 D98D  CE                                  dec     $0100
 D98E  00 01
 D990  D0                                  bne     locd98a
 D991  F8
  [ =D98A ]
 D992  CE                                  dec     $0101
 D993  01 01
 D995  D0                                  bne     locd98a
 D996  F3
  [ =D98A ]
 D997  A9                                  lda     #$10
 D998  10
 D999  85                                  sta     $b4
 D99A  B4
 D99B  20                                  jsr     locde11
 D99C  11 DE
 D99E  20                                  jsr     init_hs
 D99F  AC AB
 D9A1  20                                  jsr     InitVector
 D9A2  6E C1
 D9A4  58                                  cli
 D9A5  4C                                  jmp     locc7a0
 D9A6  A0 C7

 D9A8  A0                                  .byte   $a0

                   ; reset in selftest mode
                   ; Test low RAM: for each byte from $00 to $ff, store 
                   $11 in it, then store
                   ; $00 in all other.bytes and verify it's there, then 
                   check the $11 is
                   ; undisturbed.  Repeat this with $22, $44, and $88 as 
                   well.  (There are
                   ; some faults this won't catch, such as a bit getting 
                   cloned from its
                   ; corresponding bit in the other nibble, but it's not a 
                   bad check.)
                   ; If any of the checks fail, branch to $d8ca.

                   BeginSelfTest:         
                   .if !REMOVE_SELFTEST
 D9A9  A2                                  ldx     #$11
 D9AA  11
 D9AB  9A          locd9ab:                txs
 D9AC  A0                                  ldy     #$00
 D9AD  00
 D9AE  BA          locd9ae:                tsx
 D9AF  96                                  stx     $0,y
 D9B0  00
 D9B1  A2                                  ldx     #$01
 D9B2  01
 D9B3  C8          locd9b3:                iny
 D9B4  B9                                  lda     gamestate,y
 D9B5  00 00
 D9B7  F0                                  beq     locd9bc
 D9B8  03
  [ =D9BC ]
 D9B9  4C          locd9b9:                jmp     locd8ca
 D9BA  CA D8
 D9BC  E8          locd9bc:                inx
 D9BD  D0                                  bne     locd9b3
 D9BE  F4
  [ =D9B3 ]
 D9BF  BA                                  tsx
 D9C0  8A                                  txa
 D9C1  8D                                  sta     watchdog
 D9C2  00 50
 D9C4  C8                                  iny
 D9C5  59                                  eor     gamestate,y
 D9C6  00 00
 D9C8  D0                                  bne     locd9b9
 D9C9  EF
  [ =D9B9 ]
 D9CA  99                                  sta     gamestate,y
 D9CB  00 00
 D9CD  C8                                  iny
 D9CE  D0                                  bne     locd9ae
 D9CF  DE
  [ =D9AE ]
 D9D0  BA                                  tsx
 D9D1  8A                                  txa
 D9D2  0A                                  asl     a
 D9D3  AA                                  tax
 D9D4  90                                  bcc     locd9ab
 D9D5  D5
  [ =D9AB ]

                   ; Low RAM selftest passed.
                   ; Test remaning RAM: $0100-$07ff and $2000-$2fff.  For 
                   each.byte, check
                   ; that it's zero (which it should be, we cleared it 
                   above), then do a
                   ; write-read-compare of $11, $22, $44, and $88 in it.  
                   When done, store a
                   ; $00 back in it.


 D9D6  A0          TestMiddleRam:          ldy     #$00
 D9D7  00
 D9D8  A2                                  ldx     #$01
 D9D9  01
 D9DA  84          locd9da:                sty     $00
 D9DB  00
 D9DC  86                                  stx     $01
 D9DD  01
 D9DE  A0                                  ldy     #$00
 D9DF  00
 D9E0  B1          locd9e0:                lda     ($00),y
 D9E1  00
 D9E2  F0                                  beq     locd9e7
 D9E3  03
  [ =D9E7 ]
 D9E4  4C                                  jmp     locd931
 D9E5  31 D9
 D9E7  A9          locd9e7:                lda     #$11
 D9E8  11
 D9E9  91          locd9e9:                sta     ($00),y
 D9EA  00
 D9EB  D1                                  cmp     ($00),y
 D9EC  00
 D9ED  F0                                  beq     locd9f2
 D9EE  03
  [ =D9F2 ]
 D9EF  4C                                  jmp     locd92f
 D9F0  2F D9
 D9F2  0A          locd9f2:                asl     a
 D9F3  90                                  bcc     locd9e9
 D9F4  F4
  [ =D9E9 ]
 D9F5  A9                                  lda     #$00
 D9F6  00
 D9F7  91                                  sta     ($00),y
 D9F8  00
 D9F9  C8                                  iny
 D9FA  D0                                  bne     locd9e0
 D9FB  E4
  [ =D9E0 ]
 D9FC  8D                                  sta     watchdog
 D9FD  00 50
 D9FF  E8                                  inx
 DA00  E0                                  cpx     #$08
 DA01  08
 DA02  D0                                  bne     locda06
 DA03  02
  [ =DA06 ]
 DA04  A2                                  ldx     #$20
 DA05  20
 DA06  E0          locda06:                cpx     #$30
 DA07  30
 DA08  90                                  bcc     locd9da
 DA09  D0
  [ =D9DA ]

                   ; Okay, all RAM passed selftest.
                   ; Checksum ROM.  For each $0800 region, XOR all 
                   its.bytes together and
                   ; XOR in its region number (0 for the first, 1 for the 
                   second, etc), then
                   ; store the result in the.ds at $7d.  Ranges for each 
                   of the 12.bytes:
                   ; $7d - $3000-$37ff
                   ; $7e - $3800-$38ff
                   ; $7f - $9000-$97ff
                   ; $80 - $9800-$9fff
                   ; $81 - $a000-$a7ff
                   ; $82 - $a800-$afff
                   ; $83 - $b000-$b7ff
                   ; $84 - $b800-$bfff
                   ; $85 - $c000-$c7ff
                   ; $86 - $c800-$cfff
                   ; $87 - $d000-$d7ff
                   ; $88 - $d800-$dfff

 DA0A  A9          SelfTestROM:            lda     #$00
 DA0B  00
 DA0C  A8                                  tay
 DA0D  AA                                  tax
 DA0E  85                                  sta     $3b
 DA0F  3B
 DA10  A9                                  lda     #$30
 DA11  30
 DA12  85                                  sta     $3c
 DA13  3C
 DA14  A9          locda14:                lda     #$08
 DA15  08
 DA16  85                                  sta     $38
 DA17  38
 DA18  8A                                  txa
 DA19  51          locda19:                eor     ($3b),y
 DA1A  3B
 DA1B  C8                                  iny
 DA1C  D0                                  bne     locda19
 DA1D  FB
  [ =DA19 ]
 DA1E  E6                                  inc     $3c
 DA1F  3C
 DA20  8D                                  sta     watchdog
 DA21  00 50
 DA23  C6                                  dec     $38
 DA24  38
 DA25  D0                                  bne     locda19
 DA26  F2
  [ =DA19 ]
 DA27  95                                  sta     $7d,x
 DA28  7D
 DA29  E8                                  inx
 DA2A  E0                                  cpx     #$02
 DA2B  02
 DA2C  D0                                  bne     locda32
 DA2D  04
  [ =DA32 ]
 DA2E  A9                                  lda     #$90
 DA2F  90
 DA30  85                                  sta     $3c
 DA31  3C
 DA32  E0          locda32:                cpx     #$0c
 DA33  0C
 DA34  90                                  bcc     locda14
 DA35  DE
  [ =DA14 ]

                   ; All checksums computed and stored in $7d-$88.

 DA36  A5                                  lda     $7d
 DA37  7D
 DA38  F0                                  beq     locda44
 DA39  0A
  [ =DA44 ]
 DA3A  A9                                  lda     #$40
 DA3B  40
 DA3C  A2                                  ldx     #$a4
 DA3D  A4
 DA3E  8D                                  sta     $60c4
 DA3F  C4 60
 DA41  8E                                  stx     $60c5
 DA42  C5 60
 DA44  A2          locda44:                ldx     #$05
 DA45  05
 DA46  AD                                  lda     pokey1_rand
 DA47  CA 60
 DA49  CD          locda49:                cmp     pokey1_rand
 DA4A  CA 60
 DA4C  D0                                  bne     locda53
 DA4D  05
  [ =DA53 ]
 DA4E  CA                                  dex
 DA4F  10                                  bpl     locda49
 DA50  F8
  [ =DA49 ]
 DA51  85                                  sta     $7a
 DA52  7A
 DA53  A2          locda53:                ldx     #$05
 DA54  05
 DA55  AD                                  lda     pokey2_rand
 DA56  DA 60
 DA58  CD          locda58:                cmp     pokey2_rand
 DA59  DA 60
 DA5B  D0                                  bne     locda62
 DA5C  05
  [ =DA62 ]
 DA5D  CA                                  dex
 DA5E  10                                  bpl     locda58
 DA5F  F8
  [ =DA58 ]
 DA60  85                                  sta     $7b
 DA61  7B

                   ; I'm not sure what $de11 does, though I suspect it's 
                   an earom read.
                   ; It appears to be loading stuff into the stats stored 
                   at $0406-$0411.

 DA62  20          locda62:                jsr     locde11
 DA63  11 DE
 DA65  A0                                  ldy     #$02
 DA66  02
 DA67  AD                                  lda     hs_initflag
 DA68  C9 01
 DA6A  F0                                  beq     locda76
 DA6B  0A
  [ =DA76 ]
 DA6C  85                                  sta     $7c
 DA6D  7C
 DA6E  20                                  jsr     locddf1
 DA6F  F1 DD
 DA71  A0                                  ldy     #$00
 DA72  00
 DA73  8C                                  sty     hs_initflag
 DA74  C9 01
 DA76  84          locda76:                sty     gamestate
 DA77  00

                   ; Load the colormap used by the selftest screens.

 DA78  A2                                  ldx     #$07
 DA79  07
 DA7A  BD          locda7a:                lda     locdaf9,x
 DA7B  F9 DA
 DA7D  9D                                  sta     col_ram,x
 DA7E  00 08
 DA80  CA                                  dex
 DA81  10                                  bpl     locda7a
 DA82  F7
  [ =DA7A ]
 DA83  A9                                  lda     #$00
 DA84  00
 DA85  8D                                  sta     leds_flip
 DA86  E0 60
 DA88  A9                                  lda     #$10
 DA89  10
 DA8A  8D                                  sta     vid_coins
 DA8B  00 40

                   ; Top of selftest-mode main loop.
                   ; Wait for the vector processor to be done.  Loop up to 
                   five times.

 DA8D  A0          locda8d:                ldy     #$04
 DA8E  04

                   ; Wait for 21 ($14+1) cycles of the 3KHz signal.

 DA8F  A2          locda8f:                ldx     #$14
 DA90  14
 DA91  2C          locda91:                bit     cabsw
 DA92  00 0C
 DA94  10                                  bpl     locda91
 DA95  FB
  [ =DA91 ]
 DA96  2C          locda96:                bit     cabsw
 DA97  00 0C
 DA99  30                                  bmi     locda96
 DA9A  FB
  [ =DA96 ]
 DA9B  CA                                  dex
 DA9C  10                                  bpl     locda91
 DA9D  F3
  [ =DA91 ]

                   ; Have we run out of iterations?  If so, break out.

 DA9E  88                                  dey
 DA9F  30                                  bmi     locdaa9
 DAA0  08
  [ =DAA9 ]

                   ; Poke the watchdog - don't want to get reset while 
                   waiting!

 DAA1  8D                                  sta     watchdog
 DAA2  00 50

                   ; Is the vector processor done?

 DAA4  2C                                  bit     cabsw
 DAA5  00 0C
 DAA7  50                                  bvc     locda8f ; tests vector 
                   processor halt bit
 DAA8  E6
  [ =DA8F ]

                   ; Either the vector processor is done or we got tired 
                   of waiting.

 DAA9  8D          locdaa9:                sta     vg_reset
 DAAA  00 58
 DAAC  A9                                  lda     #<vecram
 DAAD  00
 DAAE  85                                  sta     vidptr_l
 DAAF  74
 DAB0  A9                                  lda     #>vecram
 DAB1  20
 DAB2  85                                  sta     vidptr_h
 DAB3  75
 DAB4  8D                                  sta     $60cb
 DAB5  CB 60
 DAB7  AD                                  lda     spinner_cabtyp
 DAB8  C8 60
 DABA  85                                  sta     $52
 DABB  52
 DABC  29                                  and     #%00001111
 DABD  0F
 DABE  85                                  sta     $50
 DABF  50
 DAC0  AD                                  lda     cabsw
 DAC1  00 0C
 DAC3  49                                  eor     #$ff
 DAC4  FF
 DAC5  29                                  and     #$2f            ; keep 
                   diag step, slam, and coins
 DAC6  2F
 DAC7  85                                  sta     zap_fire_new
 DAC8  4E
 DAC9  29                                  and     #$28            ; keep 
                   diag step and slam
 DACA  28
 DACB  F0                                  beq     locdad8
 DACC  0B
  [ =DAD8 ]
 DACD  06                                  asl     zap_fire_tmp1
 DACE  4C
 DACF  90                                  bcc     locdad5
 DAD0  04
  [ =DAD5 ]
 DAD1  E6                                  inc     gamestate
 DAD2  00
 DAD3  E6                                  inc     gamestate
 DAD4  00
 DAD5  B8          locdad5:                clv
 DAD6  50                                  bvc     locdadc
 DAD7  04
  [ =DADC ]
 DAD8  A9          locdad8:                lda     #$20
 DAD9  20
 DADA  85                                  sta     zap_fire_tmp1
 DADB  4C
 DADC  20          locdadc:                jsr     draw_selftest_scr
 DADD  0F DB
 DADF  20                                  jsr     vapp_centre_halt
 DAE0  0D DF
 DAE2  8D                                  sta     vg_go
 DAE3  00 48
 DAE5  E6                                  inc     timectr
 DAE6  03
 DAE7  A5                                  lda     timectr
 DAE8  03
 DAE9  29                                  and     #$03
 DAEA  03
 DAEB  D0                                  bne     locdaf0
 DAEC  03
  [ =DAF0 ]
 DAED  20                                  jsr     locde1b
 DAEE  1B DE
 DAF0  AD          locdaf0:                lda     cabsw
 DAF1  00 0C
 DAF3  29                                  and     #$10
 DAF4  10
 DAF5  F0                                  beq     locda8d
 DAF6  96
  [ =DA8D ]

                   ; We depend on something else to break us out of this 
                   loop.  I suspect
                   ; this "something" is the hardware watchdog.
                   ; (could this be demo freeze mode as a quick guess)

 DAF7  D0          Deadlock                bne     Deadlock
 DAF8  FE
  [ =DAF7 ]

                   ; Loaded to colour RAM; see $da7a

 DAF9  00          locdaf9:                .byte   $00
 DAFA  04                                  .byte   $04
 DAFB  08                                  .byte   $08
 DAFC  0C                                  .byte   $0c
 DAFD  03                                  .byte   $03
 DAFE  07                                  .byte   $07
 DAFF  0B                                  .byte   $0b
 DB00  0B                                  .byte   $0b

                   ; Jump table, used just below at $db19.
                   ; These are the various selftest screens.

                   locdb01:                
 DB01  59 DB                               .word   selftest_0-1
 DB03  F6 DB                               .word   selftest_1-1
 DB05  83 DB                               .word   selftest_2-1
 DB07  99 DB                               .word   selftest_3-1
 DB09  7D DB                               .word   selftest_4-1
 DB0B  6E DB                               .word   selftest_5-1
 DB0D  21 DB                               .word   selftest_6-1

 DB0F  A6          draw_selftest_scr:      ldx     gamestate
 DB10  00
 DB11  E0                                  cpx     #$0e
 DB12  0E
 DB13  90                                  bcc     locdb19
 DB14  04
  [ =DB19 ]
 DB15  A2                                  ldx     #$02
 DB16  02
 DB17  86                                  stx     gamestate
 DB18  00
 DB19  BD          locdb19:                lda     locdb01+1,x
 DB1A  02 DB
 DB1C  48                                  pha
 DB1D  BD                                  lda     locdb01,x
 DB1E  01 DB
 DB20  48                                  pha
 DB21  60                                  rts

                   selftest_6:             

 DB22  A9                                  lda     #$00
 DB23  00
 DB24  8D                                  sta     leds_flip
 DB25  E0 60
 DB27  8D                                  sta     mb_w_00
 DB28  80 60
 DB2A  8D                                  sta     pokey1
 DB2B  C0 60
 DB2D  8D                                  sta     pokey2
 DB2E  D0 60
 DB30  8D                                  sta     earom_write
 DB31  00 60
 DB33  8D                                  sta     eactl_mbst
 DB34  40 60
 DB36  AD                                  lda     eactl_mbst
 DB37  40 60
 DB39  AD                                  lda     mb_rd_l
 DB3A  60 60
 DB3C  AD                                  lda     mb_rd_h
 DB3D  70 60
 DB3F  AD                                  lda     earom_rd
 DB40  50 60
 DB42  A9                                  lda     #$08
 DB43  08
 DB44  8D                                  sta     leds_flip
 DB45  E0 60
 DB47  A9                                  lda     #$01
 DB48  01
 DB49  A2                                  ldx     #$1f
 DB4A  1F
 DB4B  18                                  clc
 DB4C  9D          locdb4c:                sta     mb_w_00,x
 DB4D  80 60
 DB4F  2A                                  rol     a
 DB50  CA                                  dex
 DB51  10                                  bpl     locdb4c
 DB52  F9
  [ =DB4C ]

                   ; $34a6 = draw box around screen

 0000  A6 34 00 00                         ST_VECTOR_BOX .equ $34a6        
                           ; ROM location for vectors to draw a box around 
                   the screen

 DB53  A9                                  lda     #>ST_VECTOR_BOX
 DB54  34
 DB55  A2                                  ldx     #<ST_VECTOR_BOX
 DB56  A6
 DB57  4C                                  jmp     vapp_vjsr_AX
 DB58  39 DF

                   ; It's not clear to me this code is _ever_ executed...

 DB5A  AD          selftest_0:             lda     earom_op
 DB5B  CA 01
 DB5D  0D                                  ora     $01c7
 DB5E  C7 01
 DB60  D0                                  bne     locdb6e
 DB61  0C
  [ =DB6E ]
 DB62  20                                  jsr     locde11
 DB63  11 DE
 DB65  AD                                  lda     hs_initflag
 DB66  C9 01
 DB68  85                                  sta     $7c
 DB69  7C
 DB6A  A9                                  lda     #GS_LevelStartup
 DB6B  02
 DB6C  85                                  sta     gamestate
 DB6D  00
 DB6E  60          locdb6e:                rts

 DB6F  A5          selftest_5:             lda     $50
 DB70  50
 DB71  4A                                  lsr     a
 DB72  A8                                  tay
 DB73  A9                                  lda     #$68
 DB74  68
 DB75  20                                  jsr     vapp_sclstat_A_Y
 DB76  4C DF

                   ; $334e = rectangular grid selftest; this display is 
                   mostly ROMed

 0000  4E 33 00 00                         ST_GRID_VECTOR .equ $334e       
                           ; ROM location to draw a grid on the screen for 
                   self-test

 DB78  A2                                  ldx     #<ST_GRID_VECTOR
 DB79  4E
 DB7A  A9                                  lda     #>ST_GRID_VECTOR
 DB7B  33
 DB7C  D0                                  bne     locdb88
 DB7D  0A
  [ =DB88 ]

                   ; $32b6 = coloured-lines selftest; this display is 
                   entirely ROMed

 0000  B6 32 00 00                         ST_VECTOR_4 .equ $32b6          
                           ; ROM location to draw colored lines on screen 
                   for self-test

 DB7E  A2          selftest_4:             ldx     #<ST_VECTOR_4
 DB7F  B6
 DB80  A9                                  lda     #>ST_VECTOR_4
 DB81  32
 DB82  D0                                  bne     locdb88
 DB83  04
  [ =DB88 ]

                   ; $330a = draw selftest screen 2; this display is 
                   entirely ROMed

 0000  0A 33 00 00                         ST_VECTOR_2 .equ $330a          
                           ; ROM location for self-test screeen 2

 DB84  A9          selftest_2:             lda     #>ST_VECTOR_2
 DB85  33
 DB86  A2                                  ldx     #<ST_VECTOR_2
 DB87  0A
 DB88  20          locdb88:                jsr     vapp_vjsr_AX
 DB89  39 DF
 DB8B  A2                                  ldx     #$06
 DB8C  06
 DB8D  A9                                  lda     #$00
 DB8E  00
 DB8F  9D          locdb8f:                sta     $60c1,x
 DB90  C1 60
 DB92  9D                                  sta     $60d1,x
 DB93  D1 60
 DB95  CA                                  dex
 DB96  CA                                  dex
 DB97  10                                  bpl     locdb8f
 DB98  F6
  [ =DB8F ]
                   .endif
 DB99  60                                  rts

 DB9A  A5          selftest_3:             lda     timectr
 DB9B  03

 DB9C  29                                  and     #$3f
 DB9D  3F
 DB9E  D0                                  bne     locdba2
 DB9F  02
  [ =DBA2 ]
 DBA0  E6                                  inc     $39
 DBA1  39
 DBA2  A5          locdba2:                lda     $39
 DBA3  39
 DBA4  29                                  and     #$07
 DBA5  07
 DBA6  AA                                  tax
 DBA7  BC                                  ldy     locdbd5,x
 DBA8  D5 DB
 DBAA  A9                                  lda     #$00
 DBAB  00
 DBAC  99                                  sta     $60c1,y
 DBAD  C1 60
 DBAF  BC                                  ldy     locdbd6,x
 DBB0  D6 DB
 DBB2  BD                                  lda     locdfdc,x
 DBB3  DC DF
 DBB5  99                                  sta     pokey1,y
 DBB6  C0 60
 DBB8  A9                                  lda     #$a8
 DBB9  A8
 DBBA  99                                  sta     $60c1,y
 DBBB  C1 60

                   ; $3456 = draw full-screen crosshair

 0000  56 34 00 00                         VECTOR_CROSSHAIRS .equ $3456

 DBBD  A9                                  lda     #>VECTOR_CROSSHAIRS
 DBBE  34
 DBBF  A2                                  ldx     #<VECTOR_CROSSHAIRS
 DBC0  56
 DBC1  20                                  jsr     vapp_vjsr_AX
 DBC2  39 DF
 DBC4  A5                                  lda     timectr
 DBC5  03
 DBC6  29                                  and     #$7f
 DBC7  7F
 DBC8  A8                                  tay
 DBC9  A9                                  lda     #$01
 DBCA  01
 DBCB  20                                  jsr     vapp_scale_A_Y
 DBCC  6C DF

                   ; $34aa = draw box

 0000  AA 34 00 00                         VECTOR_BOX .equ $34AA

 DBCE  A9                                  lda     #>VECTOR_BOX
 DBCF  34
 DBD0  A2                                  ldx     #<VECTOR_BOX
 DBD1  AA
 DBD2  4C                                  jmp     vapp_vjsr_AX
 DBD3  39 DF

                   ; Selftest sound table of some sort - see $dba7

 DBD5  16          locdbd5:                .byte   $16
 DBD6  00          locdbd6:                .byte   $00
 DBD7  10                                  .byte   $10
 DBD8  02                                  .byte   $02
 DBD9  12                                  .byte   $12
 DBDA  04                                  .byte   $04
 DBDB  14                                  .byte   $14
 DBDC  06                                  .byte   $06
 DBDD  16                                  .byte   $16
 DBDE  00                                  .byte   $00
 DBDF  EA                                  .byte   $ea

                   ; Returns value with difficulty/rating bits in $07, 
                   something unknown
                   ; ($20 bit of spinner/cabinet select.byte) in $08.
                   ; Uses $37 as temporary storage.

 DBE0  8D          get_diff_bits:          sta     $60db
 DBE1  DB 60
 DBE3  AD                                  lda     zap_fire_starts
 DBE4  D8 60
 DBE6  29                                  and     #$07 ; 
                   difficulty/rating bits
 DBE7  07
 DBE8  85                                  sta     $37
 DBE9  37
 DBEA  8D                                  sta     $60cb
 DBEB  CB 60
 DBED  AD                                  lda     spinner_cabtyp
 DBEE  C8 60
 DBF0  29                                  and     #$20 ; Unknown
 DBF1  20
 DBF2  4A                                  lsr     a
 DBF3  4A                                  lsr     a
 DBF4  05                                  ora     $37
 DBF5  37
 DBF6  60                                  rts

                   ; Selftest screen 1 ($00 holds $02)

 DBF7  A5          selftest_1:             lda     $2e
 DBF8  2E
 DBF9  F0                                  beq     locdc19
 DBFA  1E
  [ =DC19 ]
 DBFB  8D                                  sta     mb_w_15
 DBFC  95 60
 DBFE  8D                                  sta     mb_w_0d
 DBFF  8D 60
 DC01  A5                                  lda     $2f
 DC02  2F
 DC03  8D                                  sta     mb_w_16
 DC04  96 60
 DC06  A2                                  ldx     #$00
 DC07  00
 DC08  20                                  jsr     divide
 DC09  E6 DC
 DC0B  C9                                  cmp     #$01
 DC0C  01
 DC0D  D0                                  bne     locdc15
 DC0E  06
  [ =DC15 ]
 DC0F  98                                  tya
 DC10  D0                                  bne     locdc15
 DC11  03
  [ =DC15 ]
 DC12  8A                                  txa
 DC13  10                                  bpl     locdc19
 DC14  04
  [ =DC19 ]
 DC15  A9          locdc15:                lda     #$ff
 DC16  FF
 DC17  85                                  sta     $78
 DC18  78
 DC19  A2          locdc19:                ldx     #$00
 DC1A  00
 DC1B  86                                  stx     draw_z
 DC1C  73
 DC1D  E6                                  inc     $2e
 DC1E  2E
 DC1F  D0                                  bne     locdc27
 DC20  06
  [ =DC27 ]
 DC21  E6                                  inc     $2f
 DC22  2F
 DC23  10                                  bpl     locdc27
 DC24  02
  [ =DC27 ]
 DC25  86                                  stx     $2f
 DC26  2F
 DC27  8D          locdc27:                sta     $60db
 DC28  DB 60
 DC2A  AD                                  lda     zap_fire_starts
 DC2B  D8 60
 DC2D  29                                  and     #$78 ; zap, fire, 
                   start1, start2
 DC2E  78
 DC2F  85                                  sta     zap_fire_debounce
 DC30  4D
 DC31  F0                                  beq     locdc38
 DC32  05
  [ =DC38 ]
 DC33  8D                                  sta     pokey1
 DC34  C0 60
 DC36  A2                                  ldx     #$a4
 DC37  A4
 DC38  8E          locdc38:                stx     $60c1
 DC39  C1 60
 DC3B  A2                                  ldx     #$00
 DC3C  00
 DC3D  A5                                  lda     zap_fire_new
 DC3E  4E
 DC3F  F0                                  beq     locdc47
 DC40  06
  [ =DC47 ]
 DC41  0A                                  asl     a
 DC42  8D                                  sta     $60c2
 DC43  C2 60
 DC45  A2                                  ldx     #$a4
 DC46  A4
 DC47  8E          locdc47:                stx     $60c3
 DC48  C3 60
 DC4A  20                                  jsr     vapp_test_i3
 DC4B  0D DD
 DC4D  A4                                  ldy     zap_fire_debounce
 DC4E  4D
 DC4F  A9                                  lda     #$d0 ; -48
 DC50  D0
 DC51  A2                                  ldx     #$f0 ; -16
 DC52  F0
 DC53  20                                  jsr     vapp_test_ibits
 DC54  2B DD
 DC56  A4                                  ldy     zap_fire_new
 DC57  4E
 DC58  20                                  jsr     vapp_test_ibmove
 DC59  27 DD
 DC5B  A5                                  lda     $52
 DC5C  52
 DC5D  29                                  and     #$10
 DC5E  10
 DC5F  F0                                  beq     locdc7e
 DC60  1D
  [ =DC7E ]

 0000  82 34 00 00                         ST_VECTOR_C .equ $3482          
                           ; $3482 = draw cocktail-bit C
 DC61  A9                                  lda     #>ST_VECTOR_C
 DC62  34
 DC63  A2                                  ldx     #<ST_VECTOR_C
 DC64  82

 DC65  20                                  jsr     vapp_vjsr_AX
 DC66  39 DF
 DC68  A0                                  ldy     #$10
 DC69  10
 DC6A  A5                                  lda     zap_fire_debounce
 DC6B  4D
 DC6C  29                                  and     #$60 ; start1, start2
 DC6D  60
 DC6E  F0                                  beq     locdc7e
 DC6F  0E
  [ =DC7E ]
 DC70  49                                  eor     #$20
 DC71  20
 DC72  F0                                  beq     locdc78
 DC73  04
  [ =DC78 ]
 DC74  A9                                  lda     #$04
 DC75  04
 DC76  A0                                  ldy     #$08
 DC77  08
 DC78  8D          locdc78:                sta     leds_flip
 DC79  E0 60
 DC7B  8C                                  sty     vid_coins
 DC7C  00 40

 0000  92 34 00 00                         ST_VECTOR_BOXLINE .equ $3492    
                           ; $3492 = draw box around screen and line 
                   across the middle

 DC7E  A9          locdc7e:                lda     #>ST_VECTOR_BOXLINE
 DC7F  34
 DC80  A2                                  ldx     #<ST_VECTOR_BOXLINE
 DC81  92
 DC82  20                                  jsr     vapp_vjsr_AX
 DC83  39 DF

                   ; Show any nonzero checksums (stored in the 12.bytes 
                   from $7d to $88)

 DC85  A2                                  ldx     #$0b
 DC86  0B
 DC87  B5          locdc87:                lda     $7d,x
 DC88  7D
 DC89  F0                                  beq     locdca4
 DC8A  19
  [ =DCA4 ]
 DC8B  85                                  sta     $35
 DC8C  35
 DC8D  86                                  stx     $38
 DC8E  38
 DC8F  8A                                  txa
 DC90  20                                  jsr     vapp_digit
 DC91  1F DF
 DC93  A0                                  ldy     #$f4 ; -12
 DC94  F4
 DC95  A2                                  ldx     #$f4 ; -12
 DC96  F4
 DC97  A5                                  lda     $35
 DC98  35
 DC99  20                                  jsr     vapp_ldraw_Y_X_2dig_A
 DC9A  A9 D8
 DC9C  A9                                  lda     #$0c ; 12, 12
 DC9D  0C
 DC9E  AA                                  tax
 DC9F  20                                  jsr     vapp_ldraw_A_X
 DCA0  75 DF
 DCA2  A6                                  ldx     $38
 DCA3  38
 DCA4  CA          locdca4:                dex
 DCA5  10                                  bpl     locdc87
 DCA6  E0
  [ =DC87 ]
 DCA7  20                                  jsr     vapp_vcentre_2
 DCA8  53 DF
 DCAA  A9                                  lda     #$00
 DCAB  00
 DCAC  A2                                  ldx     #$16
 DCAD  16
 DCAE  20                                  jsr     vapp_ldraw_A_X
 DCAF  75 DF

                   ; Show the 5 characters in $78-$7c

 DCB1  A2                                  ldx     #$04
 DCB2  04
 DCB3  86                                  stx     $37
 DCB4  37
 DCB5  A6          locdcb5:                ldx     $37
 DCB6  37
 DCB7  A0                                  ldy     #$00
 DCB8  00
 DCB9  B5                                  lda     $78,x
 DCBA  78
 DCBB  F0                                  beq     locdcc0
 DCBC  03
  [ =DCC0 ]
 DCBD  BC                                  ldy     locdce1,x
 DCBE  E1 DC
 DCC0  B9          locdcc0:                lda     char_jsrtbl,y
 DCC1  E4 31
 DCC3  BE                                  ldx     char_jsrtbl+1,y
 DCC4  E5 31
 DCC6  20                                  jsr     vapp_A_X_Y_0
 DCC7  57 DF
 DCC9  C6                                  dec     $37
 DCCA  37
 DCCB  10                                  bpl     locdcb5
 DCCC  E8
  [ =DCB5 ]

                   ; Draw the spinner line

 DCCD  A2                                  ldx     #$ac
 DCCE  AC
 DCCF  A9                                  lda     #$30
 DCD0  30
 DCD1  20                                  jsr     vapp_ldraw_A_X
 DCD2  75 DF
 DCD4  A4                                  ldy     $50
 DCD5  50
 DCD6  B9                                  lda     spinner_sine+4,y
 DCD7  E8 DF
 DCD9  BE                                  ldx     spinner_sine,y
 DCDA  E4 DF
 DCDC  A0                                  ldy     #$c0
 DCDD  C0
 DCDE  4C                                  jmp     vapp_ldraw_A_X_Y
 DCDF  73 DF
 DCE1  2E          locdce1:                rol     $3438
 DCE2  38 34
 DCE4  36                                  rol     $1e,x
 DCE5  1E

                   ; This appears to be doing a divide, but I'm not clear 
                   enough on how the
                   ; mathbox works to be certain of the details.

 DCE6  A0          divide:                 ldy     #$00
 DCE7  00
 DCE8  84                                  sty     draw_z
 DCE9  73
 DCEA  8C                                  sty     secs_avg_h
 DCEB  14 04
 DCED  8D                                  sta     mb_w_0e
 DCEE  8E 60
 DCF0  8E                                  stx     mb_w_0f
 DCF1  8F 60
 DCF3  8C                                  sty     mb_w_10
 DCF4  90 60
 DCF6  A2                                  ldx     #$10
 DCF7  10
 DCF8  8E                                  stx     mb_w_0c
 DCF9  8C 60
 DCFB  8E                                  stx     mb_w_14
 DCFC  94 60
 DCFE  CA          locdcfe:                dex
 DCFF  30                                  bmi     locdd0c
 DD00  0B
  [ =DD0C ]
 DD01  AD                                  lda     eactl_mbst
 DD02  40 60
 DD04  30                                  bmi     locdcfe
 DD05  F8
  [ =DCFE ]
 DD06  AD                                  lda     mb_rd_l
 DD07  60 60
 DD09  AC                                  ldy     mb_rd_h
 DD0A  70 60
 DD0C  60          locdd0c:                rts

                   ; Appends code to display the three lines of bits 
                   showing the configuration
                   ; and input button values.

 DD0D  20          vapp_test_i3:           jsr     vapp_vcentre_2
 DD0E  53 DF
 DD10  A9                                  lda     #$00
 DD11  00
 DD12  20                                  jsr     vapp_scale_A_0
 DD13  6A DF
 DD15  A9                                  lda     #$e8 ; -24
 DD16  E8
 DD17  AC                                  ldy     optsw1
 DD18  00 0D
 DD1A  20                                  jsr     locdd29
 DD1B  29 DD
 DD1D  AC                                  ldy     optsw2
 DD1E  00 0E
 DD20  20                                  jsr     vapp_test_ibmove
 DD21  27 DD
 DD23  20                                  jsr     get_diff_bits
 DD24  E0 DB
 DD26  A8                                  tay

 DD27  A9          vapp_test_ibmove:       lda     #$d0 ; -48
 DD28  D0
 DD29  A2          locdd29:                ldx     #$f8 ; -8
 DD2A  F8

 DD2B  84          vapp_test_ibits:                sty     $35
 DD2C  35
 DD2D  20                                  jsr     vapp_ldraw_A_X
 DD2E  75 DF
 DD30  A2                                  ldx     #$07
 DD31  07
 DD32  86                                  stx     $37
 DD33  37
 DD34  06          locdd34:                asl     $35
 DD35  35
 DD36  A9                                  lda     #$00
 DD37  00
 DD38  2A                                  rol     a
 DD39  20                                  jsr     vapp_digit
 DD3A  1F DF
 DD3C  C6                                  dec     $37
 DD3D  37
 DD3E  10                                  bpl     locdd34
 DD3F  F4
  [ =DD34 ]
 DD40  60                                  rts

                   ; Display game statistics.

 DD41  AD          vapp_stats:             lda     games_2p_l
 DD42  0F 04
 DD44  0A                                  asl     a
 DD45  85                                  sta     $29
 DD46  29
 DD47  AD                                  lda     games_2p_m
 DD48  10 04
 DD4A  2A                                  rol     a
 DD4B  85                                  sta     $2a
 DD4C  2A
 DD4D  AD                                  lda     games_1p_l
 DD4E  0C 04
 DD50  18                                  clc
 DD51  65                                  adc     $29
 DD52  29
 DD53  8D                                  sta     mb_w_15
 DD54  95 60
 DD56  85                                  sta     $29
 DD57  29
 DD58  AD                                  lda     games_1p_m
 DD59  0D 04
 DD5B  65                                  adc     $2a
 DD5C  2A
 DD5D  8D                                  sta     mb_w_16
 DD5E  96 60
 DD60  05                                  ora     $29
 DD61  29
 DD62  D0                                  bne     locdd69
 DD63  05
  [ =DD69 ]
 DD64  A9                                  lda     #$01
 DD65  01
 DD66  8D                                  sta     mb_w_15
 DD67  95 60
 DD69  AD          locdd69:                lda     play_time_l
 DD6A  09 04
 DD6C  8D                                  sta     mb_w_0d
 DD6D  8D 60
 DD6F  AD                                  lda     play_time_m
 DD70  0A 04
 DD72  AE                                  ldx     play_time_h
 DD73  0B 04
 DD75  20                                  jsr     divide
 DD76  E6 DC
 DD78  8D                                  sta     secs_avg_l
 DD79  12 04
 DD7B  8C                                  sty     secs_avg_m
 DD7C  13 04


 0000  CE 3D 00 00                         ST_VECTOR_LABELS    .equ $3dce  
                           ; 3dce = draw the "SECONDS ON", "SECONDS 
                   PLAYED", etc, labels
 DD7E  A9                                  lda     #>ST_VECTOR_LABELS
 DD7F  3D
 DD80  A2                                  ldx     #<ST_VECTOR_LABELS
 DD81  CE

 DD82  20                                  jsr     vapp_vjsr_AX
 DD83  39 DF
 DD85  A9                                  lda     #$06
 DD86  06
 DD87  85                                  sta     $3b
 DD88  3B
 DD89  A9                                  lda     #$04
 DD8A  04
 DD8B  85                                  sta     $3c
 DD8C  3C
 DD8D  85                                  sta     $37
 DD8E  37
 DD8F  A0          locdd8f:                ldy     #$00
 DD90  00
 DD91  84                                  sty     $31
 DD92  31
 DD93  84                                  sty     $32
 DD94  32
 DD95  84                                  sty     $33
 DD96  33
 DD97  84                                  sty     $34
 DD98  34
 DD99  B1                                  lda     ($3b),y
 DD9A  3B
 DD9B  85                                  sta     $56
 DD9C  56
 DD9D  E6                                  inc     $3b
 DD9E  3B
 DD9F  B1                                  lda     ($3b),y
 DDA0  3B
 DDA1  85                                  sta     $57
 DDA2  57
 DDA3  E6                                  inc     $3b
 DDA4  3B
 DDA5  B1                                  lda     ($3b),y
 DDA6  3B
 DDA7  85                                  sta     $58
 DDA8  58
 DDA9  E6                                  inc     $3b
 DDAA  3B

                   ; From here to the cld at ddc8, code converts a 24-bit 
                   number stored in
                   ; $56/$57/$58 into six-nibble BCD, stored in 
                   $31/$32/$33.  Only the low
                   ; six digits are retained.

 DDAB  F8                                  sed
 DDAC  A0                                  ldy     #$17
 DDAD  17
 DDAE  84                                  sty     $38
 DDAF  38
 DDB0  26          locddb0:                rol     $56
 DDB1  56
 DDB2  26                                  rol     $57
 DDB3  57
 DDB4  26                                  rol     $58
 DDB5  58
 DDB6  A0                                  ldy     #$03
 DDB7  03
 DDB8  A2                                  ldx     #$00
 DDB9  00
 DDBA  B5          locddba:                lda     $31,x
 DDBB  31
 DDBC  75                                  adc     $31,x
 DDBD  31
 DDBE  95                                  sta     $31,x
 DDBF  31
 DDC0  E8                                  inx
 DDC1  88                                  dey
 DDC2  10                                  bpl     locddba
 DDC3  F6
  [ =DDBA ]
 DDC4  C6                                  dec     $38
 DDC5  38
 DDC6  10                                  bpl     locddb0
 DDC7  E8
  [ =DDB0 ]
 DDC8  D8                                  cld
 DDC9  A9                                  lda     #$31
 DDCA  31
 DDCB  A0                                  ldy     #$04
 DDCC  04
 DDCD  20                                  jsr     vapp_multdig_y_a
 DDCE  B1 DF
 DDD0  A9                                  lda     #$d0 ; -48
 DDD1  D0
 DDD2  A2                                  ldx     #$f8 ; -8
 DDD3  F8
 DDD4  20                                  jsr     vapp_ldraw_A_X
 DDD5  75 DF
 DDD7  C6                                  dec     $37
 DDD8  37
 DDD9  10                                  bpl     locdd8f
 DDDA  B4
  [ =DD8F ]
 DDDB  60                                  rts

 DDDC  73                                  .byte $73

                   ; Starting and ending offsets in EAROM of various 
                   pieces.

 DDDD  00          locdddd:                .byte   $00             ; Top 
                   three initials, start

 DDDE  09          locddde:                .byte   $09             ; Top 
                   three initials, end
 DDDF  0A                                  .byte   $0a             ; Top 
                   three scores, start
 DDE0  15                                  .byte   $15             ; Top 
                   three scores, end
 DDE1  16                                  .byte   $16             ; 
                   Switched-on time, start
 DDE2  22                                  .byte   $22             ; 
                   Switched-on time, end

                   ; Pointers to RAM versions of EAROM stuff

 DDE3  15 06       locdde3:                .word   hs_initials_3
 DDE5  15 07                               .word   hs_score_3
 DDE7  06 04                               .word   on_time_l

 DDE9  A9          zero_times:             lda     #$04
 DDEA  04
 DDEB  D0                                  bne     locddf3
 DDEC  06
  [ =DDF3 ]

 DDED  A9          zero_scores:            lda     #$03
 DDEE  03
 DDEF  D0                                  bne     locddf3
 DDF0  02
  [ =DDF3 ]
 DDF1  A9          locddf1:                lda     #$07
 DDF2  07
 DDF3  A0          locddf3:                ldy     #$ff
 DDF4  FF
 DDF5  D0                                  bne     locddff
 DDF6  08
  [ =DDFF ]
 DDF7  A9          locddf7:                lda     #$03
 DDF8  03
 DDF9  D0                                  bne     locddfd
 DDFA  02
  [ =DDFD ]
 DDFB  A9          locddfb:                lda     #$04
 DDFC  04
 DDFD  A0          locddfd:                ldy     #$00
 DDFE  00
 DDFF  8C          locddff:                sty     earom_clr       ; A now 
                   3/4/7; Y now $00/$ff
 DE00  C6 01
 DE02  48                                  pha
 DE03  0D                                  ora     $01c7
 DE04  C7 01
 DE06  8D                                  sta     $01c7
 DE07  C7 01
 DE09  68                                  pla
 DE0A  0D                                  ora     $01c8
 DE0B  C8 01
 DE0D  8D                                  sta     $01c8
 DE0E  C8 01
 DE10  60                                  rts
 DE11  A9          locde11:                lda     #$07
 DE12  07
 DE13  8D                                  sta     $01c7
 DE14  C7 01
 DE16  A9                                  lda     #$00
 DE17  00
 DE18  8D                                  sta     $01c8
 DE19  C8 01
 DE1B  AD          locde1b:                lda     earom_op
 DE1C  CA 01
 DE1E  D0                                  bne     locde6b
 DE1F  4B
  [ =DE6B ]
 DE20  AD                                  lda     $01c7
 DE21  C7 01
 DE23  F0                                  beq     locde6b
 DE24  46
  [ =DE6B ]
 DE25  A2                                  ldx     #$00
 DE26  00
 DE27  8E                                  stx     earom_blkoff
 DE28  CB 01
 DE2A  8E                                  stx     earom_cksum
 DE2B  CF 01
 DE2D  8E                                  stx     $01ce
 DE2E  CE 01

                   ; This loop finds the highest bit in A and leaves it in 
                   $01ce - the bcc
                   ; tests the C bit set by the asl; the dex doesn't touch 
                   C.  It also leaves
                   ; the bit number of this bit in X (0 to 2, since A is 
                   $0-$7).

 DE30  A2                                  ldx     #$08
 DE31  08
 DE32  38                                  sec
 DE33  6E          locde33:                ror     $01ce
 DE34  CE 01
 DE36  0A                                  asl     a
 DE37  CA                                  dex
 DE38  90                                  bcc     locde33
 DE39  F9
  [ =DE33 ]
 DE3A  A0                                  ldy     #$80
 DE3B  80
 DE3C  AD                                  lda     $01ce
 DE3D  CE 01
 DE3F  2D                                  and     $01c8
 DE40  C8 01
 DE42  D0                                  bne     locde46
 DE43  02
  [ =DE46 ]
 DE44  A0                                  ldy     #$20
 DE45  20
 DE46  8C          locde46:                sty     earom_op
 DE47  CA 01
 DE49  AD                                  lda     $01ce
 DE4A  CE 01
 DE4C  4D                                  eor     $01c7
 DE4D  C7 01
 DE4F  8D                                  sta     $01c7
 DE50  C7 01
 DE52  8A                                  txa
 DE53  0A                                  asl     a
 DE54  AA                                  tax
 DE55  BD                                  lda     locdddd,x
 DE56  DD DD
 DE58  8D                                  sta     earom_ptr
 DE59  CC 01
 DE5B  BD                                  lda     locddde,x
 DE5C  DE DD
 DE5E  8D                                  sta     earom_blkend
 DE5F  CD 01
 DE61  BD                                  lda     locdde3,x
 DE62  E3 DD
 DE64  85                                  sta     earom_memptr
 DE65  BD
 DE66  BD                                  lda     locdde3+1,x
 DE67  E4 DD
 DE69  85                                  sta     earom_memptr+1
 DE6A  BE
 DE6B  A0          locde6b:                ldy     #$00
 DE6C  00
 DE6D  8C                                  sty     eactl_mbst
 DE6E  40 60
 DE70  AD                                  lda     earom_op
 DE71  CA 01
 DE73  D0                                  bne     locde76
 DE74  01
  [ =DE76 ]
 DE75  60                                  rts
 DE76  AC          locde76:                ldy     earom_blkoff
 DE77  CB 01
 DE79  AE                                  ldx     earom_ptr
 DE7A  CC 01
 DE7C  0A                                  asl     a
 DE7D  90                                  bcc     locde8c
 DE7E  0D
  [ =DE8C ]

                   ; EAROM op $80

 DE7F  9D                                  sta     earom_write,x
 DE80  00 60
 DE82  A9                                  lda     #$40
 DE83  40
 DE84  8D                                  sta     earom_op
 DE85  CA 01
 DE87  A0                                  ldy     #$0e
 DE88  0E
 DE89  B8                                  clv
 DE8A  50                                  bvc     locdeff
 DE8B  73
  [ =DEFF ]
 DE8C  10          locde8c:                bpl     locdeb3
 DE8D  25
  [ =DEB3 ]

                   ; EAROM op $40

 DE8E  A9                                  lda     #$80
 DE8F  80
 DE90  8D                                  sta     earom_op
 DE91  CA 01
 DE93  AD                                  lda     earom_clr
 DE94  C6 01
 DE96  F0                                  beq     locde9c
 DE97  04
  [ =DE9C ]
 DE98  A9                                  lda     #$00
 DE99  00
 DE9A  91                                  sta     (earom_memptr),y
 DE9B  BD
 DE9C  B1          locde9c:                lda     (earom_memptr),y
 DE9D  BD
 DE9E  EC                                  cpx     earom_blkend
 DE9F  CD 01
 DEA1  90                                  bcc     locdeab
 DEA2  08
  [ =DEAB ]
 DEA3  A9                                  lda     #$00
 DEA4  00
 DEA5  8D                                  sta     earom_op
 DEA6  CA 01
 DEA8  AD                                  lda     earom_cksum
 DEA9  CF 01
 DEAB  9D          locdeab:                sta     earom_write,x
 DEAC  00 60
 DEAE  A0                                  ldy     #$0c
 DEAF  0C
 DEB0  B8                                  clv
 DEB1  50                                  bvc     locdef2
 DEB2  3F
  [ =DEF2 ]

                   ; EAROM op $20

 DEB3  A9          locdeb3:                lda     #$08
 DEB4  08
 DEB5  8D                                  sta     eactl_mbst
 DEB6  40 60
 DEB8  9D                                  sta     earom_write,x
 DEB9  00 60
 DEBB  A9                                  lda     #$09
 DEBC  09
 DEBD  8D                                  sta     eactl_mbst
 DEBE  40 60
 DEC0  EA                                  nop
 DEC1  A9                                  lda     #$08
 DEC2  08
 DEC3  8D                                  sta     eactl_mbst
 DEC4  40 60
 DEC6  EC                                  cpx     earom_blkend
 DEC7  CD 01
 DEC9  AD                                  lda     earom_rd
 DECA  50 60
 DECC  90                                  bcc     locdeee
 DECD  20
  [ =DEEE ]
 DECE  4D                                  eor     earom_cksum
 DECF  CF 01
 DED1  F0                                  beq     locdee6
 DED2  13
  [ =DEE6 ]
 DED3  A9                                  lda     #$00
 DED4  00
 DED5  AC                                  ldy     earom_blkoff
 DED6  CB 01
 DED8  91          locded8:                sta     (earom_memptr),y
 DED9  BD
 DEDA  88                                  dey
 DEDB  10                                  bpl     locded8
 DEDC  FB
  [ =DED8 ]
 DEDD  AD                                  lda     $01ce
 DEDE  CE 01
 DEE0  0D                                  ora     hs_initflag
 DEE1  C9 01
 DEE3  8D                                  sta     hs_initflag
 DEE4  C9 01
 DEE6  A9          locdee6:                lda     #$00
 DEE7  00
 DEE8  8D                                  sta     earom_op
 DEE9  CA 01
 DEEB  B8                                  clv
 DEEC  50                                  bvc     locdef0
 DEED  02
  [ =DEF0 ]
 DEEE  91          locdeee:                sta     (earom_memptr),y
 DEEF  BD
 DEF0  A0          locdef0:                ldy     #$00
 DEF1  00
 DEF2  18          locdef2:                clc
 DEF3  6D                                  adc     earom_cksum
 DEF4  CF 01
 DEF6  8D                                  sta     earom_cksum
 DEF7  CF 01
 DEF9  EE                                  inc     earom_blkoff
 DEFA  CB 01
 DEFC  EE                                  inc     earom_ptr
 DEFD  CC 01
 DEFF  8C          locdeff:                sty     eactl_mbst
 DF00  40 60
 DF02  98                                  tya
 DF03  D0                                  bne     locdf08
 DF04  03
  [ =DF08 ]
 DF05  4C                                  jmp     locde1b
 DF06  1B DE
 DF08  60          locdf08:                rts

 DF09  A9          vapp_rts:               lda     #$c0            ; vrts 
                   (first.byte)
 DF0A  C0
 DF0B  D0                                  bne     locdf12
 DF0C  05
  [ =DF12 ]

 DF0D  20          vapp_centre_halt:       jsr     vapp_vcentre_2
 DF0E  53 DF

 DF10  A9                                  lda     #$20            ; vhalt 
                   (first.byte)
 DF11  20
 DF12  A0          locdf12:                ldy     #$00
 DF13  00
 DF14  91                                  sta     (vidptr_l),y
 DF15  74
 DF16  4C                                  jmp     locdfac
 DF17  AC DF

                   ; Appends the vjsr for the digit corresponding to the 
                   low four bits of A
                   ; on entry.  If C is set, zeros become.dss; C is 
                   cleared if the digit
                   ; is nonzero.

 DF19  90          vapp_digit_lz:          bcc     vapp_digit
 DF1A  04
  [ =DF1F ]
 DF1B  29                                  and     #$0f
 DF1C  0F
 DF1D  F0                                  beq     locdf24
 DF1E  05
  [ =DF24 ]

 DF1F  29          vapp_digit:             and     #$0f
 DF20  0F
 DF21  18                                  clc
 DF22  69                                  adc     #$01
 DF23  01
 DF24  08          locdf24:                php
 DF25  0A                                  asl     a
 DF26  A0                                  ldy     #$00
 DF27  00
 DF28  AA                                  tax
 DF29  BD                                  lda     char_jsrtbl,x
 DF2A  E4 31
 DF2C  91                                  sta     (vidptr_l),y
 DF2D  74
 DF2E  BD                                  lda     char_jsrtbl+1,x
 DF2F  E5 31
 DF31  C8                                  iny
 DF32  91                                  sta     (vidptr_l),y
 DF33  74
 DF34  20                                  jsr     inc_vi.word
 DF35  5F DF
 DF37  28                                  plp
 DF38  60                                  rts

                   ; Appends a vjsr to the video list.  A holds high.byte 
                   of address to vjsr
                   ; to; X holds low.byte.  Note that the $e0 bits of A 
                   are ignored.  (The
                   ; low bit of X is discarded too, but the vjsr format 
                   compels this anyway;
                   ; a vjsr to an odd address is not representible.)

 DF39  4A          vapp_vjsr_AX:           lsr     a
 DF3A  29                                  and     #$0f
 DF3B  0F
 DF3C  09                                  ora     #$a0
 DF3D  A0
 DF3E  A0                                  ldy     #$01
 DF3F  01
 DF40  91                                  sta     (vidptr_l),y
 DF41  74
 DF42  88                                  dey
 DF43  8A                                  txa
 DF44  6A                                  ror     a
 DF45  91                                  sta     (vidptr_l),y
 DF46  74
 DF47  C8                                  iny
 DF48  D0                                  bne     inc_vi.word
 DF49  15
  [ =DF5F ]

                   ; Append a vscale or vstat.  The second.byte is A|$60, 
                   the first.byte is
                   ; in $73, or Y, depending on which entry point.  I 
                   suppose this could
                   ; generate a vrts or vjmp if entered with A having $80 
                   set.

 DF4A  A4          vapp_sclstat_A_73:      ldy     draw_z
 DF4B  73
 DF4C  09          vapp_sclstat_A_Y:       ora     #$60
 DF4D  60

 DF4E  AA                                  tax
 DF4F  98                                  tya
 DF50  4C                                  jmp     vapp_A_X_Y_0
 DF51  57 DF

                   ; $40 $80 = vcentre (why $40? who knows.)

 DF53  A9          vapp_vcentre_2:         lda     #$40
 DF54  40
 DF55  A2                                  ldx     #$80
 DF56  80

                   ; Append first A, then X, to the video stream.

 DF57  A0          vapp_A_X_Y_0:           ldy     #$00
 DF58  00
 DF59  91          vapp_A_X:               sta     (vidptr_l),y
 DF5A  74
 DF5B  C8                                  iny
 DF5C  8A                                  txa
 DF5D  91                                  sta     (vidptr_l),y
 DF5E  74

                   ; increment vidptr_l/vidptr_h by the offset accumulated 
                   in y

 DF5F  98          inc_vi.word:            tya
 DF60  38                                  sec
 DF61  65                                  adc     vidptr_l
 DF62  74
 DF63  85                                  sta     vidptr_l
 DF64  74
 DF65  90                                  bcc     locdf69
 DF66  02
  [ =DF69 ]
 DF67  E6                                  inc     vidptr_h
 DF68  75
 DF69  60          locdf69:                rts

                   ; Append a vscale to the video stream, with l=0 and b 
                   coming from the
                   ; value in A on entry (we assume it's in the range 0-7).

 DF6A  A0          vapp_scale_A_0:         ldy     #$00
 DF6B  00

                   ; ...fall through into...
                   ; Append a vscale to the video stream, getting l from Y 
                   and b from A on
                   ; entry (we assume they're in range).

 DF6C  09          vapp_scale_A_Y:         ora     #$70
 DF6D  70
 DF6E  AA                                  tax
 DF6F  98                                  tya
 DF70  4C                                  jmp     vapp_A_X_Y_0
 DF71  57 DF

                   ; Appends a long draw to the video list, just like 
                   vapp_ldraw_A_X below,
                   ; except that the incoming Y value is stored in $73 
                   first (and thus used
                   ; as the Z value for the draw).

 DF73  84          vapp_ldraw_A_X_Y:       sty     draw_z
 DF74  73

                   ; Appends a long draw to the video list.  The X 
                   coordinate of the draw
                   ; comes from the A register on entry (sign-extended); 
                   the Y coordinate
                   ; from the X register (again, sign-extended).  The Z 
                   value for the draw
                   ; is the high three bits of $73.  The Y register and 
                   $6e-$71 are trashed.

 DF75  A0          vapp_ldraw_A_X:         ldy     #$00
 DF76  00
 DF77  0A                                  asl     a
 DF78  90                                  bcc     locdf7b
 DF79  01
  [ =DF7B ]
 DF7A  88                                  dey
 DF7B  84          locdf7b:                sty     $6f
 DF7C  6F
 DF7D  0A                                  asl     a
 DF7E  26                                  rol     $6f
 DF7F  6F
 DF80  85                                  sta     $6e
 DF81  6E
 DF82  8A                                  txa
 DF83  0A                                  asl     a
 DF84  A0                                  ldy     #$00
 DF85  00
 DF86  90                                  bcc     locdf89
 DF87  01
  [ =DF89 ]
 DF88  88                                  dey
 DF89  84          locdf89:                sty     $71
 DF8A  71
 DF8B  0A                                  asl     a
 DF8C  26                                  rol     $71
 DF8D  71
 DF8E  85                                  sta     $70
 DF8F  70
 DF90  A2                                  ldx     #$6e
 DF91  6E
 DF92  A0          locdf92:                ldy     #$00
 DF93  00
 DF94  B5                                  lda     $02,x
 DF95  02
 DF96  91                                  sta     (vidptr_l),y
 DF97  74
 DF98  B5                                  lda     timectr,x
 DF99  03
 DF9A  29                                  and     #$1f
 DF9B  1F
 DF9C  C8                                  iny
 DF9D  91                                  sta     (vidptr_l),y
 DF9E  74
 DF9F  B5                                  lda     gamestate,x
 DFA0  00
 DFA1  C8                                  iny
 DFA2  91                                  sta     (vidptr_l),y
 DFA3  74
 DFA4  B5                                  lda     $01,x
 DFA5  01
 DFA6  45                                  eor     draw_z
 DFA7  73
 DFA8  29                                  and     #$1f
 DFA9  1F
 DFAA  45                                  eor     draw_z
 DFAB  73
 DFAC  C8          locdfac:                iny
 DFAD  91                                  sta     (vidptr_l),y
 DFAE  74
 DFAF  D0                                  bne     inc_vi.word
 DFB0  AE
  [ =DF5F ]

                   ; Appends a multidigit number.  A holds the zero page 
                   address of the low
                   ; two digits of the number; Y holds the number of 
                   two-digit pairs to
                   ; process.

 DFB1  38          vapp_multdig_y_a:       sec
 DFB2  08                                  php
 DFB3  88                                  dey
 DFB4  84                                  sty     $ae
 DFB5  AE
 DFB6  18                                  clc
 DFB7  65                                  adc     $ae
 DFB8  AE
 DFB9  28                                  plp
 DFBA  AA                                  tax
 DFBB  08          locdfbb:                php
 DFBC  86                                  stx     $af
 DFBD  AF
 DFBE  B5                                  lda     gamestate,x
 DFBF  00
 DFC0  4A                                  lsr     a
 DFC1  4A                                  lsr     a
 DFC2  4A                                  lsr     a
 DFC3  4A                                  lsr     a
 DFC4  28                                  plp
 DFC5  20                                  jsr     vapp_digit_lz
 DFC6  19 DF
 DFC8  A5                                  lda     $ae
 DFC9  AE
 DFCA  D0                                  bne     locdfcd
 DFCB  01
  [ =DFCD ]
 DFCC  18                                  clc
 DFCD  A6          locdfcd:                ldx     $af
 DFCE  AF
 DFCF  B5                                  lda     gamestate,x
 DFD0  00
 DFD1  20                                  jsr     vapp_digit_lz
 DFD2  19 DF
 DFD4  A6                                  ldx     $af
 DFD5  AF
 DFD6  CA                                  dex
 DFD7  C6                                  dec     $ae
 DFD8  AE
 DFD9  10                                  bpl     locdfbb
 DFDA  E0
  [ =DFBB ]
 DFDB  60                                  rts

                   ; Used at $dbb2

 DFDC  10          locdfdc:                .byte   $10
 DFDD  10                                  .byte   $10
 DFDE  40                                  .byte   $40
 DFDF  40                                  .byte   $40
 DFE0  90                                  .byte   $90
 DFE1  90                                  .byte   $90
 DFE2  FF                                  .byte   $ff
 DFE3  FF                                  .byte   $ff

                   ; 20-element sine wave, for drawing the spinner line on 
                   selftest screen 1

 DFE4  00          spinner_sine:           .byte 0, 12, 22, 30, 32, 30, 22,
                    12, 0, -12, -22
 DFE5  0C
 DFE6  16
 DFE7  1E
 DFE8  20
 DFE9  1E
 DFEA  16
 DFEB  0C
 DFEC  00
 DFED  F4
 DFEE  EA
 DFEF  E2                                  .byte -30, -32, -30, -22, -12, 
                   0, 12, 22, 30
 DFF0  E0
 DFF1  E2
 DFF2  EA
 DFF3  F4
 DFF4  00
 DFF5  0C
 DFF6  16
 DFF7  1E

 DFF8  00          locdff8:                .byte   $00
 DFF9  00          lastbyte:               .byte   $00

                   ; Pad out the file so that the 6502 vectors wind up at 
                   the same spot.  Machine 
                   ; won't even boot if you don't have this correct!

 0000  FA DF 00 00 CPUVectors = $dffa

 0000  00 00 00 00 PADLENGTH               .equ    (CPUVectors-lastbyte-1)
                   .ECHO STR$(PADLENGTH) " bytes were added to pad the 
                   file"
                   .REPEAT PADLENGTH
                   .byte 00
                   .ENDREPEAT

 DFFA  04 D7       vector_nmi:             .word   nmi_irq_brk
 DFFC  3F D9       vector_reset:           .word   reset
 DFFE  04 D7       vector_irq_brk:         .word   nmi_irq_brk


*** Symbol Table Listing

Numeric Name     Ref Cnt   Hex Value    Dec Value

 ACTIVE_ENEMY_INFO    25   $     28A          650
 ADD_LEVEL             8   $      00            0
 ALEVELCOLORS          2   $    C1FD        49661
 ALONG_LSB             3   $     107          263
 ALT_START_TABLE       4   $      00            0
 AMSGSCOLORANDYPOS     2   $    D121        53537
 ANYPLAYERLIVESLEFT    1   $    C9C3        51651
 AVL_ENEMY_BY_TYPE    10   $     13D          317
 AVL_FLIPPERS          -   $     13D          317
 AVL_FUSEBALLS         -   $     141          321
 AVL_PULSARS           -   $     13E          318
 AVL_SPIKERS           3   $     140          320
 AVL_TANKERS           1   $     13F          319
 BEGINSELFTEST         1   $    D9A9        55721
 BIN_TO_BCD            1   $    AAF5        43765
 BLACK                 1   $      0F           15
 BLUE                  7   $      0B           11
 BONUS_LIFE_EACH       5   $     156          342
 BONUS_PTS_TBL         1   $    D6F7        55031
 CABSW                14   $     C00         3072
 CANNOTSHOOT           1   $    A303        41731
 CANPULSARFIRE         1   $    9B03        39683
 CAN_STICK_TO_TOP      2   $    9D23        40227
 CHAR_JSRTBL           8   $    31E4        12772
 CHECKALLPLAYERSHOTS    1   $    A454        42068
 CHECKIFSHOULDSHOOT    1   $    A2AD        41645
 CHECKPLAYERFIRE       2   $    A23F        41535
 CHECKPLAYERSHOT       2   $    A463        42083
 CHECK_SETTINGS        2   $    AC20        44064
 CHECK_START           1   $    C81B        51227
 CHECK_ZAP             1   $    A83A        43066
 CLAWDRAWDATA          2   $    BFD2        49106
 CLEARALLENEMIES       1   $    926F        37487
 CLEARALLSHOTS         4   $    928F        37519
 CLEARENEMYDEATHS      1   $    929F        37535
 COINAGE_MSGS          1   $    A8B0        43184
 COINAGE_SHADOW       12   $      09            9
 COIN_STRING           5   $      16           22
 COL_RAM               2   $     800         2048
 COL_RAM1              -   $     801         2049
 COL_RAM2              -   $     802         2050
 COL_RAM3              -   $     803         2051
 COL_RAM4              -   $     804         2052
 COL_RAM5              -   $     805         2053
 COL_RAM6              -   $     806         2054
 COL_RAM7              -   $     807         2055
 COL_RAM_UPR           -   $     808         2056
 COL_RAM_UPR1          -   $     809         2057
 COL_RAM_UPR2          -   $     80A         2058
 COL_RAM_UPR3          -   $     80B         2059
 COL_RAM_UPR4          -   $     80C         2060
 COL_RAM_UPR5          -   $     80D         2061
 COL_RAM_UPR6          -   $     80E         2062
 COL_RAM_UPR7          -   $     80F         2063
 COPYR_CKSUM           2   $      B5          181
 COPYR_DISP_CKSUM1     2   $     16C          364
 COPYR_VID_CKSUM1      2   $     11B          283
 COPYR_VID_CKSUM2      2   $     455         1109
 COPYR_VID_LOC         4   $      B6          182
 COUNTDOWN_TIMER      14   $      04            4
 CPUVECTORS            1   $    DFFA        57338
 CRACK_SPEED           3   $    93E0        37856
 CREATENEWENEMY        1   $    99A5        39333
 CREATE_ENEMIES        1   $    98A2        39074
 CREDITS              12   $      06            6
 CURCOLOR             15   $      9E          158
 CURLEVEL             14   $      9F          159
 CURPLAYER            30   $      3D           61
 CURSCALE              5   $      72          114
 CURTUBE               4   $     112          274
 CYAN                  7   $      03            3
 DAVEPL_MSG            1   $      00            0
 DBLBUF_ADDR_A         6   $    CE68        52840
 DBLBUF_ADDR_B         4   $    CE7A        52858
 DBLBUF_DONE          10   $    B2FE        45822
 DBLBUF_FLG            6   $     415         1045
 DBLBUF_VJMP_C         4   $    CE9E        52894
 DBLBUF_VJMP_D         2   $    CEB0        52912
 DBLBUF_VJSR_LOC       2   $    CE8C        52876
 DB_INIT_VI.WORD      10   $    B2BE        45758
 DEADLOCK              1   $    DAF7        56055
 DEFAULTSCOREINITIALS    1   $    AC08        44040
 DIFF_BITS             6   $     16A          362
 DIFF_SETTINGS         2   $     71F         1823
 DIFF_STR_TBL          2   $    3F1E        16158
 DIVIDE                2   $    DCE6        56550
 DONEZAPWORK           2   $    A8A3        43171
 DOSPIKERSTUFF         1   $    A0F8        41208
 DOSUPERZAP            1   $    A888        43144
 DRAWENEMYBYTYPE       1   $    B5D7        46551
 DRAWFLIPPER           1   $    B5EB        46571
 DRAWFUSEBALL          1   $    B69B        46747
 DRAWPULSAR            1   $    B71B        46875
 DRAWSPIKER            1   $    B622        46626
 DRAWTANKER            1   $    B60F        46607
 DRAW_ENEMIES          1   $    B5AD        46509
 DRAW_EXPLOSIONS       1   $    B79A        47002
 DRAW_LINEGFX          3   $    BDA0        48544
 DRAW_PENDING          1   $    B498        46232
 DRAW_PLAYER           1   $    B586        46470
 DRAW_SELFTEST_SCR     1   $    DB0F        56079
 DRAW_SHOTS            1   $    B75B        46939
 DRAW_Z               22   $      73          115
 EACTL_MBST           11   $    6040        24640
 EAROM_BLKEND          3   $     1CD          461
 EAROM_BLKOFF          4   $     1CB          459
 EAROM_CKSUM           5   $     1CF          463
 EAROM_CLR             3   $     1C6          454
 EAROM_MEMPTR          6   $      BD          189
 EAROM_OP             10   $     1CA          458
 EAROM_PTR             3   $     1CC          460
 EAROM_RD              2   $    6050        24656
 EAROM_WRITE           4   $    6000        24576
 ENDOFHISCORES         2   $     71D         1821
 END_OF_TUNNEL         6   $      F0          240
 END_STARTLEVTBL       1   $    921A        37402
 END_START_BONUS       1   $    91FE        37374
 ENEMIES_PENDING      11   $     3AB          939
 ENEMYCANFIRETABLE     2   $    9B02        39682
 ENEMYDRAWVECS         2   $    B5E1        46561
 ENEMYREACHEDTOP       1   $    9D06        40198
 ENEMYSCOREVALUELSB    1   $    CAF1        51953
 ENEMYSCOREVALUEMSB    1   $    CAF9        51961
 ENEMYSHOTCOUNT        6   $      A6          166
 ENEMYSHOTPOSITIONS    9   $     2DB          731
 ENEMYSHOTSEGMENTS     8   $     2B5          693
 ENEMY_ALONG          41   $     2DF          735
 ENEMY_ALONG_LSB       6   $     29F          671
 ENEMY_SEG            36   $     2B9          697
 ENEMY_TYPE_FLIPPER    1   $      00            0
 ENEMY_TYPE_FUSEBALL    3   $      04            4
 ENEMY_TYPE_INFO      55   $     283          643
 ENEMY_TYPE_MASK      10   $      07            7
 ENEMY_TYPE_PULSAR     2   $      01            1
 ENEMY_TYPE_SPIKER     -   $      03            3
 ENEMY_TYPE_TANKER     1   $      02            2
 ENMCREATEJUMPTABLE    2   $    9A93        39571
 ENM_MOVE_PC           3   $     291          657
 ENM_PC_STORAGE        3   $     298          664
 ENM_SHOOT             1   $    A2A6        41638
 ENM_SHOTSPD_LSB       4   $     120          288
 ENM_SHOTSPD_LSB_TABLE    1   $    9449        37961
 ENM_SHOTSPD_MSB       2   $     118          280
 ENM_SHOT_LSB          -   $     2E6          742
 ENM_SHOT_PROB         1   $    A304        41732
 EXECUTEPCODEOP        1   $    9B98        39832
 FIRESHOT              1   $    A270        41584
 FLAGBITS              3   $     117          279
 FLIPPERENTRY          1   $    A102        41218
 FLIPPER_MOVE          2   $     15D          349
 FLIPPER_MOVE_TABLE    1   $    95F4        38388
 FLIP_TOP_ACCEL        2   $      B3          179
 FLIP_TOP_ACCEL_TABLE    1   $    95E3        38371
 FOUND_ENEMY           1   $    A8A4        43172
 FSCALE               12   $      59           89
 FUSE_MOVE_FLG         4   $     159          345
 FUSE_MOVE_FLG_TABLE    1   $    9578        38264
 FUSE_MOVE_PRB         2   $     15F          351
 FUSE_MOVE_PRB_TABLE    1   $    9587        38279
 GAMEMAINLOOP          2   $    C7A7        51111
 GAMESTATE            48   $      00            0
 GAMESTATEDISPATCHTABLE    2   $    C7DA        51162
 GAMES_1P_H            -   $     40E         1038
 GAMES_1P_L            2   $     40C         1036
 GAMES_1P_M            2   $     40D         1037
 GAMES_2P_H            -   $     411         1041
 GAMES_2P_L            1   $     40F         1039
 GAMES_2P_M            1   $     410         1040
 GAME_MODE            30   $      05            5
 GET_ANGLE             2   $    9ED7        40663
 GET_DIFF_BITS         2   $    DBE0        56288
 GET_TUBE_NO           2   $    C2E8        49896
 GRAPHIC_AT_MID        4   $    BCFD        48381
 GRAPHIC_TABLE         8   $    CEC8        52936
 GREEN                 7   $      07            7
 GS_DEATH              1   $      06            6
 GS_DELAY              8   $      0A           10
 GS_DELAYTHENPLAY      2   $      1E           30
 GS_ENTERINITIALS      1   $      12           18
 GS_GAMESTARTUP        4   $      00            0
 GS_HIGHSCOREEXPLOSION    1   $      24           36
 GS_LEVELBEGIN         1   $      08            8
 GS_LEVELSELECT        1   $      16           22
 GS_LEVELSTARTUP       2   $      02            2
 GS_PLAYING            3   $      04            4
 GS_SERVICEDISPLAY     1   $      22           34
 GS_UNKNOWN1A          1   $      1A           26
 GS_UNKNOWN1C          1   $      1C           28
 GS_UNKNOWN10          1   $      10           16
 GS_UNKNOWN14          4   $      14           20
 GS_ZOOMINGDOWN        2   $      20           32
 GS_ZOOMOFFEND         1   $      0E           14
 GS_ZOOMONTONEW        2   $      18           24
 HALTFLIPPER           1   $    A109        41225
 HARDDIFFICULTY        -   $    9351        37713
 HDR_TEMPLATE         13   $    CDE6        52710
 HDR_TEMPLATE_END      2   $    CE65        52837
 HDR_TEMPLATE_LEN      1   $    CE66        52838
 HIGHEST_LEVEL         3   $      62           98
 HISCOREOFF            1   $    CE1A        52762
 HISCOREOFFSET         1   $    CDE4        52708
 HIT_TOL_BY_ENM_TYPE    1   $     151          337
 HIT_TOL_FLIPPER       1   $     151          337
 HIT_TOL_FUSEBALL      1   $     155          341
 HIT_TOL_PULSAR        1   $     152          338
 HIT_TOL_SPIKER        1   $     154          340
 HIT_TOL_TANKER        1   $     153          339
 HSINITIDX             1   $    CDE5        52709
 HSINITOFF             1   $    CE36        52790
 HS_INITFLAG          16   $     1C9          457
 HS_INITIALS_1         1   $     61B         1563
 HS_INITIALS_2         -   $     618         1560
 HS_INITIALS_3         1   $     615         1557
 HS_INITIALS_4         -   $     612         1554
 HS_INITIALS_5         -   $     60F         1551
 HS_INITIALS_6         -   $     60C         1548
 HS_INITIALS_7         -   $     609         1545
 HS_INITIALS_8         5   $     606         1542
 HS_NEEDS_INIT         1   $    AC36        44086
 HS_SCORES             -   $     700         1792
 HS_SCORE_1            4   $     71B         1819
 HS_SCORE_2            -   $     718         1816
 HS_SCORE_3            1   $     715         1813
 HS_SCORE_4            -   $     712         1810
 HS_SCORE_5            -   $     70F         1807
 HS_SCORE_6            -   $     70C         1804
 HS_SCORE_7            -   $     709         1801
 HS_SCORE_8            2   $     706         1798
 HS_TIMER              9   $     605         1541
 HS_WHICHLETTER        6   $     602         1538
 IBMSG1COIN1CRD        1   $      28           40
 IBMSG1COIN2CRD        1   $      26           38
 IBMSG2COIN1CRD        1   $      2A           42
 IBMSG2CRDMIN          2   $      32           50
 IBMSGATARI            5   $      2C           44
 IBMSGAVOIDSPK         1   $      36           54
 IBMSGBONUS            1   $      1A           26
 IBMSGBONUSEV          1   $      34           52
 IBMSGBONUSSPC         1   $      30           48
 IBMSGCREDITS          1   $      2E           46
 IBMSGEXPERT           1   $      18           24
 IBMSGFREEPLAY         1   $      24           36
 IBMSGGAMEOVER         2   $      00            0
 IBMSGHISCORES         1   $      10           16
 IBMSGHOLE             1   $      20           32
 IBMSGINITIALS         1   $      0A           10
 IBMSGINSCOIN          2   $      22           34
 IBMSGLEVEL            1   $      1E           30
 IBMSGLEVELNS          1   $      38           56
 IBMSGNOVICE           1   $      16           22
 IBMSGPLAY             1   $      08            8
 IBMSGPLAYER           2   $      02            2
 IBMSGPLAYER2          -   $      04            4
 IBMSGPRESSFIRE        2   $      0E           14
 IBMSGRANKING          1   $      12           18
 IBMSGRATESELF         1   $      14           20
 IBMSGRECHARGE         1   $      3A           58
 IBMSGSPINKNOB         2   $      0C           12
 IBMSGSTART            2   $      06            6
 IBMSGTIME             1   $      1C           28
 INC_SCORE             4   $    CA6C        51820
 INC_VI.WORD          10   $    DF5F        57183
 INITENEMIESANDSPIKES    2   $    9234        37428
 INITENEMYLOCATIONS    1   $    9246        37446
 INITIALIZEGAME        1   $    9025        36901
 INITIALPCODEPC        1   $    9AFD        39677
 INITLEVEL             1   $    9009        36873
 INITPLAYERPOSITION    1   $    921B        37403
 INITSUPERZAPPER       2   $    A831        43057
 INITVECTOR            3   $    C16E        49518
 INIT_HS               2   $    ABAC        43948
 INIT_LIVES            3   $     158          344
 INIT_LIVES_TBL        1   $    D6FF        55039
 JUSTBOUNCEBACK        -   $    9D1A        40218
 JUSTMOVEUP            2   $    A0FE        41214
 LANE_SPIKE_HEIGHT    14   $     3AC          940
 LANGUAGE_BASE_TBL     2   $    D6B3        54963
 LASTBYTE              1   $    DFF9        57337
 LAST_GREEN            5   $      63           99
 LAST_SHAPE_LEVEL      2   $      5F           95
 LD_STARTBONUS         2   $    91B5        37301
 LEDS_FLIP             8   $    60E0        24800
 LETHAL_DISTANCE       5   $     157          343
 LETHAL_DISTANCE_TABLE    1   $    945D        37981
 LEVELNUMOFFSET        1   $    CE2C        52780
 LEVELSELBOXPTS        2   $    B0A3        45219
 LEVELSELECTCOLORS     1   $    C22D        49709
 LEVEL_ALREADY_MAXED    1   $    C998        51608
 LEVEL_OUTSIDE_RANGE    2   $    9313        37651
 LEV_ANGLE             1   $    BB7C        47996
 LEV_FSCALE            1   $    BCDC        48348
 LEV_FSCALE2           1   $    BCEC        48364
 LEV_OPEN              2   $    BCCC        48332
 LEV_REMAP             1   $    BC7C        48252
 LEV_SCALE             1   $    BC8C        48268
 LEV_X                 3   $    B97C        47484
 LEV_Y                 3   $    BA7C        47740
 LEV_Y2D               2   $    BCAC        48300
 LEV_Y2DB              2   $    BCBC        48316
 LEV_Y3D               1   $    BC9C        48284
 LIFE_SETTINGS         2   $     71E         1822
 LOADLEVELPARAMS       3   $    92C5        37573
 LOC9A2A               1   $    9A2A        39466
 LOC9A3D               3   $    9A3D        39485
 LOC9A05               1   $    9A05        39429
 LOC9A5B               1   $    9A5B        39515
 LOC9A6A               1   $    9A6A        39530
 LOC9A7A               3   $    9A7A        39546
 LOC9A7F               1   $    9A7F        39551
 LOC9A10               1   $    9A10        39440
 LOC9A20               3   $    9A20        39456
 LOC9A26               1   $    9A26        39462
 LOC9A53               1   $    9A53        39507
 LOC9A61               3   $    9A61        39521
 LOC9A82               2   $    9A82        39554
 LOC9A87               4   $    9A87        39559
 LOC9A88               1   $    9A88        39560
 LOC9AC7               1   $    9AC7        39623
 LOC9AD0               1   $    9AD0        39632
 LOC9AD5               1   $    9AD5        39637
 LOC9ADE               1   $    9ADE        39646
 LOC9AEE               3   $    9AEE        39662
 LOC9AF1               2   $    9AF1        39665
 LOC9AF6               1   $    9AF6        39670
 LOC9B1B               1   $    9B1B        39707
 LOC9B6F               1   $    9B6F        39791
 LOC9B07               1   $    9B07        39687
 LOC9B7C               4   $    9B7C        39804
 LOC9B8C               1   $    9B8C        39820
 LOC9B18               1   $    9B18        39704
 LOC9B28               1   $    9B28        39720
 LOC9B52               1   $    9B52        39762
 LOC9B56               1   $    9B56        39766
 LOC9B88               1   $    9B88        39816
 LOC9B97               2   $    9B97        39831
 LOC9C35               1   $    9C35        39989
 LOC9C37               1   $    9C37        39991
 LOC9CB5               2   $    9CB5        40117
 LOC9CC7               1   $    9CC7        40135
 LOC9CCD               1   $    9CCD        40141
 LOC9CD7               1   $    9CD7        40151
 LOC9CE4               2   $    9CE4        40164
 LOC9D3E               1   $    9D3E        40254
 LOC9D5E               1   $    9D5E        40286
 LOC9D7C               1   $    9D7C        40316
 LOC9D7E               1   $    9D7E        40318
 LOC9D51               2   $    9D51        40273
 LOC9D54               1   $    9D54        40276
 LOC9D90               1   $    9D90        40336
 LOC9D91               1   $    9D91        40337
 LOC9DBB               1   $    9DBB        40379
 LOC9DE3               1   $    9DE3        40419
 LOC9DEB               3   $    9DEB        40427
 LOC9DEE               1   $    9DEE        40430
 LOC9E1B               1   $    9E1B        40475
 LOC9E5B               2   $    9E5B        40539
 LOC9E5F               1   $    9E5F        40543
 LOC9E8C               1   $    9E8C        40588
 LOC9E9E               1   $    9E9E        40606
 LOC9E26               3   $    9E26        40486
 LOC9E47               3   $    9E47        40519
 LOC9E79               1   $    9E79        40569
 LOC9E86               1   $    9E86        40582
 LOC9EAA               1   $    9EAA        40618
 LOC9EC6               1   $    9EC6        40646
 LOC9EC9               1   $    9EC9        40649
 LOC9ED6               3   $    9ED6        40662
 LOC9EEB               1   $    9EEB        40683
 LOC9EEE               1   $    9EEE        40686
 LOC9F2A               2   $    9F2A        40746
 LOC9F3A               1   $    9F3A        40762
 LOC9F3D               1   $    9F3D        40765
 LOC9F5B               1   $    9F5B        40795
 LOC9F5E               2   $    9F5E        40798
 LOC9F5F               2   $    9F5F        40799
 LOC9F7D               1   $    9F7D        40829
 LOC9F8A               4   $    9F8A        40842
 LOC9F19               1   $    9F19        40729
 LOC9F26               1   $    9F26        40742
 LOC9F29               1   $    9F29        40745
 LOC9F37               1   $    9F37        40759
 LOC9F40               1   $    9F40        40768
 LOC9F43               1   $    9F43        40771
 LOC9F55               1   $    9F55        40789
 LOC9F58               1   $    9F58        40792
 LOC9F80               3   $    9F80        40832
 LOC9F81               4   $    9F81        40833
 LOC9F96               1   $    9F96        40854
 LOC9F99               1   $    9F99        40857
 LOC9FAF               1   $    9FAF        40879
 LOC9FB4               1   $    9FB4        40884
 LOC9FBC               3   $    9FBC        40892
 LOC9FD6               1   $    9FD6        40918
 LOC9FE6               1   $    9FE6        40934
 LOC9FFD               1   $    9FFD        40957
 LOC90BC               1   $    90BC        37052
 LOC90C9               1   $    90C9        37065
 LOC90E0               1   $    90E0        37088
 LOC90E5               1   $    90E5        37093
 LOC90EA               2   $    90EA        37098
 LOC90F4               1   $    90F4        37108
 LOC90FC               1   $    90FC        37116
 LOC91AE               1   $    91AE        37294
 LOC92F6               1   $    92F6        37622
 LOC96B9               1   $    96B9        38585
 LOC96ED               1   $    96ED        38637
 LOC96F3               1   $    96F3        38643
 LOC96F4               2   $    96F4        38644
 LOC97B6               1   $    97B6        38838
 LOC97C5               1   $    97C5        38853
 LOC97CE               1   $    97CE        38862
 LOC97DB               2   $    97DB        38875
 LOC97F5               1   $    97F5        38901
 LOC97F7               3   $    97F7        38903
 LOC97F8               1   $    97F8        38904
 LOC97FE               1   $    97FE        38910
 LOC98A1               1   $    98A1        39073
 LOC98B7               2   $    98B7        39095
 LOC98BE               1   $    98BE        39102
 LOC98C2               1   $    98C2        39106
 LOC98D9               1   $    98D9        39129
 LOC98EE               4   $    98EE        39150
 LOC99C3               1   $    99C3        39363
 LOC99D6               1   $    99D6        39382
 LOC99DC               2   $    99DC        39388
 LOC99E7               1   $    99E7        39399
 LOC99F0               1   $    99F0        39408
 LOC99F8               1   $    99F8        39416
 LOC99FF               1   $    99FF        39423
 LOC915D               1   $    915D        37213
 LOC930A               1   $    930A        37642
 LOC934A               1   $    934A        37706
 LOC934D               1   $    934D        37709
 LOC968F_0A            1   $    96DB        38619
 LOC968F_0C            1   $    9700        38656
 LOC968F_02            1   $    96C4        38596
 LOC968F_04            1   $    96B7        38583
 LOC968F_06            1   $    96AB        38571
 LOC968F_08            1   $    96E2        38626
 LOC969D_02_0A         2   $    96C8        38600
 LOC969D_04_06         2   $    96CB        38603
 LOC969D_08_0C         2   $    96C7        38599
 LOC969E               2   $    969E        38558
 LOC974F               1   $    974F        38735
 LOC975B               1   $    975B        38747
 LOC976E               2   $    976E        38766
 LOC979B               1   $    979B        38811
 LOC979D               3   $    979D        38813
 LOC980E               1   $    980E        38926
 LOC989E               3   $    989E        39070
 LOC994D               3   $    994D        39245
 LOC996C               2   $    996C        39276
 LOC999D               1   $    999D        39325
 LOC9111               1   $    9111        37137
 LOC9144               1   $    9144        37188
 LOC9164               1   $    9164        37220
 LOC9169               1   $    9169        37225
 LOC9176               1   $    9176        37238
 LOC9197               1   $    9197        37271
 LOC9319               2   $    9319        37657
 LOC9360               1   $    9360        37728
 LOC9677               1   $    9677        38519
 LOC9683               1   $    9683        38531
 LOC9690               2   $    9690        38544
 LOC9708               1   $    9708        38664
 LOC9748               1   $    9748        38728
 LOC9765               1   $    9765        38757
 LOC9768               1   $    9768        38760
 LOC9770               1   $    9770        38768
 LOC9786               1   $    9786        38790
 LOC9799               1   $    9799        38809
 LOC9804               1   $    9804        38916
 LOC9825               1   $    9825        38949
 LOC9833               1   $    9833        38963
 LOC9842               2   $    9842        38978
 LOC9866               1   $    9866        39014
 LOC9881               1   $    9881        39041
 LOC9906               1   $    9906        39174
 LOC9909               1   $    9909        39177
 LOC9923               1   $    9923        39203
 LOC9945               2   $    9945        39237
 LOC9952               1   $    9952        39250
 LOCA0AD               1   $    A0AD        41133
 LOCA0C2               2   $    A0C2        41154
 LOCA0EB               2   $    A0EB        41195
 LOCA0F6               2   $    A0F6        41206
 LOCA1A8               1   $    A1A8        41384
 LOCA1BD               1   $    A1BD        41405
 LOCA1C0               1   $    A1C0        41408
 LOCA1DC               1   $    A1DC        41436
 LOCA1DF               2   $    A1DF        41439
 LOCA1E4               1   $    A1E4        41444
 LOCA1F9               2   $    A1F9        41465
 LOCA1FA               1   $    A1FA        41466
 LOCA2A2               1   $    A2A2        41634
 LOCA2A5               2   $    A2A5        41637
 LOCA3A7               1   $    A3A7        41895
 LOCA3AF               1   $    A3AF        41903
 LOCA3C5               1   $    A3C5        41925
 LOCA3CA               2   $    A3CA        41930
 LOCA3D4               1   $    A3D4        41940
 LOCA3D6               1   $    A3D6        41942
 LOCA3E2               1   $    A3E2        41954
 LOCA3F2               1   $    A3F2        41970
 LOCA3FA               1   $    A3FA        41978
 LOCA4BE               3   $    A4BE        42174
 LOCA4C1               1   $    A4C1        42177
 LOCA4D2               1   $    A4D2        42194
 LOCA4DA               1   $    A4DA        42202
 LOCA4E2               1   $    A4E2        42210
 LOCA4E9               4   $    A4E9        42217
 LOCA4EB               2   $    A4EB        42219
 LOCA04F               2   $    A04F        41039
 LOCA4F1               1   $    A4F1        42225
 LOCA5A3               1   $    A5A3        42403
 LOCA5AC               1   $    A5AC        42412
 LOCA5B5               2   $    A5B5        42421
 LOCA5CA               5   $    A5CA        42442
 LOCA5CB               2   $    A5CB        42443
 LOCA5EB               1   $    A5EB        42475
 LOCA5F3               1   $    A5F3        42483
 LOCA6A8               1   $    A6A8        42664
 LOCA6A9               1   $    A6A9        42665
 LOCA6C1               1   $    A6C1        42689
 LOCA6C4               1   $    A6C4        42692
 LOCA6CD               2   $    A6CD        42701
 LOCA6E6               1   $    A6E6        42726
 LOCA6E9               1   $    A6E9        42729
 LOCA06F               3   $    A06F        41071
 LOCA6F2               2   $    A6F2        42738
 LOCA7BC               1   $    A7BC        42940
 LOCA7BD               1   $    A7BD        42941
 LOCA7C1               1   $    A7C1        42945
 LOCA7D2               1   $    A7D2        42962
 LOCA7DF               1   $    A7DF        42975
 LOCA7ED               1   $    A7ED        42989
 LOCA7F9               1   $    A7F9        43001
 LOCA7FB               2   $    A7FB        43003
 LOCA7FE               1   $    A7FE        43006
 LOCA8B4               5   $    A8B4        43188
 LOCA8D8               3   $    A8D8        43224
 LOCA8E7               1   $    A8E7        43239
 LOCA8EA               1   $    A8EA        43242
 LOCA8FE               1   $    A8FE        43262
 LOCA9A7               2   $    A9A7        43431
 LOCA9A9               1   $    A9A9        43433
 LOCA9B5               2   $    A9B5        43445
 LOCA9CB               1   $    A9CB        43467
 LOCA9D7               1   $    A9D7        43479
 LOCA9DC               1   $    A9DC        43484
 LOCA9EE               1   $    A9EE        43502
 LOCA9FB               1   $    A9FB        43515
 LOCA9FC               2   $    A9FC        43516
 LOCA22F               1   $    A22F        41519
 LOCA24F               1   $    A24F        41551
 LOCA027               3   $    A027        40999
 LOCA33A               1   $    A33A        41786
 LOCA34B               1   $    A34B        41803
 LOCA34D               2   $    A34D        41805
 LOCA36F               1   $    A36F        41839
 LOCA037               1   $    A037        41015
 LOCA38E               1   $    A38E        41870
 LOCA040               1   $    A040        41024
 LOCA44E               1   $    A44E        42062
 LOCA45E               1   $    A45E        42078
 LOCA047               1   $    A047        41031
 LOCA47B               1   $    A47B        42107
 LOCA48E               2   $    A48E        42126
 LOCA054               1   $    A054        41044
 LOCA57B               1   $    A57B        42363
 LOCA57E               2   $    A57E        42366
 LOCA63F               1   $    A63F        42559
 LOCA65A               1   $    A65A        42586
 LOCA65B               1   $    A65B        42587
 LOCA69A               1   $    A69A        42650
 LOCA70D               1   $    A70D        42765
 LOCA75C               1   $    A75C        42844
 LOCA75D               3   $    A75D        42845
 LOCA77E               1   $    A77E        42878
 LOCA78B               1   $    A78B        42891
 LOCA80D               1   $    A80D        43021
 LOCA81C               1   $    A81C        43036
 LOCA81E               4   $    A81E        43038
 LOCA85D               1   $    A85D        43101
 LOCA87C               2   $    A87C        43132
 LOCA088               2   $    A088        41096
 LOCA97C               2   $    A97C        43388
 LOCA98F               2   $    A98F        43407
 LOCA193               1   $    A193        41363
 LOCA210               1   $    A210        41488
 LOCA262               1   $    A262        41570
 LOCA268               2   $    A268        41576
 LOCA274               1   $    A274        41588
 LOCA278               1   $    A278        41592
 LOCA309               1   $    A309        41737
 LOCA325               1   $    A325        41765
 LOCA343               1   $    A343        41795
 LOCA352               1   $    A352        41810
 LOCA416               2   $    A416        42006
 LOCA422               1   $    A422        42018
 LOCA441               1   $    A441        42049
 LOCA444               2   $    A444        42052
 LOCA447               1   $    A447        42055
 LOCA448               1   $    A448        42056
 LOCA456               1   $    A456        42070
 LOCA467               1   $    A467        42087
 LOCA475               1   $    A475        42101
 LOCA491               1   $    A491        42129
 LOCA503               1   $    A503        42243
 LOCA504               2   $    A504        42244
 LOCA516               1   $    A516        42262
 LOCA522               1   $    A522        42274
 LOCA526               1   $    A526        42278
 LOCA529               1   $    A529        42281
 LOCA551               1   $    A551        42321
 LOCA554               1   $    A554        42324
 LOCA561               2   $    A561        42337
 LOCA581               1   $    A581        42369
 LOCA593               2   $    A593        42387
 LOCA622               1   $    A622        42530
 LOCA631               1   $    A631        42545
 LOCA634               1   $    A634        42548
 LOCA651               2   $    A651        42577
 LOCA688               1   $    A688        42632
 LOCA710               1   $    A710        42768
 LOCA719               2   $    A719        42777
 LOCA721               1   $    A721        42785
 LOCA772               1   $    A772        42866
 LOCA784               2   $    A784        42884
 LOCA789               1   $    A789        42889
 LOCA830               2   $    A830        43056
 LOCA863               2   $    A863        43107
 LOCA900               1   $    A900        43264
 LOCA908               1   $    A908        43272
 LOCA920               1   $    A920        43296
 LOCA930               1   $    A930        43312
 LOCA943               1   $    A943        43331
 LOCA954               1   $    A954        43348
 LOCA972               1   $    A972        43378
 LOCAA02               1   $    AA02        43522
 LOCAA05               1   $    AA05        43525
 LOCAA5A               1   $    AA5A        43610
 LOCAA6F               1   $    AA6F        43631
 LOCAA8F               1   $    AA8F        43663
 LOCAA9E               1   $    AA9E        43678
 LOCAA13               1   $    AA13        43539
 LOCAA23               2   $    AA23        43555
 LOCAA33               1   $    AA33        43571
 LOCAA54               1   $    AA54        43604
 LOCAA62               1   $    AA62        43618
 LOCAA69               1   $    AA69        43625
 LOCAA79               1   $    AA79        43641
 LOCAA97               1   $    AA97        43671
 LOCAACB               2   $    AACB        43723
 LOCAACE               2   $    AACE        43726
 LOCAAE2               1   $    AAE2        43746
 LOCAAF2               1   $    AAF2        43762
 LOCAAF3               2   $    AAF3        43763
 LOCAAFE               1   $    AAFE        43774
 LOCAB3B               1   $    AB3B        43835
 LOCAB32               1   $    AB32        43826
 LOCAB72               1   $    AB72        43890
 LOCAB98               1   $    AB98        43928
 LOCABC2               1   $    ABC2        43970
 LOCABCD               2   $    ABCD        43981
 LOCABE1               2   $    ABE1        44001
 LOCABFF               1   $    ABFF        44031
 LOCAC3E               1   $    AC3E        44094
 LOCAC5E               2   $    AC5E        44126
 LOCAC07               1   $    AC07        44039
 LOCAC9A               1   $    AC9A        44186
 LOCAC9B               3   $    AC9B        44187
 LOCAC9D               1   $    AC9D        44189
 LOCAC34               1   $    AC34        44084
 LOCAC50               1   $    AC50        44112
 LOCAC80               1   $    AC80        44160
 LOCACBF               1   $    ACBF        44223
 LOCACE1               1   $    ACE1        44257
 LOCACE6               1   $    ACE6        44262
 LOCACEC               1   $    ACEC        44268
 LOCACF4               1   $    ACF4        44276
 LOCAD06               1   $    AD06        44294
 LOCAD6B               1   $    AD6B        44395
 LOCAD15               2   $    AD15        44309
 LOCAD22               2   $    AD22        44322
 LOCAD68               2   $    AD68        44392
 LOCAD82               2   $    AD82        44418
 LOCAD93               1   $    AD93        44435
 LOCAD99               2   $    AD99        44441
 LOCADC1               1   $    ADC1        44481
 LOCADC7               1   $    ADC7        44487
 LOCADCD               2   $    ADCD        44493
 LOCADE3               1   $    ADE3        44515
 LOCADE5               1   $    ADE5        44517
 LOCADEA               1   $    ADEA        44522
 LOCAE1C               1   $    AE1C        44572
 LOCAE4E               1   $    AE4E        44622
 LOCAE64               1   $    AE64        44644
 LOCAE82               1   $    AE82        44674
 LOCAECA               1   $    AECA        44746
 LOCAEE3               1   $    AEE3        44771
 LOCAEE8               1   $    AEE8        44776
 LOCAEF8               1   $    AEF8        44792
 LOCAF0E               1   $    AF0E        44814
 LOCAF03               1   $    AF03        44803
 LOCAF3F               1   $    AF3F        44863
 LOCAF6E               2   $    AF6E        44910
 LOCAF6F               1   $    AF6F        44911
 LOCAF26               1   $    AF26        44838
 LOCAF71               2   $    AF71        44913
 LOCAF81               1   $    AF81        44929
 LOCAFA1               1   $    AFA1        44961
 LOCAFBC               1   $    AFBC        44988
 LOCAFC8               1   $    AFC8        45000
 LOCAFCB               1   $    AFCB        45003
 LOCAFD4               1   $    AFD4        45012
 LOCAFDB               1   $    AFDB        45019
 LOCAFE1               4   $    AFE1        45025
 LOCAFE9               1   $    AFE9        45033
 LOCB0AB               2   $    B0AB        45227
 LOCB0B9               1   $    B0B9        45241
 LOCB0C1               2   $    B0C1        45249
 LOCB0DC               1   $    B0DC        45276
 LOCB0E6               1   $    B0E6        45286
 LOCB1B6               1   $    B1B6        45494
 LOCB1C7               2   $    B1C7        45511
 LOCB1E4               1   $    B1E4        45540
 LOCB1EE               1   $    B1EE        45550
 LOCB1F2               1   $    B1F2        45554
 LOCB1F5               2   $    B1F5        45557
 LOCB2CF               1   $    B2CF        45775
 LOCB2D5               1   $    B2D5        45781
 LOCB2DE               1   $    B2DE        45790
 LOCB2EF               1   $    B2EF        45807
 LOCB2F5               1   $    B2F5        45813
 LOCB3BB               2   $    B3BB        46011
 LOCB3C6               1   $    B3C6        46022
 LOCB3D3               2   $    B3D3        46035
 LOCB3D6               1   $    B3D6        46038
 LOCB3E9               3   $    B3E9        46057
 LOCB4B0               1   $    B4B0        46256
 LOCB4BA               1   $    B4BA        46266
 LOCB4C0               1   $    B4C0        46272
 LOCB5AC               3   $    B5AC        46508
 LOCB5B6               1   $    B5B6        46518
 LOCB5D2               1   $    B5D2        46546
 LOCB5D6               1   $    B5D6        46550
 LOCB6D5               1   $    B6D5        46805
 LOCB6FA               2   $    B6FA        46842
 LOCB7A2               1   $    B7A2        47010
 LOCB7BD               1   $    B7BD        47037
 LOCB7C9               1   $    B7C9        47049
 LOCB7D2               2   $    B7D2        47058
 LOCB7E4               2   $    B7E4        47076
 LOCB7E5               1   $    B7E5        47077
 LOCB8BA               1   $    B8BA        47290
 LOCB8E5               1   $    B8E5        47333
 LOCB15A               2   $    B15A        45402
 LOCB18F               2   $    B18F        45455
 LOCB20C               1   $    B20C        45580
 LOCB20D               1   $    B20D        45581
 LOCB28A               1   $    B28A        45706
 LOCB33F               1   $    B33F        45887
 LOCB34B               1   $    B34B        45899
 LOCB042               1   $    B042        45122
 LOCB42D               1   $    B42D        46125
 LOCB44B               3   $    B44B        46155
 LOCB45C               2   $    B45C        46172
 LOCB56A               3   $    B56A        46442
 LOCB60B               1   $    B60B        46603
 LOCB65C               1   $    B65C        46684
 LOCB65E               2   $    B65E        46686
 LOCB68B               1   $    B68B        46731
 LOCB74C               1   $    B74C        46924
 LOCB75F               1   $    B75F        46943
 LOCB77E               1   $    B77E        46974
 LOCB081               1   $    B081        45185
 LOCB82A               1   $    B82A        47146
 LOCB83D               1   $    B83D        47165
 LOCB84E               1   $    B84E        47182
 LOCB85F               1   $    B85F        47199
 LOCB95D               1   $    B95D        47453
 LOCB096               4   $    B096        45206
 LOCB97B               1   $    B97B        47483
 LOCB102               1   $    B102        45314
 LOCB115               1   $    B115        45333
 LOCB130               2   $    B130        45360
 LOCB131               1   $    B131        45361
 LOCB144               1   $    B144        45380
 LOCB156               1   $    B156        45398
 LOCB159               1   $    B159        45401
 LOCB166               1   $    B166        45414
 LOCB183               1   $    B183        45443
 LOCB209               1   $    B209        45577
 LOCB218               2   $    B218        45592
 LOCB230               2   $    B230        45616
 LOCB282               1   $    B282        45698
 LOCB323               1   $    B323        45859
 LOCB329               1   $    B329        45865
 LOCB332               1   $    B332        45874
 LOCB349               1   $    B349        45897
 LOCB367               1   $    B367        45927
 LOCB379               1   $    B379        45945
 LOCB382               1   $    B382        45954
 LOCB390               1   $    B390        45968
 LOCB401               2   $    B401        46081
 LOCB412               1   $    B412        46098
 LOCB414               1   $    B414        46100
 LOCB424               1   $    B424        46116
 LOCB427               1   $    B427        46119
 LOCB434               1   $    B434        46132
 LOCB445               1   $    B445        46149
 LOCB449               1   $    B449        46153
 LOCB465               1   $    B465        46181
 LOCB476               1   $    B476        46198
 LOCB487               1   $    B487        46215
 LOCB545               1   $    B545        46405
 LOCB549               1   $    B549        46409
 LOCB550               2   $    B550        46416
 LOCB557               1   $    B557        46423
 LOCB565               2   $    B565        46437
 LOCB585               1   $    B585        46469
 LOCB602               1   $    B602        46594
 LOCB634               2   $    B634        46644
 LOCB673               1   $    B673        46707
 LOCB675               2   $    B675        46709
 LOCB687               1   $    B687        46727
 LOCB709               1   $    B709        46857
 LOCB710               1   $    B710        46864
 LOCB724               1   $    B724        46884
 LOCB736               1   $    B736        46902
 LOCB754               1   $    B754        46932
 LOCB776               1   $    B776        46966
 LOCB781               1   $    B781        46977
 LOCB796               2   $    B796        46998
 LOCB811               1   $    B811        47121
 LOCB819               1   $    B819        47129
 LOCB857               2   $    B857        47191
 LOCB875               1   $    B875        47221
 LOCB888               1   $    B888        47240
 LOCB896               1   $    B896        47254
 LOCB922               1   $    B922        47394
 LOCB935               1   $    B935        47413
 LOCB944               3   $    B944        47428
 LOCB955               1   $    B955        47445
 LOCB967               2   $    B967        47463
 LOCB975               1   $    B975        47477
 LOCBD3E               3   $    BD3E        48446
 LOCBD5E               1   $    BD5E        48478
 LOCBD7B               1   $    BD7B        48507
 LOCBD8C               1   $    BD8C        48524
 LOCBD09               1   $    BD09        48393
 LOCBD23               1   $    BD23        48419
 LOCBD79               1   $    BD79        48505
 LOCBD90               1   $    BD90        48528
 LOCBDCB               2   $    BDCB        48587
 LOCBDD6               2   $    BDD6        48598
 LOCBE1A               1   $    BE1A        48666
 LOCBE1D               1   $    BE1D        48669
 LOCBE4B               1   $    BE4B        48715
 LOCBE5B               1   $    BE5B        48731
 LOCBE5D               1   $    BE5D        48733
 LOCBE26               1   $    BE26        48678
 LOCBE31               2   $    BE31        48689
 LOCBE33               1   $    BE33        48691
 LOCBE48               1   $    BE48        48712
 LOCBE54               1   $    BE54        48724
 LOCBEDB               1   $    BEDB        48859
 LOCBEE6               1   $    BEE6        48870
 LOCBF7D               1   $    BF7D        49021
 LOCBF11               1   $    BF11        48913
 LOCBF22               1   $    BF22        48930
 LOCBF38               1   $    BF38        48952
 LOCBF43               1   $    BF43        48963
 LOCBF56               1   $    BF56        48982
 LOCBF67               1   $    BF67        48999
 LOCBF88               1   $    BF88        49032
 LOCBFAF               1   $    BFAF        49071
 LOCBFB6               1   $    BFB6        49078
 LOCBFC4               1   $    BFC4        49092
 LOCC0B3               1   $    C0B3        49331
 LOCC0C0               1   $    C0C0        49344
 LOCC0C7               1   $    C0C7        49351
 LOCC0DC               1   $    C0DC        49372
 LOCC0E3               1   $    C0E3        49379
 LOCC0E7               1   $    C0E7        49383
 LOCC1C3               1   $    C1C3        49603
 LOCC2A4               1   $    C2A4        49828
 LOCC2C9               1   $    C2C9        49865
 LOCC2E4               1   $    C2E4        49892
 LOCC2F3               1   $    C2F3        49907
 LOCC2F5               1   $    C2F5        49909
 LOCC2FB               1   $    C2FB        49915
 LOCC3A1               1   $    C3A1        50081
 LOCC3B2               1   $    C3B2        50098
 LOCC3B9               1   $    C3B9        50105
 LOCC3BA               3   $    C3BA        50106
 LOCC3EE               1   $    C3EE        50158
 LOCC4A0               1   $    C4A0        50336
 LOCC4A3               1   $    C4A3        50339
 LOCC4AD               2   $    C4AD        50349
 LOCC4C4               1   $    C4C4        50372
 LOCC4C7               1   $    C4C7        50375
 LOCC4D1               2   $    C4D1        50385
 LOCC4E1               1   $    C4E1        50401
 LOCC5A4               1   $    C5A4        50596
 LOCC5B1               1   $    C5B1        50609
 LOCC5C1               2   $    C5C1        50625
 LOCC5C2               1   $    C5C2        50626
 LOCC5C8               1   $    C5C8        50632
 LOCC5D3               2   $    C5D3        50643
 LOCC5EC               1   $    C5EC        50668
 LOCC5EE               1   $    C5EE        50670
 LOCC5F2               1   $    C5F2        50674
 LOCC6C7               2   $    C6C7        50887
 LOCC6D2               1   $    C6D2        50898
 LOCC6E4               1   $    C6E4        50916
 LOCC7A0               1   $    C7A0        51104
 LOCC7BD               1   $    C7BD        51133
 LOCC7D9               1   $    C7D9        51161
 LOCC8B1               1   $    C8B1        51377
 LOCC8C4               1   $    C8C4        51396
 LOCC8CA               1   $    C8CA        51402
 LOCC8D2               3   $    C8D2        51410
 LOCC8D9               2   $    C8D9        51417
 LOCC8E3               3   $    C8E3        51427
 LOCC8EE               1   $    C8EE        51438
 LOCC9AC               1   $    C9AC        51628
 LOCC9DB               1   $    C9DB        51675
 LOCC9EA               1   $    C9EA        51690
 LOCC9F0               1   $    C9F0        51696
 LOCC11A               1   $    C11A        49434
 LOCC12D               1   $    C12D        49453
 LOCC12F               2   $    C12F        49455
 LOCC16B               1   $    C16B        49515
 LOCC28D               1   $    C28D        49805
 LOCC30D               1   $    C30D        49933
 LOCC34E               1   $    C34E        49998
 LOCC36E               1   $    C36E        50030
 LOCC39B               1   $    C39B        50075
 LOCC43C               2   $    C43C        50236
 LOCC46B               1   $    C46B        50283
 LOCC46F               1   $    C46F        50287
 LOCC47F               1   $    C47F        50303
 LOCC50D               1   $    C50D        50445
 LOCC54D               1   $    C54D        50509
 LOCC56B               1   $    C56B        50539
 LOCC60D               1   $    C60D        50701
 LOCC61A               1   $    C61A        50714
 LOCC62D               1   $    C62D        50733
 LOCC64C               1   $    C64C        50764
 LOCC66D               1   $    C66D        50797
 LOCC73B               2   $    C73B        51003
 LOCC73C               1   $    C73C        51004
 LOCC80D               1   $    C80D        51213
 LOCC83A               1   $    C83A        51258
 LOCC85F               1   $    C85F        51295
 LOCC86B               1   $    C86B        51307
 LOCC86E               1   $    C86E        51310
 LOCC89F               1   $    C89F        51359
 LOCC90B               1   $    C90B        51467
 LOCC96C               2   $    C96C        51564
 LOCC098               8   $    C098        49304
 LOCC115               1   $    C115        49429
 LOCC155               1   $    C155        49493
 LOCC158               1   $    C158        49496
 LOCC185               1   $    C185        49541
 LOCC235               1   $    C235        49717
 LOCC275               1   $    C275        49781
 LOCC286               1   $    C286        49798
 LOCC323               1   $    C323        49955
 LOCC339               2   $    C339        49977
 LOCC348               1   $    C348        49992
 LOCC350               1   $    C350        50000
 LOCC423               3   $    C423        50211
 LOCC453               2   $    C453        50259
 LOCC460               1   $    C460        50272
 LOCC471               2   $    C471        50289
 LOCC473               2   $    C473        50291
 LOCC528               1   $    C528        50472
 LOCC587               1   $    C587        50567
 LOCC590               2   $    C590        50576
 LOCC641               1   $    C641        50753
 LOCC649               1   $    C649        50761
 LOCC652               1   $    C652        50770
 LOCC669               1   $    C669        50793
 LOCC721               1   $    C721        50977
 LOCC772               3   $    C772        51058
 LOCC774               1   $    C774        51060
 LOCC818               2   $    C818        51224
 LOCC830               1   $    C830        51248
 LOCC835               1   $    C835        51253
 LOCC857               1   $    C857        51287
 LOCC871               1   $    C871        51313
 LOCC890               3   $    C890        51344
 LOCC891               1   $    C891        51345
 LOCC901               2   $    C901        51457
 LOCC919               1   $    C919        51481
 LOCC921               1   $    C921        51489
 LOCC967               1   $    C967        51559
 LOCCA38               2   $    CA38        51768
 LOCCA48               3   $    CA48        51784
 LOCCA57               2   $    CA57        51799
 LOCCA62               2   $    CA62        51810
 LOCCA66               1   $    CA66        51814
 LOCCA77               1   $    CA77        51831
 LOCCAA6               1   $    CAA6        51878
 LOCCABB               2   $    CABB        51899
 LOCCAC6               1   $    CAC6        51910
 LOCCAD1               1   $    CAD1        51921
 LOCCADC               5   $    CADC        51932
 LOCCAEE               4   $    CAEE        51950
 LOCCAEF               2   $    CAEF        51951
 LOCCB01               1   $    CB01        51969
 LOCCBCB               1   $    CBCB        52171
 LOCCBCC               3   $    CBCC        52172
 LOCCBCE               1   $    CBCE        52174
 LOCCCB0               1   $    CCB0        52400
 LOCCCB5               1   $    CCB5        52405
 LOCCCB9               2   $    CCB9        52409
 LOCCCBD               1   $    CCBD        52413
 LOCCCC1               3   $    CCC1        52417
 LOCCCC3              11   $    CCC3        52419
 LOCCCC7               1   $    CCC7        52423
 LOCCCCB               1   $    CCCB        52427
 LOCCCCC               3   $    CCCC        52428
 LOCCCCE               2   $    CCCE        52430
 LOCCCE1               1   $    CCE1        52449
 LOCCCE9               1   $    CCE9        52457
 LOCCCEA               1   $    CCEA        52458
 LOCCCEE               1   $    CCEE        52462
 LOCCCF2               1   $    CCF2        52466
 LOCCCF6               1   $    CCF6        52470
 LOCCCFA               1   $    CCFA        52474
 LOCCCFE               1   $    CCFE        52478
 LOCCD0A               1   $    CD0A        52490
 LOCCD0C               1   $    CD0C        52492
 LOCCD1C               1   $    CD1C        52508
 LOCCD02               1   $    CD02        52482
 LOCCD6B               1   $    CD6B        52587
 LOCCD7F               2   $    CD7F        52607
 LOCCD8B               1   $    CD8B        52619
 LOCCD8E               4   $    CD8E        52622
 LOCCD36               1   $    CD36        52534
 LOCCD43               1   $    CD43        52547
 LOCCD51               2   $    CD51        52561
 LOCCD54               1   $    CD54        52564
 LOCCD63               1   $    CD63        52579
 LOCCD94               1   $    CD94        52628
 LOCCD95               2   $    CD95        52629
 LOCCDA8               1   $    CDA8        52648
 LOCCDB0               1   $    CDB0        52656
 LOCCDB7               1   $    CDB7        52663
 LOCCDC6               1   $    CDC6        52678
 LOCCE6E               2   $    CE6E        52846
 LOCCE86               2   $    CE86        52870
 LOCCEC2               1   $    CEC2        52930
 LOCCEC3               1   $    CEC3        52931
 LOCCEC4               2   $    CEC4        52932
 LOCCEC5               1   $    CEC5        52933
 LOCCEC6               2   $    CEC6        52934
 LOCCEC7               1   $    CEC7        52935
 LOCCF4A               4   $    CF4A        53066
 LOCCF6F               1   $    CF6F        53103
 LOCCF7C               2   $    CF7C        53116
 LOCCF8B               3   $    CF8B        53131
 LOCCF24               1   $    CF24        53028
 LOCCF26               1   $    CF26        53030
 LOCCF30               1   $    CF30        53040
 LOCCF31               1   $    CF31        53041
 LOCCF48               1   $    CF48        53064
 LOCCF57               1   $    CF57        53079
 LOCCF63               1   $    CF63        53091
 LOCCF87               1   $    CF87        53127
 LOCCFA1               1   $    CFA1        53153
 LOCCFA9               4   $    CFA9        53161
 LOCCFB7               1   $    CFB7        53175
 LOCCFBD               1   $    CFBD        53181
 LOCCFD9               1   $    CFD9        53209
 LOCCFE1               3   $    CFE1        53217
 LOCCFFA               1   $    CFFA        53242
 LOCD000               1   $    D000        53248
 LOCD00D               1   $    D00D        53261
 LOCD01A               2   $    D01A        53274
 LOCD002               1   $    D002        53250
 LOCD02D               1   $    D02D        53293
 LOCD004               1   $    D004        53252
 LOCD7B8               2   $    D7B8        55224
 LOCD7C9               4   $    D7C9        55241
 LOCD7D7               1   $    D7D7        55255
 LOCD7DD               1   $    D7DD        55261
 LOCD8BA               1   $    D8BA        55482
 LOCD8C2               1   $    D8C2        55490
 LOCD8CA               1   $    D8CA        55498
 LOCD8CD               1   $    D8CD        55501
 LOCD8D9               1   $    D8D9        55513
 LOCD8DA               1   $    D8DA        55514
 LOCD8E9               1   $    D8E9        55529
 LOCD8ED               1   $    D8ED        55533
 LOCD8F7               3   $    D8F7        55543
 LOCD8FC               1   $    D8FC        55548
 LOCD9AB               1   $    D9AB        55723
 LOCD9AE               1   $    D9AE        55726
 LOCD9B3               1   $    D9B3        55731
 LOCD9B9               1   $    D9B9        55737
 LOCD9BC               1   $    D9BC        55740
 LOCD9DA               1   $    D9DA        55770
 LOCD9E0               1   $    D9E0        55776
 LOCD9E7               1   $    D9E7        55783
 LOCD9E9               1   $    D9E9        55785
 LOCD9F2               1   $    D9F2        55794
 LOCD022               1   $    D022        53282
 LOCD030               3   $    D030        53296
 LOCD76B               1   $    D76B        55147
 LOCD81F               1   $    D81F        55327
 LOCD86C               1   $    D86C        55404
 LOCD92F               1   $    D92F        55599
 LOCD93A               1   $    D93A        55610
 LOCD94D               1   $    D94D        55629
 LOCD95F               1   $    D95F        55647
 LOCD97A               1   $    D97A        55674
 LOCD98A               2   $    D98A        55690
 LOCD713               1   $    D713        55059
 LOCD717               1   $    D717        55063
 LOCD734               1   $    D734        55092
 LOCD771               1   $    D771        55153
 LOCD777               1   $    D777        55159
 LOCD791               3   $    D791        55185
 LOCD803               3   $    D803        55299
 LOCD804               1   $    D804        55300
 LOCD864               1   $    D864        55396
 LOCD877               2   $    D877        55415
 LOCD886               1   $    D886        55430
 LOCD914               3   $    D914        55572
 LOCD919               1   $    D919        55577
 LOCD931               1   $    D931        55601
 LOCD953               1   $    D953        55635
 LOCDA06               1   $    DA06        55814
 LOCDA7A               1   $    DA7A        55930
 LOCDA8D               1   $    DA8D        55949
 LOCDA8F               1   $    DA8F        55951
 LOCDA14               1   $    DA14        55828
 LOCDA19               2   $    DA19        55833
 LOCDA32               1   $    DA32        55858
 LOCDA44               1   $    DA44        55876
 LOCDA49               1   $    DA49        55881
 LOCDA53               1   $    DA53        55891
 LOCDA58               1   $    DA58        55896
 LOCDA62               1   $    DA62        55906
 LOCDA76               1   $    DA76        55926
 LOCDA91               2   $    DA91        55953
 LOCDA96               1   $    DA96        55958
 LOCDAA9               1   $    DAA9        55977
 LOCDAD5               1   $    DAD5        56021
 LOCDAD8               1   $    DAD8        56024
 LOCDADC               1   $    DADC        56028
 LOCDAF0               1   $    DAF0        56048
 LOCDAF9               1   $    DAF9        56057
 LOCDB01               2   $    DB01        56065
 LOCDB4C               1   $    DB4C        56140
 LOCDB6E               1   $    DB6E        56174
 LOCDB8F               1   $    DB8F        56207
 LOCDB19               1   $    DB19        56089
 LOCDB88               2   $    DB88        56200
 LOCDBA2               1   $    DBA2        56226
 LOCDBD5               1   $    DBD5        56277
 LOCDBD6               1   $    DBD6        56278
 LOCDC7E               2   $    DC7E        56446
 LOCDC15               2   $    DC15        56341
 LOCDC19               2   $    DC19        56345
 LOCDC27               2   $    DC27        56359
 LOCDC38               1   $    DC38        56376
 LOCDC47               1   $    DC47        56391
 LOCDC78               1   $    DC78        56440
 LOCDC87               1   $    DC87        56455
 LOCDCA4               1   $    DCA4        56484
 LOCDCB5               1   $    DCB5        56501
 LOCDCC0               1   $    DCC0        56512
 LOCDCE1               1   $    DCE1        56545
 LOCDCFE               1   $    DCFE        56574
 LOCDD0C               1   $    DD0C        56588
 LOCDD8F               1   $    DD8F        56719
 LOCDD29               1   $    DD29        56617
 LOCDD34               1   $    DD34        56628
 LOCDD69               1   $    DD69        56681
 LOCDDB0               1   $    DDB0        56752
 LOCDDBA               1   $    DDBA        56762
 LOCDDDD               1   $    DDDD        56797
 LOCDDDE               1   $    DDDE        56798
 LOCDDE3               2   $    DDE3        56803
 LOCDDF1               1   $    DDF1        56817
 LOCDDF3               2   $    DDF3        56819
 LOCDDF7               1   $    DDF7        56823
 LOCDDFB               1   $    DDFB        56827
 LOCDDFD               1   $    DDFD        56829
 LOCDDFF               1   $    DDFF        56831
 LOCDE1B               3   $    DE1B        56859
 LOCDE6B               2   $    DE6B        56939
 LOCDE8C               1   $    DE8C        56972
 LOCDE9C               1   $    DE9C        56988
 LOCDE11               3   $    DE11        56849
 LOCDE33               1   $    DE33        56883
 LOCDE46               1   $    DE46        56902
 LOCDE76               1   $    DE76        56950
 LOCDEAB               1   $    DEAB        57003
 LOCDEB3               1   $    DEB3        57011
 LOCDED8               1   $    DED8        57048
 LOCDEE6               1   $    DEE6        57062
 LOCDEEE               1   $    DEEE        57070
 LOCDEF0               1   $    DEF0        57072
 LOCDEF2               1   $    DEF2        57074
 LOCDEFF               1   $    DEFF        57087
 LOCDF7B               1   $    DF7B        57211
 LOCDF08               1   $    DF08        57096
 LOCDF12               1   $    DF12        57106
 LOCDF24               1   $    DF24        57124
 LOCDF69               1   $    DF69        57193
 LOCDF89               1   $    DF89        57225
 LOCDF92               1   $    DF92        57234
 LOCDFAC               1   $    DFAC        57260
 LOCDFBB               1   $    DFBB        57275
 LOCDFCD               1   $    DFCD        57293
 LOCDFDC               1   $    DFDC        57308
 LOCDFF8               -   $    DFF8        57336
 LOOKFORAVAILSHOT      1   $    A2D9        41689
 LOOK_FOR_ENEMY_TO_ZAP    1   $    A896        43158
 LOOPLOADCOLORS        1   $    C1A6        49574
 LTR_JSRTBL            3   $    31FA        12794
 MAKE_FLIPPER          1   $    9A9D        39581
 MAKE_FUSEBALL         1   $    9AB3        39603
 MAKE_PULSAR           1   $    9AA9        39593
 MAKE_SPIKER           1   $    9AB7        39607
 MAKE_TANKER           1   $    9ABB        39611
 MAXACTIVEENEMIES     11   $     11C          284
 MAXACTIVEENEMIES_TABLE    1   $    9598        38296
 MAXENEMYSHOTS         6   $     11A          282
 MAXENEMYSHOTS_TABLE    1   $    9407        37895
 MAX_ACTIVE_ENEMIES    5   $      07            7
 MAX_CREDITS           2   $      28           40
 MAX_ENEMY_BY_TYPE     1   $     12E          302
 MAX_ENEMY_SHOTS       5   $      04            4
 MAX_FLIPPERS          1   $     12E          302
 MAX_FLIPPERS_TABLE    1   $    94D6        38102
 MAX_FUSEBALLS         1   $     132          306
 MAX_FUSEBALLS_TABLE    1   $    954E        38222
 MAX_LEVEL            24   $      63           99
 MAX_PLAYER_SHOTS     11   $      08            8
 MAX_PULSARS           1   $     12F          303
 MAX_PULSARS_TABLE     1   $    9529        38185
 MAX_SPIKERS           1   $     131          305
 MAX_SPIKERS_TABLE     1   $    94A5        38053
 MAX_TANKERS           1   $     130          304
 MAX_TANKERS_TABLE     1   $    9503        38147
 MAX_TOTAL_SHOTS       5   $      0C           12
 MAX_ZAP_USES          1   $      02            2
 MAYBE_INIT_HS         1   $    ABA2        43938
 MB_RD_H               5   $    6070        24688
 MB_RD_L               5   $    6060        24672
 MB_W_00               3   $    6080        24704
 MB_W_0A               -   $    608A        24714
 MB_W_0B               -   $    608B        24715
 MB_W_0C               4   $    608C        24716
 MB_W_0D               3   $    608D        24717
 MB_W_0E               5   $    608E        24718
 MB_W_0F               2   $    608F        24719
 MB_W_01               1   $    6081        24705
 MB_W_02               -   $    6082        24706
 MB_W_03               1   $    6083        24707
 MB_W_04               1   $    6084        24708
 MB_W_05               1   $    6085        24709
 MB_W_06               1   $    6086        24710
 MB_W_07               1   $    6087        24711
 MB_W_08               -   $    6088        24712
 MB_W_09               1   $    6089        24713
 MB_W_10               2   $    6090        24720
 MB_W_11               -   $    6091        24721
 MB_W_12               -   $    6092        24722
 MB_W_13               -   $    6093        24723
 MB_W_14               4   $    6094        24724
 MB_W_15               6   $    6095        24725
 MB_W_16               5   $    6096        24726
 MID_X                 4   $     435         1077
 MID_Y                 4   $     445         1093
 MIN_ENEMY_BY_TYPE     3   $     129          297
 MIN_FLIPPERS          1   $     129          297
 MIN_FLIPPERS_TABLE    1   $    94CD        38093
 MIN_FUSEBALLS         1   $     12D          301
 MIN_FUSEBALLS_TABLE    1   $    9541        38209
 MIN_PULSARS           1   $     12A          298
 MIN_PULSARS_TABLE     1   $    9520        38176
 MIN_SPIKERS           1   $     12C          300
 MIN_SPIKERS_TABLE     1   $    9489        38025
 MIN_TANKERS           1   $     12B          299
 MIN_TANKERS_TABLE     1   $    94EB        38123
 MORE_ENEMY_INFO      19   $     2CC          716
 MOVETOWARDSFAREND     3   $    9C99        40089
 MOVETOWARDSTOP        1   $    9C63        40035
 MOVEUP                1   $    A104        41220
 MOVE_ENEMIES          1   $    9B1E        39710
 MOVE_PLAYER           4   $    9749        38729
 MOVE_SHOTS            2   $    A18F        41359
 MSGEN1COIN1CRD        1   $    D059        53337
 MSGEN1COIN2CRD        1   $    D057        53335
 MSGEN2COIN1CRD        1   $    D05B        53339
 MSGEN2CRDMIN          1   $    D063        53347
 MSGENATARI            1   $    D05D        53341
 MSGENAVOIDSPK         1   $    D067        53351
 MSGENBONUS            1   $    D04B        53323
 MSGENBONUSEV          1   $    D065        53349
 MSGENBONUSSPC         1   $    D061        53345
 MSGENCREDITS          1   $    D05F        53343
 MSGENEXPERT           1   $    D049        53321
 MSGENFREEPLAY         1   $    D055        53333
 MSGENGAMEOVER         1   $    D031        53297
 MSGENHISCORES         1   $    D041        53313
 MSGENHOLE             1   $    D051        53329
 MSGENINITIALS         1   $    D03B        53307
 MSGENINSCOIN          1   $    D053        53331
 MSGENLEVEL            1   $    D04F        53327
 MSGENLEVELNS          1   $    D069        53353
 MSGENNOVICE           1   $    D047        53319
 MSGENPLAY             1   $    D039        53305
 MSGENPLAYER           1   $    D033        53299
 MSGENPLAYER2          1   $    D035        53301
 MSGENPRESSFIRE        1   $    D03F        53311
 MSGENRANKING          1   $    D043        53315
 MSGENRATESELF         1   $    D045        53317
 MSGENRECHARGE         1   $    D06B        53355
 MSGENSPINKNOB         1   $    D03D        53309
 MSGENSTART            1   $    D037        53303
 MSGENTIME             1   $    D04D        53325
 MSGS_DE               1   $    D0A9        53417
 MSGS_EN              31   $    D031        53297
 MSGS_ES               1   $    D0E5        53477
 MSGS_FR               1   $    D06D        53357
 NEXT_SLOT             3   $    9919        39193
 NMI_IRQ_BRK           2   $    D704        55044
 NOSHOT                6   $    A300        41728
 NOSPIKEHIT            2   $    A23E        41534
 NOSPIKEWARNING        2   $    A612        42514
 NOTPULSED             4   $    9D04        40196
 NOT_AT_TOP_YET        1   $    9C83        40067
 NO_TANKER_SPLIT       3   $    9C96        40086
 NUMBEROFSTARTENTRIES    2   $      1C           28
 NUMENEMIESINTUBE      6   $     108          264
 NUMENEMIESONTOP       6   $     109          265
 N_ENEMY_BY_TYPE       5   $     142          322
 N_FLIPPERS            1   $     142          322
 N_FUSEBALLS           1   $     146          326
 N_PULSARS             2   $     143          323
 N_SPIKERS             1   $     145          325
 N_TANKERS             1   $     144          324
 ON_TIME_H             1   $     408         1032
 ON_TIME_L             2   $     406         1030
 ON_TIME_M             1   $     407         1031
 OPEN_LEVEL           13   $     111          273
 OPEN_LEVEL_NOWRAP     2   $    A7BB        42939
 OPTIMIZE              2   $      00            0
 OPTSW1                3   $     D00         3328
 OPTSW2                2   $     E00         3584
 OPTSW2_SHADOW         7   $      0A           10
 OTHERPLAYERSTATE      2   $     3BC          956
 P1SCALEOFF            1   $    CDF0        52720
 P1SCOREOFF            1   $    CDF2        52722
 P1SCOREPOS            1   $    A97D        43389
 P1SHIPOFF             1   $    CE08        52744
 P1_LEVEL              8   $      46           70
 P1_LIVES              9   $      48           72
 P1_SCORE_H            6   $      42           66
 P1_SCORE_L            9   $      40           64
 P1_SCORE_M            5   $      41           65
 P1_STARTCHOICE        5   $     102          258
 P2SCALEOFF            1   $    CE42        52802
 P2SCOREOFF            1   $    CE44        52804
 P2SCOREPOS            -   $    A97E        43390
 P2SHIPOFF             1   $    CE5A        52826
 P2_LEVEL              -   $      47           71
 P2_LIVES              2   $      49           73
 P2_SCORE_H            3   $      45           69
 P2_SCORE_L            3   $      43           67
 P2_SCORE_M            2   $      44           68
 P2_STARTCHOICE        -   $     103          259
 PADLENGTH             2   $      00            0
 PARAMETERLOOP         1   $    92DA        37594
 PARAMETERSTABLE       5   $    9607        38407
 PARAMETERSTABLE_43    1   $    9475        38005
 PARAMETERSTABLE_47    1   $    9481        38017
 PARAMETERTABLELENGTH    1   $      6F          111
 PCODEDISPATCH         2   $    9BA2        39842
 PCODEMAINLOOP         1   $    9B3A        39738
 PCODEPROGRAM         11   $    A0F7        41207
 PCODE_PC             20   $     10B          267
 PCODE_RUN             4   $     10A          266
 PCOP_AIMTOWARDSPLAYERLR    -   $      24           36
 PCOP_BRANCHONZERO     1   $      1A           26
 PCOP_CHECKGRABPLAYER    -   $      18           24
 PCOP_CHECKIFPASTSPIKE    -   $      1C           28
 PCOP_CHECKIFPULSING    -   $      26           38
 PCOP_CHECKPLAYERCOLL    -   $      20           32
 PCOP_CONTFINISHFLIP    1   $      14           20
 PCOP_DECBRANCHIFELSE    1   $      08            8
 PCOP_FUSEBALLMOVE     -   $      1E           30
 PCOP_GETGAMESTATE     -   $      10           16
 PCOP_HALT             4   $      00            0
 PCOP_JUMP             4   $      06            6
 PCOP_MOVETOWARDSTOP    3   $      0C           12
 PCOP_NOP              -   $      0A           10
 PCOP_PULSARMOVE       -   $      22           34
 PCOP_REVERSELEFTRIGHTDIR    -   $      16           22
 PCOP_SKIP2IFZERO      1   $      04            4
 PCOP_SPIKERSTUFF      1   $      0E           14
 PCOP_STARTFLIP        1   $      12           18
 PCOP_STORE            1   $      02            2
 PC_AIMTOWARDSPLAYERLR    3   $    9D67        40295
 PC_BRANCHONZERO       1   $    9BFA        39930
 PC_CHECKGRABPLAYER    1   $    9E2F        40495
 PC_CHECKIFPASTSPIKE    1   $    9C21        39969
 PC_CHECKIFPULSING     1   $    9C3B        39995
 PC_CHECKPLAYERCOLL    1   $    9E48        40520
 PC_CONTFINISHFLIP     1   $    9D82        40322
 PC_DECBRANCHELSESKIP    1   $    9C0C        39948
 PC_FUSEBALLMOVE       1   $    9EF1        40689
 PC_GETGAMESTATE       1   $    9BDD        39901
 PC_HALT               1   $    9BCA        39882
 PC_JUMP               2   $    9C17        39959
 PC_MOVETOWARDSTOP     1   $    9C58        40024
 PC_NOP                1   $    9BCF        39887
 PC_PULSARMOVE         1   $    9CB6        40118
 PC_REVERSELEFTRIGHTDIR    2   $    9C4F        40015
 PC_SKIP2IFZERO        1   $    9BEE        39918
 PC_SPIKERSTUFF        1   $    9FC4        40900
 PC_STARTFLIP          1   $    9E5C        40540
 PC_STORE              1   $    9BD0        39888
 PENDING_SEG          10   $     203          515
 PENDING_VID          11   $     243          579
 PIECES_DEATH          2   $    A347        41799
 PLAYERLEVELSELECT     1   $    90C4        37060
 PLAYEROUTOFLIVES      2   $    C9D1        51665
 PLAYERSHOTCOUNT       7   $     135          309
 PLAYERSHOTPOSITIONS   14   $     2D3          723
 PLAYERSHOTSEGMENTS    6   $     2AD          685
 PLAYERSTATE           3   $     3AA          938
 PLAYERSTATELEN        1   $      12           18
 PLAYER_ALONG         28   $     202          514
 PLAYER_SEG           24   $     200          512
 PLAYER_STATE         21   $     201          513
 PLAY_TIME_H           2   $     40B         1035
 PLAY_TIME_L           2   $     409         1033
 PLAY_TIME_M           2   $     40A         1034
 PLUSMINUS_7           3   $    A69B        42651
 POKEY1                7   $    60C0        24768
 POKEY1_RAND          16   $    60CA        24778
 POKEY2                3   $    60D0        24784
 POKEY2_RAND          13   $    60DA        24794
 PULSARANIMFRAMES      1   $    B755        46933
 PULSAR_FIRE           4   $     16D          365
 PULSAR_FIRE_TABLE     1   $    95EF        38383
 PULSAR_FLIPRATE       1   $      B2          178
 PULSAR_FLIPRATE_TABLE    1   $    9563        38243
 PULSE_BEAT            5   $     147          327
 PULSE_BEAT_TABLE      1   $    9469        37993
 PULSING              11   $     148          328
 PURPLE                6   $      08            8
 READ_OPTSWS           2   $    D6BB        54971
 RED                   8   $      0C           12
 REMOVE_LANGUAGES     27   $      00            0
 REMOVE_SELFTEST       3   $      00            0
 RESET                 3   $    D93F        55615
 RESETGAMEELEMENTS     1   $    902B        36907
 REV_IF_EDGE           1   $    9EAB        40619
 RGR_PT_INX            2   $      99          153
 RUN_LONGER            1   $    A879        43129
 SCALEOFFSET           1   $    CDDE        52702
 SCOREBYTYPE           1   $    CA91        51857
 SCORESOFFSET          1   $    CDE2        52706
 SECS_AVG_H            1   $     414         1044
 SECS_AVG_L            1   $     412         1042
 SECS_AVG_M            1   $     413         1043
 SELFRATE_MSGS         1   $    B09B        45211
 SELFTESTROM           1   $    DA0A        55818
 SELFTEST_0            1   $    DB5A        56154
 SELFTEST_1            1   $    DBF7        56311
 SELFTEST_2            1   $    DB84        56196
 SELFTEST_3            1   $    DB9A        56218
 SELFTEST_4            1   $    DB7E        56190
 SELFTEST_5            1   $    DB6F        56175
 SELFTEST_6            1   $    DB22        56098
 SETDECIMALIFPIRATED    1   $    C8F5        51445
 SETENEMYPARAMS        2   $    9382        37762
 SETLEVELCOLORS        3   $    C196        49558
 SHIPSLEFTOFFSET       1   $    CDE0        52704
 SHOT_DELAY            4   $     2A6          678
 SHOT_HOLDOFF          2   $     119          281
 SHOT_HOLDOFF_TABLE    1   $    93FA        37882
 SHOT_NOT_AVAIL        1   $    A2FD        41725
 SHOW_COIN_STUFF       2   $    AAA8        43688
 SHOW_PLAYER_STUFF     2   $    A97F        43391
 SHOW_PLYNO            2   $    AA92        43666
 SKIP_AIMING           1   $    9D3C        40252
 SMSG1COIN1CRD         -   $    D4F0        54512
 SMSG1COIN1CRDFR       -   $    D4FE        54526
 SMSG1COIN1CRDGER      -   $    D50F        54543
 SMSG1COIN1CRDSPN      -   $    D520        54560
 SMSG1COIN2CRD         -   $    D4AC        54444
 SMSG1COIN2CRDFR       -   $    D4BB        54459
 SMSG1COIN2CRDGER      -   $    D4CD        54477
 SMSG1COIN2CRDSPN      -   $    D4DE        54494
 SMSG2COIN1CRD         -   $    D531        54577
 SMSG2COIN1CRDFR       -   $    D540        54592
 SMSG2COIN1CRDGER      -   $    D552        54610
 SMSG2COIN1CRDSPN      -   $    D564        54628
 SMSG2CRDMIN           -   $    D5A9        54697
 SMSG2CRDMINFR         -   $    D5BA        54714
 SMSG2CRDMINGER        -   $    D5C9        54729
 SMSG2CRDMINSPN        -   $    D5DA        54746
 SMSGATARI             -   $    D576        54646
 SMSGAVOIDSPK          -   $    D61D        54813
 SMSGAVOIDSPKFR        -   $    D62A        54826
 SMSGAVOIDSPKGER       -   $    D63F        54847
 SMSGAVOIDSPKSPN       -   $    D652        54866
 SMSGBONUS             -   $    D418        54296
 SMSGBONUSEV           -   $    D5EA        54762
 SMSGBONUSEVFR         -   $    D5F7        54775
 SMSGBONUSEVGER        -   $    D605        54789
 SMSGBONUSEVSPN        -   $    D611        54801
 SMSGBONUSSPC          -   $    D5A2        54690
 SMSGCREDITS           -   $    D586        54662
 SMSGCREDITSGER        -   $    D58F        54671
 SMSGCREDITSSPN        -   $    D598        54680
 SMSGEXPERT            -   $    D400        54272
 SMSGEXPERTGER         -   $    D40F        54287
 SMSGEXPERTSPN         -   $    D407        54279
 SMSGFREEPLAY          -   $    D4A2        54434
 SMSGGAMEOVER          -   $    D15E        53598
 SMSGGAMEOVERFR        -   $    D168        53608
 SMSGGAMEOVERGER       -   $    D176        53622
 SMSGHISCORES          -   $    D334        54068
 SMSGHISCORESFR        -   $    D340        54080
 SMSGHISCORESGER       -   $    D351        54097
 SMSGHISCORESSPN       -   $    D35F        54111
 SMSGHOLE              -   $    D44D        54349
 SMSGHOLEFR            -   $    D452        54354
 SMSGHOLEGER           -   $    D45C        54364
 SMSGHOLESPN           -   $    D457        54359
 SMSGINITIALS          -   $    D204        53764
 SMSGINITIALSFR        -   $    D218        53784
 SMSGINITIALSGER       -   $    D231        53809
 SMSGINITIALSSPN       -   $    D24E        53838
 SMSGINSCOIN           -   $    D461        54369
 SMSGINSCOINFR         -   $    D46E        54382
 SMSGINSCOINGER        -   $    D484        54404
 SMSGINSCOINSPN        -   $    D493        54419
 SMSGLEVEL             -   $    D435        54325
 SMSGLEVELFR           -   $    D43B        54331
 SMSGLEVELGER          -   $    D442        54338
 SMSGLEVELNS           -   $    D663        54883
 SMSGLEVELNSFR         -   $    D669        54889
 SMSGLEVELNSGER        -   $    D670        54896
 SMSGLEVELNSSPN        -   $    D675        54901
 SMSGLEVELSPN          -   $    D447        54343
 SMSGNOVICE            -   $    D3E7        54247
 SMSGNOVICEGER         -   $    D3F6        54262
 SMSGNOVICESPN         -   $    D3EE        54254
 SMSGPLAY              -   $    D1EC        53740
 SMSGPLAYER            -   $    D190        53648
 SMSGPLAYERFR          -   $    D198        53656
 SMSGPLAYERGER         -   $    D1A0        53664
 SMSGPLAYERSPN         -   $    D1A9        53673
 SMSGPLAYFR            -   $    D1F1        53745
 SMSGPLAYGER           -   $    D1F7        53751
 SMSGPLAYSPN           -   $    D1FD        53757
 SMSGPRESSFIRE         -   $    D2CC        53964
 SMSGPRESSFIREFR       -   $    D2E1        53985
 SMSGPRESSFIREGER      -   $    D2FC        54012
 SMSGPRESSFIRESPN      -   $    D317        54039
 SMSGRANKING           -   $    D367        54119
 SMSGRANKINGFR         -   $    D37A        54138
 SMSGRANKINGGER        -   $    D38C        54156
 SMSGRANKINGSPN        -   $    D3A1        54177
 SMSGRATESELF          -   $    D3B1        54193
 SMSGRATESELFFR        -   $    D3BF        54207
 SMSGRATESELFGER       -   $    D3CC        54220
 SMSGRATESELFSPN       -   $    D3DB        54235
 SMSGRECHARGE          -   $    D67B        54907
 SMSGRECHARGEGER       -   $    D690        54928
 SMSGRECHARGESPN       -   $    D6A2        54946
 SMSGSPINKNOB          -   $    D262        53858
 SMSGSPINKNOBFR        -   $    D276        53878
 SMSGSPINKNOBGER       -   $    D295        53909
 SMSGSPINKNOBSPN       -   $    D2AF        53935
 SMSGSTART             -   $    D1B2        53682
 SMSGSTARTFR           -   $    D1BE        53694
 SMSGSTARTGER          -   $    D1D0        53712
 SMSGSTARTSPN          -   $    D1DF        53727
 SMSGTIME              -   $    D41E        54302
 SMSGTIMEFR            -   $    D423        54307
 SMSGTIMEGER           -   $    D429        54313
 SMSGTIMESPN           -   $    D42E        54318
 SOUND_PULSAR          2   $    CD06        52486
 SPARKLE               5   $      C0          192
 SPD_FLIPPER_LSB      13   $     160          352
 SPD_FLIPPER_LSB_TABLE    1   $    941B        37915
 SPD_FLIPPER_MSB       4   $     165          357
 SPD_FUSEBALL_LSB      2   $     164          356
 SPD_FUSEBALL_MSB      2   $     169          361
 SPD_PULSAR_LSB        1   $     161          353
 SPD_PULSAR_MSB        1   $     166          358
 SPD_SPIKER_LSB        3   $     163          355
 SPD_SPIKER_LSB_TABLE    1   $    944D        37965
 SPD_SPIKER_MSB        1   $     168          360
 SPD_TANKER_LSB        1   $     162          354
 SPD_TANKER_MSB        1   $     167          359
 SPIKERENTRY           -   $    A0F7        41207
 SPIKER_HOP            1   $    A028        41000
 SPINNER_CABTYP        5   $    60C8        24776
 SPINNER_SINE          2   $    DFE4        57316
 STARTLEVTBL           5   $    91FE        37374
 START_BONUS           3   $    91C6        37318
 STATE_1A              1   $    B0E7        45287
 STATE_1C              2   $    9108        37128
 STATE_10              1   $    AC3F        44095
 STATE_14              1   $    CA18        51736
 STATE_AFTER_DELAY     9   $      02            2
 STATE_DEATH           1   $    C9AF        51631
 STATE_DELAY           1   $    C800        51200
 STATE_DELAYTHENPLAY    1   $    C97B        51579
 STATE_ENTERINITIALS    1   $    AD6E        44398
 STATE_GAMESTARTUP     1   $    C90C        51468
 STATE_HIGHSCOREEXPLOSION    1   $    A618        42520
 STATE_LEVELBEGIN      2   $    C9F1        51697
 STATE_LEVELSELECT     1   $    9149        37193
 STATE_LEVELSTARTUP    1   $    C940        51520
 STATE_PLAYING         1   $    970B        38667
 STATE_SERVICEDISPLAY    1   $    D7E1        55265
 STATE_ZOOMINGDOWN     1   $    9729        38697
 STATE_ZOOMOFFEND      1   $    C98C        51596
 STATE_ZOOMONTONEW     1   $    904B        36939
 STICKTOTOPRAIL        1   $    9D2C        40236
 STRTBL                6   $      AC          172
 ST_GRID_VECTOR        2   $    334E        13134
 ST_VECTOR_2           2   $    330A        13066
 ST_VECTOR_4           2   $    32B6        12982
 ST_VECTOR_BOX         2   $    34A6        13478
 ST_VECTOR_BOXLINE     2   $    3492        13458
 ST_VECTOR_C           2   $    3482        13442
 ST_VECTOR_ERASING     2   $    346E        13422
 ST_VECTOR_LABELS      2   $    3DCE        15822
 ST_VECTOR_PLAYER      2   $    326C        12908
 SUBYFROMAWITHWRAP     2   $    A7A6        42918
 SWAPPLAYERSTATES      2   $    92B2        37554
 TANKERICONTABLE       1   $    B61E        46622
 TANKER_LOAD           6   $     149          329
 TESTMIDDLERAM         -   $    D9D6        55766
 TEST_MAGIC_BITS       2   $    D8B6        55478
 TEST_MAGIC_TBL        2   $    3F16        16150
 TIMECTR              21   $      03            3
 TOP_OF_TUNNEL         2   $      10           16
 TRACK_SPINNER         3   $    ADCE        44494
 TUBE_ANGLE            3   $     3EE         1006
 TUBE_X                9   $     3CE          974
 TUBE_Y                9   $     3DE          990
 TWENTY_HEX            2   $    A788        42888
 TWOPLAYER            13   $      3E           62
 UNCREDITED            5   $      17           23
 UNK04                 1   $      40           64
 UNKNOWN_STATE        11   $      01            1
 VAPP_2DIG_BIN         4   $    AF77        44919
 VAPP_A_X              2   $    DF59        57177
 VAPP_A_X_Y_0          5   $    DF57        57175
 VAPP_CENTRE_HALT      1   $    DF0D        57101
 VAPP_DIGIT            3   $    DF1F        57119
 VAPP_DIGIT_LZ         2   $    DF19        57113
 VAPP_LDRAW_A_X       19   $    DF75        57205
 VAPP_LDRAW_A_X_Y      1   $    DF73        57203
 VAPP_LDRAW_Y_X_2DIG_A    2   $    D8A9        55465
 VAPP_MID_GRAPHIC      1   $    B7EB        47083
 VAPP_MSG             18   $    AB14        43796
 VAPP_MSG_AT_Y         9   $    AB17        43799
 VAPP_MULTDIG_Y_A      9   $    DFB1        57265
 VAPP_RTS              3   $    DF09        57097
 VAPP_SCALE_A_0       11   $    DF6A        57194
 VAPP_SCALE_A_Y        4   $    DF6C        57196
 VAPP_SCLSTAT_A_73     1   $    DF4A        57162
 VAPP_SCLSTAT_A_Y     11   $    DF4C        57164
 VAPP_SETCOLOR         8   $    B0D1        45265
 VAPP_SETSCALE         3   $    B0DD        45277
 VAPP_STARTBONUS       2   $    B0C6        45254
 VAPP_STATS            1   $    DD41        56641
 VAPP_TEST_I3          2   $    DD0D        56589
 VAPP_TEST_IBITS       1   $    DD2B        56619
 VAPP_TEST_IBMOVE      2   $    DD27        56615
 VAPP_TO_X_            5   $    C765        51045
 VAPP_VCENTRE_1        9   $    AB0D        43789
 VAPP_VCENTRE_2        5   $    DF53        57171
 VAPP_VJSR_AX         17   $    DF39        57145
 VECRAM               11   $    2000         8192
 VECTOR_BOX            2   $    34AA        13482
 VECTOR_CROSSHAIRS     2   $    3456        13398
 VECTOR_DATA_1         4   $    3FF2        16370
 VECTOR_IRQ_BRK        -   $    DFFE        57342
 VECTOR_NMI            -   $    DFFA        57338
 VECTOR_RESET          -   $    DFFC        57340
 VG_GO                 2   $    4800        18432
 VG_RESET              4   $    5800        22528
 VIDEO_DATA            9   $    2F60        12128
 VIDPTR_H             12   $      75          117
 VIDPTR_L             91   $      74          116
 VID_COINS             3   $    4000        16384
 WATCHDOG             10   $    5000        20480
 WAVE_ENEMIES          5   $     15B          347
 WAVE_ENEMIES_TABLE    1   $    95B3        38323
 WAVE_SPIKEHT          2   $     15A          346
 WAVE_SPIKEHT_TABLE    1   $    959C        38300
 WHITE                 6   $      00            0
 XPOSMSG1COIN1CRD      1   $    D4EF        54511
 XPOSMSG1COIN1CRDFR    1   $    D4FD        54525
 XPOSMSG1COIN1CRDGER    1   $    D50E        54542
 XPOSMSG1COIN1CRDSPN    1   $    D51F        54559
 XPOSMSG1COIN2CRD      1   $    D4AB        54443
 XPOSMSG1COIN2CRDFR    1   $    D4BA        54458
 XPOSMSG1COIN2CRDGER    1   $    D4CC        54476
 XPOSMSG1COIN2CRDSPN    1   $    D4DD        54493
 XPOSMSG2COIN1CRD      1   $    D530        54576
 XPOSMSG2COIN1CRDFR    1   $    D53F        54591
 XPOSMSG2COIN1CRDGER    1   $    D551        54609
 XPOSMSG2COIN1CRDSPN    1   $    D563        54627
 XPOSMSG2CRDMIN        1   $    D5A8        54696
 XPOSMSG2CRDMINFR      1   $    D5B9        54713
 XPOSMSG2CRDMINGER     1   $    D5C8        54728
 XPOSMSG2CRDMINSPN     1   $    D5D9        54745
 XPOSMSGATARI          5   $    D575        54645
 XPOSMSGAVOIDSPK       1   $    D61C        54812
 XPOSMSGAVOIDSPKFR     1   $    D629        54825
 XPOSMSGAVOIDSPKGER    1   $    D63E        54846
 XPOSMSGAVOIDSPKSPN    1   $    D651        54865
 XPOSMSGBONUS          4   $    D417        54295
 XPOSMSGBONUSEV        1   $    D5E9        54761
 XPOSMSGBONUSEVFR      1   $    D5F6        54774
 XPOSMSGBONUSEVGER     1   $    D604        54788
 XPOSMSGBONUSEVSPN     1   $    D610        54800
 XPOSMSGBONUSSPC       4   $    D5A1        54689
 XPOSMSGCREDITS        2   $    D585        54661
 XPOSMSGCREDITSGER     1   $    D58E        54670
 XPOSMSGCREDITSSPN     1   $    D597        54679
 XPOSMSGEXPERT         2   $    D3FF        54271
 XPOSMSGEXPERTGER      1   $    D40E        54286
 XPOSMSGEXPERTSPN      1   $    D406        54278
 XPOSMSGFREEPLAY       4   $    D4A1        54433
 XPOSMSGGAMEOVER       1   $    D15D        53597
 XPOSMSGGAMEOVERFR     1   $    D167        53607
 XPOSMSGGAMEOVERGER    1   $    D175        53621
 XPOSMSGGAMEOVERSPN    1   $    D17F        53631
 XPOSMSGHISCORES       1   $    D333        54067
 XPOSMSGHISCORESFR     1   $    D33F        54079
 XPOSMSGHISCORESGER    1   $    D350        54096
 XPOSMSGHISCORESSPN    1   $    D35E        54110
 XPOSMSGHOLE           1   $    D44C        54348
 XPOSMSGHOLEFR         1   $    D451        54353
 XPOSMSGHOLEGER        1   $    D45B        54363
 XPOSMSGHOLESPN        1   $    D456        54358
 XPOSMSGINITIALS       1   $    D203        53763
 XPOSMSGINITIALSFR     1   $    D217        53783
 XPOSMSGINITIALSGER    1   $    D230        53808
 XPOSMSGINITIALSSPN    1   $    D24D        53837
 XPOSMSGINSCOIN        1   $    D460        54368
 XPOSMSGINSCOINFR      1   $    D46D        54381
 XPOSMSGINSCOINGER     1   $    D483        54403
 XPOSMSGINSCOINSPN     1   $    D492        54418
 XPOSMSGLEVEL          1   $    D434        54324
 XPOSMSGLEVELFR        1   $    D43A        54330
 XPOSMSGLEVELGER       1   $    D441        54337
 XPOSMSGLEVELNS        1   $    D662        54882
 XPOSMSGLEVELNSFR      1   $    D668        54888
 XPOSMSGLEVELNSGER     1   $    D66F        54895
 XPOSMSGLEVELNSSPN     1   $    D674        54900
 XPOSMSGLEVELSPN       1   $    D446        54342
 XPOSMSGNOVICE         2   $    D3E6        54246
 XPOSMSGNOVICEGER      1   $    D3F5        54261
 XPOSMSGNOVICESPN      1   $    D3ED        54253
 XPOSMSGPLAY           1   $    D1EB        53739
 XPOSMSGPLAYER         2   $    D18F        53647
 XPOSMSGPLAYERFR       2   $    D197        53655
 XPOSMSGPLAYERGER      2   $    D19F        53663
 XPOSMSGPLAYERSPN      2   $    D1A8        53672
 XPOSMSGPLAYFR         1   $    D1F0        53744
 XPOSMSGPLAYGER        1   $    D1F6        53750
 XPOSMSGPLAYSPN        1   $    D1FC        53756
 XPOSMSGPRESSFIRE      1   $    D2CB        53963
 XPOSMSGPRESSFIREFR    1   $    D2E0        53984
 XPOSMSGPRESSFIREGER    1   $    D2FB        54011
 XPOSMSGPRESSFIRESPN    1   $    D316        54038
 XPOSMSGRANKING        1   $    D366        54118
 XPOSMSGRANKINGFR      1   $    D379        54137
 XPOSMSGRANKINGGER     1   $    D38B        54155
 XPOSMSGRANKINGSPN     1   $    D3A0        54176
 XPOSMSGRATESELF       1   $    D3B0        54192
 XPOSMSGRATESELFFR     1   $    D3BE        54206
 XPOSMSGRATESELFGER    1   $    D3CB        54219
 XPOSMSGRATESELFSPN    1   $    D3DA        54234
 XPOSMSGRECHARGE       2   $    D67A        54906
 XPOSMSGRECHARGEGER    1   $    D68F        54927
 XPOSMSGRECHARGESPN    1   $    D6A1        54945
 XPOSMSGSPINKNOB       1   $    D261        53857
 XPOSMSGSPINKNOBFR     1   $    D275        53877
 XPOSMSGSPINKNOBGER    1   $    D294        53908
 XPOSMSGSPINKNOBSPN    1   $    D2AE        53934
 XPOSMSGSTART          1   $    D1B1        53681
 XPOSMSGSTARTFR        1   $    D1BD        53693
 XPOSMSGSTARTGER       1   $    D1CF        53711
 XPOSMSGSTARTSPN       1   $    D1DE        53726
 XPOSMSGTIME           1   $    D41D        54301
 XPOSMSGTIMEFR         1   $    D422        54306
 XPOSMSGTIMEGER        1   $    D428        54312
 XPOSMSGTIMESPN        1   $    D42D        54317
 Y3D                   4   $      60           96
 YELLOW                7   $      04            4
 ZAPENEMY              1   $    A398        41880
 ZAPISRUNNING          1   $    A866        43110
 ZAP_FIRE_DEBOUNCE    11   $      4D           77
 ZAP_FIRE_NEW         25   $      4E           78
 ZAP_FIRE_SHADOW       1   $      08            8
 ZAP_FIRE_STARTS       4   $    60D8        24792
 ZAP_FIRE_TMP1         6   $      4C           76
 ZAP_FIRE_TMP2         2   $      4F           79
 ZAP_LENGTH            1   $    A883        43139
 ZAP_RUNNING          11   $     125          293
 ZAP_USES              4   $     3AA          938
 ZEROSPINNER           3   $    92AD        37549
 ZERO_SCORES           1   $    DDED        56813
 ZERO_TIMES            1   $    DDE9        56809
 ZOOMSPD_LSB           5   $     104          260
 ZOOMSPD_MSB           5   $     105          261
 ZPPTRH                -   $      2E           46
 ZPPTRL                -   $      2C           44
 ZPPTRM                -   $      2D           45

Numeric Value    Ref Cnt   Hex Value    Dec Value

 ADD_LEVEL             8   $      00            0
 ALT_START_TABLE       4   $      00            0
 DAVEPL_MSG            1   $      00            0
 ENEMY_TYPE_FLIPPER    1   $      00            0
 GAMESTATE            48   $      00            0
 GS_GAMESTARTUP        4   $      00            0
 IBMSGGAMEOVER         2   $      00            0
 OPTIMIZE              2   $      00            0
 PADLENGTH             2   $      00            0
 PCOP_HALT             4   $      00            0
 REMOVE_LANGUAGES     27   $      00            0
 REMOVE_SELFTEST       3   $      00            0
 WHITE                 6   $      00            0
 ENEMY_TYPE_PULSAR     2   $      01            1
 UNKNOWN_STATE        11   $      01            1
 ENEMY_TYPE_TANKER     1   $      02            2
 GS_LEVELSTARTUP       2   $      02            2
 IBMSGPLAYER           2   $      02            2
 MAX_ZAP_USES          1   $      02            2
 PCOP_STORE            1   $      02            2
 STATE_AFTER_DELAY     9   $      02            2
 CYAN                  7   $      03            3
 ENEMY_TYPE_SPIKER     -   $      03            3
 TIMECTR              21   $      03            3
 COUNTDOWN_TIMER      14   $      04            4
 ENEMY_TYPE_FUSEBALL    3   $      04            4
 GS_PLAYING            3   $      04            4
 IBMSGPLAYER2          -   $      04            4
 MAX_ENEMY_SHOTS       5   $      04            4
 PCOP_SKIP2IFZERO      1   $      04            4
 YELLOW                7   $      04            4
 GAME_MODE            30   $      05            5
 CREDITS              12   $      06            6
 GS_DEATH              1   $      06            6
 IBMSGSTART            2   $      06            6
 PCOP_JUMP             4   $      06            6
 ENEMY_TYPE_MASK      10   $      07            7
 GREEN                 7   $      07            7
 MAX_ACTIVE_ENEMIES    5   $      07            7
 GS_LEVELBEGIN         1   $      08            8
 IBMSGPLAY             1   $      08            8
 MAX_PLAYER_SHOTS     11   $      08            8
 PCOP_DECBRANCHIFELSE    1   $      08            8
 PURPLE                6   $      08            8
 ZAP_FIRE_SHADOW       1   $      08            8
 COINAGE_SHADOW       12   $      09            9
 GS_DELAY              8   $      0A           10
 IBMSGINITIALS         1   $      0A           10
 OPTSW2_SHADOW         7   $      0A           10
 PCOP_NOP              -   $      0A           10
 BLUE                  7   $      0B           11
 IBMSGSPINKNOB         2   $      0C           12
 MAX_TOTAL_SHOTS       5   $      0C           12
 PCOP_MOVETOWARDSTOP    3   $      0C           12
 RED                   8   $      0C           12
 GS_ZOOMOFFEND         1   $      0E           14
 IBMSGPRESSFIRE        2   $      0E           14
 PCOP_SPIKERSTUFF      1   $      0E           14
 BLACK                 1   $      0F           15
 GS_UNKNOWN10          1   $      10           16
 IBMSGHISCORES         1   $      10           16
 PCOP_GETGAMESTATE     -   $      10           16
 TOP_OF_TUNNEL         2   $      10           16
 GS_ENTERINITIALS      1   $      12           18
 IBMSGRANKING          1   $      12           18
 PCOP_STARTFLIP        1   $      12           18
 PLAYERSTATELEN        1   $      12           18
 GS_UNKNOWN14          4   $      14           20
 IBMSGRATESELF         1   $      14           20
 PCOP_CONTFINISHFLIP    1   $      14           20
 COIN_STRING           5   $      16           22
 GS_LEVELSELECT        1   $      16           22
 IBMSGNOVICE           1   $      16           22
 PCOP_REVERSELEFTRIGHTDIR    -   $      16           22
 UNCREDITED            5   $      17           23
 GS_ZOOMONTONEW        2   $      18           24
 IBMSGEXPERT           1   $      18           24
 PCOP_CHECKGRABPLAYER    -   $      18           24
 GS_UNKNOWN1A          1   $      1A           26
 IBMSGBONUS            1   $      1A           26
 PCOP_BRANCHONZERO     1   $      1A           26
 GS_UNKNOWN1C          1   $      1C           28
 IBMSGTIME             1   $      1C           28
 NUMBEROFSTARTENTRIES    2   $      1C           28
 PCOP_CHECKIFPASTSPIKE    -   $      1C           28
 GS_DELAYTHENPLAY      2   $      1E           30
 IBMSGLEVEL            1   $      1E           30
 PCOP_FUSEBALLMOVE     -   $      1E           30
 GS_ZOOMINGDOWN        2   $      20           32
 IBMSGHOLE             1   $      20           32
 PCOP_CHECKPLAYERCOLL    -   $      20           32
 GS_SERVICEDISPLAY     1   $      22           34
 IBMSGINSCOIN          2   $      22           34
 PCOP_PULSARMOVE       -   $      22           34
 GS_HIGHSCOREEXPLOSION    1   $      24           36
 IBMSGFREEPLAY         1   $      24           36
 PCOP_AIMTOWARDSPLAYERLR    -   $      24           36
 IBMSG1COIN2CRD        1   $      26           38
 PCOP_CHECKIFPULSING    -   $      26           38
 IBMSG1COIN1CRD        1   $      28           40
 MAX_CREDITS           2   $      28           40
 IBMSG2COIN1CRD        1   $      2A           42
 IBMSGATARI            5   $      2C           44
 ZPPTRL                -   $      2C           44
 ZPPTRM                -   $      2D           45
 IBMSGCREDITS          1   $      2E           46
 ZPPTRH                -   $      2E           46
 IBMSGBONUSSPC         1   $      30           48
 IBMSG2CRDMIN          2   $      32           50
 IBMSGBONUSEV          1   $      34           52
 IBMSGAVOIDSPK         1   $      36           54
 IBMSGLEVELNS          1   $      38           56
 IBMSGRECHARGE         1   $      3A           58
 CURPLAYER            30   $      3D           61
 TWOPLAYER            13   $      3E           62
 P1_SCORE_L            9   $      40           64
 UNK04                 1   $      40           64
 P1_SCORE_M            5   $      41           65
 P1_SCORE_H            6   $      42           66
 P2_SCORE_L            3   $      43           67
 P2_SCORE_M            2   $      44           68
 P2_SCORE_H            3   $      45           69
 P1_LEVEL              8   $      46           70
 P2_LEVEL              -   $      47           71
 P1_LIVES              9   $      48           72
 P2_LIVES              2   $      49           73
 ZAP_FIRE_TMP1         6   $      4C           76
 ZAP_FIRE_DEBOUNCE    11   $      4D           77
 ZAP_FIRE_NEW         25   $      4E           78
 ZAP_FIRE_TMP2         2   $      4F           79
 FSCALE               12   $      59           89
 LAST_SHAPE_LEVEL      2   $      5F           95
 Y3D                   4   $      60           96
 HIGHEST_LEVEL         3   $      62           98
 LAST_GREEN            5   $      63           99
 MAX_LEVEL            24   $      63           99
 PARAMETERTABLELENGTH    1   $      6F          111
 CURSCALE              5   $      72          114
 DRAW_Z               22   $      73          115
 VIDPTR_L             91   $      74          116
 VIDPTR_H             12   $      75          117
 RGR_PT_INX            2   $      99          153
 CURCOLOR             15   $      9E          158
 CURLEVEL             14   $      9F          159
 ENEMYSHOTCOUNT        6   $      A6          166
 STRTBL                6   $      AC          172
 PULSAR_FLIPRATE       1   $      B2          178
 FLIP_TOP_ACCEL        2   $      B3          179
 COPYR_CKSUM           2   $      B5          181
 COPYR_VID_LOC         4   $      B6          182
 EAROM_MEMPTR          6   $      BD          189
 SPARKLE               5   $      C0          192
 END_OF_TUNNEL         6   $      F0          240
 P1_STARTCHOICE        5   $     102          258
 P2_STARTCHOICE        -   $     103          259
 ZOOMSPD_LSB           5   $     104          260
 ZOOMSPD_MSB           5   $     105          261
 ALONG_LSB             3   $     107          263
 NUMENEMIESINTUBE      6   $     108          264
 NUMENEMIESONTOP       6   $     109          265
 PCODE_RUN             4   $     10A          266
 PCODE_PC             20   $     10B          267
 OPEN_LEVEL           13   $     111          273
 CURTUBE               4   $     112          274
 FLAGBITS              3   $     117          279
 ENM_SHOTSPD_MSB       2   $     118          280
 SHOT_HOLDOFF          2   $     119          281
 MAXENEMYSHOTS         6   $     11A          282
 COPYR_VID_CKSUM1      2   $     11B          283
 MAXACTIVEENEMIES     11   $     11C          284
 ENM_SHOTSPD_LSB       4   $     120          288
 ZAP_RUNNING          11   $     125          293
 MIN_ENEMY_BY_TYPE     3   $     129          297
 MIN_FLIPPERS          1   $     129          297
 MIN_PULSARS           1   $     12A          298
 MIN_TANKERS           1   $     12B          299
 MIN_SPIKERS           1   $     12C          300
 MIN_FUSEBALLS         1   $     12D          301
 MAX_ENEMY_BY_TYPE     1   $     12E          302
 MAX_FLIPPERS          1   $     12E          302
 MAX_PULSARS           1   $     12F          303
 MAX_TANKERS           1   $     130          304
 MAX_SPIKERS           1   $     131          305
 MAX_FUSEBALLS         1   $     132          306
 PLAYERSHOTCOUNT       7   $     135          309
 AVL_ENEMY_BY_TYPE    10   $     13D          317
 AVL_FLIPPERS          -   $     13D          317
 AVL_PULSARS           -   $     13E          318
 AVL_TANKERS           1   $     13F          319
 AVL_SPIKERS           3   $     140          320
 AVL_FUSEBALLS         -   $     141          321
 N_ENEMY_BY_TYPE       5   $     142          322
 N_FLIPPERS            1   $     142          322
 N_PULSARS             2   $     143          323
 N_TANKERS             1   $     144          324
 N_SPIKERS             1   $     145          325
 N_FUSEBALLS           1   $     146          326
 PULSE_BEAT            5   $     147          327
 PULSING              11   $     148          328
 TANKER_LOAD           6   $     149          329
 HIT_TOL_BY_ENM_TYPE    1   $     151          337
 HIT_TOL_FLIPPER       1   $     151          337
 HIT_TOL_PULSAR        1   $     152          338
 HIT_TOL_TANKER        1   $     153          339
 HIT_TOL_SPIKER        1   $     154          340
 HIT_TOL_FUSEBALL      1   $     155          341
 BONUS_LIFE_EACH       5   $     156          342
 LETHAL_DISTANCE       5   $     157          343
 INIT_LIVES            3   $     158          344
 FUSE_MOVE_FLG         4   $     159          345
 WAVE_SPIKEHT          2   $     15A          346
 WAVE_ENEMIES          5   $     15B          347
 FLIPPER_MOVE          2   $     15D          349
 FUSE_MOVE_PRB         2   $     15F          351
 SPD_FLIPPER_LSB      13   $     160          352
 SPD_PULSAR_LSB        1   $     161          353
 SPD_TANKER_LSB        1   $     162          354
 SPD_SPIKER_LSB        3   $     163          355
 SPD_FUSEBALL_LSB      2   $     164          356
 SPD_FLIPPER_MSB       4   $     165          357
 SPD_PULSAR_MSB        1   $     166          358
 SPD_TANKER_MSB        1   $     167          359
 SPD_SPIKER_MSB        1   $     168          360
 SPD_FUSEBALL_MSB      2   $     169          361
 DIFF_BITS             6   $     16A          362
 COPYR_DISP_CKSUM1     2   $     16C          364
 PULSAR_FIRE           4   $     16D          365
 EAROM_CLR             3   $     1C6          454
 HS_INITFLAG          16   $     1C9          457
 EAROM_OP             10   $     1CA          458
 EAROM_BLKOFF          4   $     1CB          459
 EAROM_PTR             3   $     1CC          460
 EAROM_BLKEND          3   $     1CD          461
 EAROM_CKSUM           5   $     1CF          463
 PLAYER_SEG           24   $     200          512
 PLAYER_STATE         21   $     201          513
 PLAYER_ALONG         28   $     202          514
 PENDING_SEG          10   $     203          515
 PENDING_VID          11   $     243          579
 ENEMY_TYPE_INFO      55   $     283          643
 ACTIVE_ENEMY_INFO    25   $     28A          650
 ENM_MOVE_PC           3   $     291          657
 ENM_PC_STORAGE        3   $     298          664
 ENEMY_ALONG_LSB       6   $     29F          671
 SHOT_DELAY            4   $     2A6          678
 PLAYERSHOTSEGMENTS    6   $     2AD          685
 ENEMYSHOTSEGMENTS     8   $     2B5          693
 ENEMY_SEG            36   $     2B9          697
 MORE_ENEMY_INFO      19   $     2CC          716
 PLAYERSHOTPOSITIONS   14   $     2D3          723
 ENEMYSHOTPOSITIONS    9   $     2DB          731
 ENEMY_ALONG          41   $     2DF          735
 ENM_SHOT_LSB          -   $     2E6          742
 PLAYERSTATE           3   $     3AA          938
 ZAP_USES              4   $     3AA          938
 ENEMIES_PENDING      11   $     3AB          939
 LANE_SPIKE_HEIGHT    14   $     3AC          940
 OTHERPLAYERSTATE      2   $     3BC          956
 TUBE_X                9   $     3CE          974
 TUBE_Y                9   $     3DE          990
 TUBE_ANGLE            3   $     3EE         1006
 ON_TIME_L             2   $     406         1030
 ON_TIME_M             1   $     407         1031
 ON_TIME_H             1   $     408         1032
 PLAY_TIME_L           2   $     409         1033
 PLAY_TIME_M           2   $     40A         1034
 PLAY_TIME_H           2   $     40B         1035
 GAMES_1P_L            2   $     40C         1036
 GAMES_1P_M            2   $     40D         1037
 GAMES_1P_H            -   $     40E         1038
 GAMES_2P_L            1   $     40F         1039
 GAMES_2P_M            1   $     410         1040
 GAMES_2P_H            -   $     411         1041
 SECS_AVG_L            1   $     412         1042
 SECS_AVG_M            1   $     413         1043
 SECS_AVG_H            1   $     414         1044
 DBLBUF_FLG            6   $     415         1045
 MID_X                 4   $     435         1077
 MID_Y                 4   $     445         1093
 COPYR_VID_CKSUM2      2   $     455         1109
 HS_WHICHLETTER        6   $     602         1538
 HS_TIMER              9   $     605         1541
 HS_INITIALS_8         5   $     606         1542
 HS_INITIALS_7         -   $     609         1545
 HS_INITIALS_6         -   $     60C         1548
 HS_INITIALS_5         -   $     60F         1551
 HS_INITIALS_4         -   $     612         1554
 HS_INITIALS_3         1   $     615         1557
 HS_INITIALS_2         -   $     618         1560
 HS_INITIALS_1         1   $     61B         1563
 HS_SCORES             -   $     700         1792
 HS_SCORE_8            2   $     706         1798
 HS_SCORE_7            -   $     709         1801
 HS_SCORE_6            -   $     70C         1804
 HS_SCORE_5            -   $     70F         1807
 HS_SCORE_4            -   $     712         1810
 HS_SCORE_3            1   $     715         1813
 HS_SCORE_2            -   $     718         1816
 HS_SCORE_1            4   $     71B         1819
 ENDOFHISCORES         2   $     71D         1821
 LIFE_SETTINGS         2   $     71E         1822
 DIFF_SETTINGS         2   $     71F         1823
 COL_RAM               2   $     800         2048
 COL_RAM1              -   $     801         2049
 COL_RAM2              -   $     802         2050
 COL_RAM3              -   $     803         2051
 COL_RAM4              -   $     804         2052
 COL_RAM5              -   $     805         2053
 COL_RAM6              -   $     806         2054
 COL_RAM7              -   $     807         2055
 COL_RAM_UPR           -   $     808         2056
 COL_RAM_UPR1          -   $     809         2057
 COL_RAM_UPR2          -   $     80A         2058
 COL_RAM_UPR3          -   $     80B         2059
 COL_RAM_UPR4          -   $     80C         2060
 COL_RAM_UPR5          -   $     80D         2061
 COL_RAM_UPR6          -   $     80E         2062
 COL_RAM_UPR7          -   $     80F         2063
 CABSW                14   $     C00         3072
 OPTSW1                3   $     D00         3328
 OPTSW2                2   $     E00         3584
 VECRAM               11   $    2000         8192
 VIDEO_DATA            9   $    2F60        12128
 CHAR_JSRTBL           8   $    31E4        12772
 LTR_JSRTBL            3   $    31FA        12794
 ST_VECTOR_PLAYER      2   $    326C        12908
 ST_VECTOR_4           2   $    32B6        12982
 ST_VECTOR_2           2   $    330A        13066
 ST_GRID_VECTOR        2   $    334E        13134
 VECTOR_CROSSHAIRS     2   $    3456        13398
 ST_VECTOR_ERASING     2   $    346E        13422
 ST_VECTOR_C           2   $    3482        13442
 ST_VECTOR_BOXLINE     2   $    3492        13458
 ST_VECTOR_BOX         2   $    34A6        13478
 VECTOR_BOX            2   $    34AA        13482
 ST_VECTOR_LABELS      2   $    3DCE        15822
 TEST_MAGIC_TBL        2   $    3F16        16150
 DIFF_STR_TBL          2   $    3F1E        16158
 VECTOR_DATA_1         4   $    3FF2        16370
 VID_COINS             3   $    4000        16384
 VG_GO                 2   $    4800        18432
 WATCHDOG             10   $    5000        20480
 VG_RESET              4   $    5800        22528
 EAROM_WRITE           4   $    6000        24576
 EACTL_MBST           11   $    6040        24640
 EAROM_RD              2   $    6050        24656
 MB_RD_L               5   $    6060        24672
 MB_RD_H               5   $    6070        24688
 MB_W_00               3   $    6080        24704
 MB_W_01               1   $    6081        24705
 MB_W_02               -   $    6082        24706
 MB_W_03               1   $    6083        24707
 MB_W_04               1   $    6084        24708
 MB_W_05               1   $    6085        24709
 MB_W_06               1   $    6086        24710
 MB_W_07               1   $    6087        24711
 MB_W_08               -   $    6088        24712
 MB_W_09               1   $    6089        24713
 MB_W_0A               -   $    608A        24714
 MB_W_0B               -   $    608B        24715
 MB_W_0C               4   $    608C        24716
 MB_W_0D               3   $    608D        24717
 MB_W_0E               5   $    608E        24718
 MB_W_0F               2   $    608F        24719
 MB_W_10               2   $    6090        24720
 MB_W_11               -   $    6091        24721
 MB_W_12               -   $    6092        24722
 MB_W_13               -   $    6093        24723
 MB_W_14               4   $    6094        24724
 MB_W_15               6   $    6095        24725
 MB_W_16               5   $    6096        24726
 POKEY1                7   $    60C0        24768
 SPINNER_CABTYP        5   $    60C8        24776
 POKEY1_RAND          16   $    60CA        24778
 POKEY2                3   $    60D0        24784
 ZAP_FIRE_STARTS       4   $    60D8        24792
 POKEY2_RAND          13   $    60DA        24794
 LEDS_FLIP             8   $    60E0        24800
 INITLEVEL             1   $    9009        36873
 INITIALIZEGAME        1   $    9025        36901
 RESETGAMEELEMENTS     1   $    902B        36907
 STATE_ZOOMONTONEW     1   $    904B        36939
 LOC90BC               1   $    90BC        37052
 PLAYERLEVELSELECT     1   $    90C4        37060
 LOC90C9               1   $    90C9        37065
 LOC90E0               1   $    90E0        37088
 LOC90E5               1   $    90E5        37093
 LOC90EA               2   $    90EA        37098
 LOC90F4               1   $    90F4        37108
 LOC90FC               1   $    90FC        37116
 STATE_1C              2   $    9108        37128
 LOC9111               1   $    9111        37137
 LOC9144               1   $    9144        37188
 STATE_LEVELSELECT     1   $    9149        37193
 LOC915D               1   $    915D        37213
 LOC9164               1   $    9164        37220
 LOC9169               1   $    9169        37225
 LOC9176               1   $    9176        37238
 LOC9197               1   $    9197        37271
 LOC91AE               1   $    91AE        37294
 LD_STARTBONUS         2   $    91B5        37301
 START_BONUS           3   $    91C6        37318
 END_START_BONUS       1   $    91FE        37374
 STARTLEVTBL           5   $    91FE        37374
 END_STARTLEVTBL       1   $    921A        37402
 INITPLAYERPOSITION    1   $    921B        37403
 INITENEMIESANDSPIKES    2   $    9234        37428
 INITENEMYLOCATIONS    1   $    9246        37446
 CLEARALLENEMIES       1   $    926F        37487
 CLEARALLSHOTS         4   $    928F        37519
 CLEARENEMYDEATHS      1   $    929F        37535
 ZEROSPINNER           3   $    92AD        37549
 SWAPPLAYERSTATES      2   $    92B2        37554
 LOADLEVELPARAMS       3   $    92C5        37573
 PARAMETERLOOP         1   $    92DA        37594
 LOC92F6               1   $    92F6        37622
 LOC930A               1   $    930A        37642
 LEVEL_OUTSIDE_RANGE    2   $    9313        37651
 LOC9319               2   $    9319        37657
 LOC934A               1   $    934A        37706
 LOC934D               1   $    934D        37709
 HARDDIFFICULTY        -   $    9351        37713
 LOC9360               1   $    9360        37728
 SETENEMYPARAMS        2   $    9382        37762
 CRACK_SPEED           3   $    93E0        37856
 SHOT_HOLDOFF_TABLE    1   $    93FA        37882
 MAXENEMYSHOTS_TABLE    1   $    9407        37895
 SPD_FLIPPER_LSB_TABLE    1   $    941B        37915
 ENM_SHOTSPD_LSB_TABLE    1   $    9449        37961
 SPD_SPIKER_LSB_TABLE    1   $    944D        37965
 LETHAL_DISTANCE_TABLE    1   $    945D        37981
 PULSE_BEAT_TABLE      1   $    9469        37993
 PARAMETERSTABLE_43    1   $    9475        38005
 PARAMETERSTABLE_47    1   $    9481        38017
 MIN_SPIKERS_TABLE     1   $    9489        38025
 MAX_SPIKERS_TABLE     1   $    94A5        38053
 MIN_FLIPPERS_TABLE    1   $    94CD        38093
 MAX_FLIPPERS_TABLE    1   $    94D6        38102
 MIN_TANKERS_TABLE     1   $    94EB        38123
 MAX_TANKERS_TABLE     1   $    9503        38147
 MIN_PULSARS_TABLE     1   $    9520        38176
 MAX_PULSARS_TABLE     1   $    9529        38185
 MIN_FUSEBALLS_TABLE    1   $    9541        38209
 MAX_FUSEBALLS_TABLE    1   $    954E        38222
 PULSAR_FLIPRATE_TABLE    1   $    9563        38243
 FUSE_MOVE_FLG_TABLE    1   $    9578        38264
 FUSE_MOVE_PRB_TABLE    1   $    9587        38279
 MAXACTIVEENEMIES_TABLE    1   $    9598        38296
 WAVE_SPIKEHT_TABLE    1   $    959C        38300
 WAVE_ENEMIES_TABLE    1   $    95B3        38323
 FLIP_TOP_ACCEL_TABLE    1   $    95E3        38371
 PULSAR_FIRE_TABLE     1   $    95EF        38383
 FLIPPER_MOVE_TABLE    1   $    95F4        38388
 PARAMETERSTABLE       5   $    9607        38407
 LOC9677               1   $    9677        38519
 LOC9683               1   $    9683        38531
 LOC9690               2   $    9690        38544
 LOC969E               2   $    969E        38558
 LOC968F_06            1   $    96AB        38571
 LOC968F_04            1   $    96B7        38583
 LOC96B9               1   $    96B9        38585
 LOC968F_02            1   $    96C4        38596
 LOC969D_08_0C         2   $    96C7        38599
 LOC969D_02_0A         2   $    96C8        38600
 LOC969D_04_06         2   $    96CB        38603
 LOC968F_0A            1   $    96DB        38619
 LOC968F_08            1   $    96E2        38626
 LOC96ED               1   $    96ED        38637
 LOC96F3               1   $    96F3        38643
 LOC96F4               2   $    96F4        38644
 LOC968F_0C            1   $    9700        38656
 LOC9708               1   $    9708        38664
 STATE_PLAYING         1   $    970B        38667
 STATE_ZOOMINGDOWN     1   $    9729        38697
 LOC9748               1   $    9748        38728
 MOVE_PLAYER           4   $    9749        38729
 LOC974F               1   $    974F        38735
 LOC975B               1   $    975B        38747
 LOC9765               1   $    9765        38757
 LOC9768               1   $    9768        38760
 LOC976E               2   $    976E        38766
 LOC9770               1   $    9770        38768
 LOC9786               1   $    9786        38790
 LOC9799               1   $    9799        38809
 LOC979B               1   $    979B        38811
 LOC979D               3   $    979D        38813
 LOC97B6               1   $    97B6        38838
 LOC97C5               1   $    97C5        38853
 LOC97CE               1   $    97CE        38862
 LOC97DB               2   $    97DB        38875
 LOC97F5               1   $    97F5        38901
 LOC97F7               3   $    97F7        38903
 LOC97F8               1   $    97F8        38904
 LOC97FE               1   $    97FE        38910
 LOC9804               1   $    9804        38916
 LOC980E               1   $    980E        38926
 LOC9825               1   $    9825        38949
 LOC9833               1   $    9833        38963
 LOC9842               2   $    9842        38978
 LOC9866               1   $    9866        39014
 LOC9881               1   $    9881        39041
 LOC989E               3   $    989E        39070
 LOC98A1               1   $    98A1        39073
 CREATE_ENEMIES        1   $    98A2        39074
 LOC98B7               2   $    98B7        39095
 LOC98BE               1   $    98BE        39102
 LOC98C2               1   $    98C2        39106
 LOC98D9               1   $    98D9        39129
 LOC98EE               4   $    98EE        39150
 LOC9906               1   $    9906        39174
 LOC9909               1   $    9909        39177
 NEXT_SLOT             3   $    9919        39193
 LOC9923               1   $    9923        39203
 LOC9945               2   $    9945        39237
 LOC994D               3   $    994D        39245
 LOC9952               1   $    9952        39250
 LOC996C               2   $    996C        39276
 LOC999D               1   $    999D        39325
 CREATENEWENEMY        1   $    99A5        39333
 LOC99C3               1   $    99C3        39363
 LOC99D6               1   $    99D6        39382
 LOC99DC               2   $    99DC        39388
 LOC99E7               1   $    99E7        39399
 LOC99F0               1   $    99F0        39408
 LOC99F8               1   $    99F8        39416
 LOC99FF               1   $    99FF        39423
 LOC9A05               1   $    9A05        39429
 LOC9A10               1   $    9A10        39440
 LOC9A20               3   $    9A20        39456
 LOC9A26               1   $    9A26        39462
 LOC9A2A               1   $    9A2A        39466
 LOC9A3D               3   $    9A3D        39485
 LOC9A53               1   $    9A53        39507
 LOC9A5B               1   $    9A5B        39515
 LOC9A61               3   $    9A61        39521
 LOC9A6A               1   $    9A6A        39530
 LOC9A7A               3   $    9A7A        39546
 LOC9A7F               1   $    9A7F        39551
 LOC9A82               2   $    9A82        39554
 LOC9A87               4   $    9A87        39559
 LOC9A88               1   $    9A88        39560
 ENMCREATEJUMPTABLE    2   $    9A93        39571
 MAKE_FLIPPER          1   $    9A9D        39581
 MAKE_PULSAR           1   $    9AA9        39593
 MAKE_FUSEBALL         1   $    9AB3        39603
 MAKE_SPIKER           1   $    9AB7        39607
 MAKE_TANKER           1   $    9ABB        39611
 LOC9AC7               1   $    9AC7        39623
 LOC9AD0               1   $    9AD0        39632
 LOC9AD5               1   $    9AD5        39637
 LOC9ADE               1   $    9ADE        39646
 LOC9AEE               3   $    9AEE        39662
 LOC9AF1               2   $    9AF1        39665
 LOC9AF6               1   $    9AF6        39670
 INITIALPCODEPC        1   $    9AFD        39677
 ENEMYCANFIRETABLE     2   $    9B02        39682
 CANPULSARFIRE         1   $    9B03        39683
 LOC9B07               1   $    9B07        39687
 LOC9B18               1   $    9B18        39704
 LOC9B1B               1   $    9B1B        39707
 MOVE_ENEMIES          1   $    9B1E        39710
 LOC9B28               1   $    9B28        39720
 PCODEMAINLOOP         1   $    9B3A        39738
 LOC9B52               1   $    9B52        39762
 LOC9B56               1   $    9B56        39766
 LOC9B6F               1   $    9B6F        39791
 LOC9B7C               4   $    9B7C        39804
 LOC9B88               1   $    9B88        39816
 LOC9B8C               1   $    9B8C        39820
 LOC9B97               2   $    9B97        39831
 EXECUTEPCODEOP        1   $    9B98        39832
 PCODEDISPATCH         2   $    9BA2        39842
 PC_HALT               1   $    9BCA        39882
 PC_NOP                1   $    9BCF        39887
 PC_STORE              1   $    9BD0        39888
 PC_GETGAMESTATE       1   $    9BDD        39901
 PC_SKIP2IFZERO        1   $    9BEE        39918
 PC_BRANCHONZERO       1   $    9BFA        39930
 PC_DECBRANCHELSESKIP    1   $    9C0C        39948
 PC_JUMP               2   $    9C17        39959
 PC_CHECKIFPASTSPIKE    1   $    9C21        39969
 LOC9C35               1   $    9C35        39989
 LOC9C37               1   $    9C37        39991
 PC_CHECKIFPULSING     1   $    9C3B        39995
 PC_REVERSELEFTRIGHTDIR    2   $    9C4F        40015
 PC_MOVETOWARDSTOP     1   $    9C58        40024
 MOVETOWARDSTOP        1   $    9C63        40035
 NOT_AT_TOP_YET        1   $    9C83        40067
 NO_TANKER_SPLIT       3   $    9C96        40086
 MOVETOWARDSFAREND     3   $    9C99        40089
 LOC9CB5               2   $    9CB5        40117
 PC_PULSARMOVE         1   $    9CB6        40118
 LOC9CC7               1   $    9CC7        40135
 LOC9CCD               1   $    9CCD        40141
 LOC9CD7               1   $    9CD7        40151
 LOC9CE4               2   $    9CE4        40164
 NOTPULSED             4   $    9D04        40196
 ENEMYREACHEDTOP       1   $    9D06        40198
 JUSTBOUNCEBACK        -   $    9D1A        40218
 CAN_STICK_TO_TOP      2   $    9D23        40227
 STICKTOTOPRAIL        1   $    9D2C        40236
 SKIP_AIMING           1   $    9D3C        40252
 LOC9D3E               1   $    9D3E        40254
 LOC9D51               2   $    9D51        40273
 LOC9D54               1   $    9D54        40276
 LOC9D5E               1   $    9D5E        40286
 PC_AIMTOWARDSPLAYERLR    3   $    9D67        40295
 LOC9D7C               1   $    9D7C        40316
 LOC9D7E               1   $    9D7E        40318
 PC_CONTFINISHFLIP     1   $    9D82        40322
 LOC9D90               1   $    9D90        40336
 LOC9D91               1   $    9D91        40337
 LOC9DBB               1   $    9DBB        40379
 LOC9DE3               1   $    9DE3        40419
 LOC9DEB               3   $    9DEB        40427
 LOC9DEE               1   $    9DEE        40430
 LOC9E1B               1   $    9E1B        40475
 LOC9E26               3   $    9E26        40486
 PC_CHECKGRABPLAYER    1   $    9E2F        40495
 LOC9E47               3   $    9E47        40519
 PC_CHECKPLAYERCOLL    1   $    9E48        40520
 LOC9E5B               2   $    9E5B        40539
 PC_STARTFLIP          1   $    9E5C        40540
 LOC9E5F               1   $    9E5F        40543
 LOC9E79               1   $    9E79        40569
 LOC9E86               1   $    9E86        40582
 LOC9E8C               1   $    9E8C        40588
 LOC9E9E               1   $    9E9E        40606
 LOC9EAA               1   $    9EAA        40618
 REV_IF_EDGE           1   $    9EAB        40619
 LOC9EC6               1   $    9EC6        40646
 LOC9EC9               1   $    9EC9        40649
 LOC9ED6               3   $    9ED6        40662
 GET_ANGLE             2   $    9ED7        40663
 LOC9EEB               1   $    9EEB        40683
 LOC9EEE               1   $    9EEE        40686
 PC_FUSEBALLMOVE       1   $    9EF1        40689
 LOC9F19               1   $    9F19        40729
 LOC9F26               1   $    9F26        40742
 LOC9F29               1   $    9F29        40745
 LOC9F2A               2   $    9F2A        40746
 LOC9F37               1   $    9F37        40759
 LOC9F3A               1   $    9F3A        40762
 LOC9F3D               1   $    9F3D        40765
 LOC9F40               1   $    9F40        40768
 LOC9F43               1   $    9F43        40771
 LOC9F55               1   $    9F55        40789
 LOC9F58               1   $    9F58        40792
 LOC9F5B               1   $    9F5B        40795
 LOC9F5E               2   $    9F5E        40798
 LOC9F5F               2   $    9F5F        40799
 LOC9F7D               1   $    9F7D        40829
 LOC9F80               3   $    9F80        40832
 LOC9F81               4   $    9F81        40833
 LOC9F8A               4   $    9F8A        40842
 LOC9F96               1   $    9F96        40854
 LOC9F99               1   $    9F99        40857
 LOC9FAF               1   $    9FAF        40879
 LOC9FB4               1   $    9FB4        40884
 LOC9FBC               3   $    9FBC        40892
 PC_SPIKERSTUFF        1   $    9FC4        40900
 LOC9FD6               1   $    9FD6        40918
 LOC9FE6               1   $    9FE6        40934
 LOC9FFD               1   $    9FFD        40957
 LOCA027               3   $    A027        40999
 SPIKER_HOP            1   $    A028        41000
 LOCA037               1   $    A037        41015
 LOCA040               1   $    A040        41024
 LOCA047               1   $    A047        41031
 LOCA04F               2   $    A04F        41039
 LOCA054               1   $    A054        41044
 LOCA06F               3   $    A06F        41071
 LOCA088               2   $    A088        41096
 LOCA0AD               1   $    A0AD        41133
 LOCA0C2               2   $    A0C2        41154
 LOCA0EB               2   $    A0EB        41195
 LOCA0F6               2   $    A0F6        41206
 PCODEPROGRAM         11   $    A0F7        41207
 SPIKERENTRY           -   $    A0F7        41207
 DOSPIKERSTUFF         1   $    A0F8        41208
 JUSTMOVEUP            2   $    A0FE        41214
 FLIPPERENTRY          1   $    A102        41218
 MOVEUP                1   $    A104        41220
 HALTFLIPPER           1   $    A109        41225
 MOVE_SHOTS            2   $    A18F        41359
 LOCA193               1   $    A193        41363
 LOCA1A8               1   $    A1A8        41384
 LOCA1BD               1   $    A1BD        41405
 LOCA1C0               1   $    A1C0        41408
 LOCA1DC               1   $    A1DC        41436
 LOCA1DF               2   $    A1DF        41439
 LOCA1E4               1   $    A1E4        41444
 LOCA1F9               2   $    A1F9        41465
 LOCA1FA               1   $    A1FA        41466
 LOCA210               1   $    A210        41488
 LOCA22F               1   $    A22F        41519
 NOSPIKEHIT            2   $    A23E        41534
 CHECKPLAYERFIRE       2   $    A23F        41535
 LOCA24F               1   $    A24F        41551
 LOCA262               1   $    A262        41570
 LOCA268               2   $    A268        41576
 FIRESHOT              1   $    A270        41584
 LOCA274               1   $    A274        41588
 LOCA278               1   $    A278        41592
 LOCA2A2               1   $    A2A2        41634
 LOCA2A5               2   $    A2A5        41637
 ENM_SHOOT             1   $    A2A6        41638
 CHECKIFSHOULDSHOOT    1   $    A2AD        41645
 LOOKFORAVAILSHOT      1   $    A2D9        41689
 SHOT_NOT_AVAIL        1   $    A2FD        41725
 NOSHOT                6   $    A300        41728
 CANNOTSHOOT           1   $    A303        41731
 ENM_SHOT_PROB         1   $    A304        41732
 LOCA309               1   $    A309        41737
 LOCA325               1   $    A325        41765
 LOCA33A               1   $    A33A        41786
 LOCA343               1   $    A343        41795
 PIECES_DEATH          2   $    A347        41799
 LOCA34B               1   $    A34B        41803
 LOCA34D               2   $    A34D        41805
 LOCA352               1   $    A352        41810
 LOCA36F               1   $    A36F        41839
 LOCA38E               1   $    A38E        41870
 ZAPENEMY              1   $    A398        41880
 LOCA3A7               1   $    A3A7        41895
 LOCA3AF               1   $    A3AF        41903
 LOCA3C5               1   $    A3C5        41925
 LOCA3CA               2   $    A3CA        41930
 LOCA3D4               1   $    A3D4        41940
 LOCA3D6               1   $    A3D6        41942
 LOCA3E2               1   $    A3E2        41954
 LOCA3F2               1   $    A3F2        41970
 LOCA3FA               1   $    A3FA        41978
 LOCA416               2   $    A416        42006
 LOCA422               1   $    A422        42018
 LOCA441               1   $    A441        42049
 LOCA444               2   $    A444        42052
 LOCA447               1   $    A447        42055
 LOCA448               1   $    A448        42056
 LOCA44E               1   $    A44E        42062
 CHECKALLPLAYERSHOTS    1   $    A454        42068
 LOCA456               1   $    A456        42070
 LOCA45E               1   $    A45E        42078
 CHECKPLAYERSHOT       2   $    A463        42083
 LOCA467               1   $    A467        42087
 LOCA475               1   $    A475        42101
 LOCA47B               1   $    A47B        42107
 LOCA48E               2   $    A48E        42126
 LOCA491               1   $    A491        42129
 LOCA4BE               3   $    A4BE        42174
 LOCA4C1               1   $    A4C1        42177
 LOCA4D2               1   $    A4D2        42194
 LOCA4DA               1   $    A4DA        42202
 LOCA4E2               1   $    A4E2        42210
 LOCA4E9               4   $    A4E9        42217
 LOCA4EB               2   $    A4EB        42219
 LOCA4F1               1   $    A4F1        42225
 LOCA503               1   $    A503        42243
 LOCA504               2   $    A504        42244
 LOCA516               1   $    A516        42262
 LOCA522               1   $    A522        42274
 LOCA526               1   $    A526        42278
 LOCA529               1   $    A529        42281
 LOCA551               1   $    A551        42321
 LOCA554               1   $    A554        42324
 LOCA561               2   $    A561        42337
 LOCA57B               1   $    A57B        42363
 LOCA57E               2   $    A57E        42366
 LOCA581               1   $    A581        42369
 LOCA593               2   $    A593        42387
 LOCA5A3               1   $    A5A3        42403
 LOCA5AC               1   $    A5AC        42412
 LOCA5B5               2   $    A5B5        42421
 LOCA5CA               5   $    A5CA        42442
 LOCA5CB               2   $    A5CB        42443
 LOCA5EB               1   $    A5EB        42475
 LOCA5F3               1   $    A5F3        42483
 NOSPIKEWARNING        2   $    A612        42514
 STATE_HIGHSCOREEXPLOSION    1   $    A618        42520
 LOCA622               1   $    A622        42530
 LOCA631               1   $    A631        42545
 LOCA634               1   $    A634        42548
 LOCA63F               1   $    A63F        42559
 LOCA651               2   $    A651        42577
 LOCA65A               1   $    A65A        42586
 LOCA65B               1   $    A65B        42587
 LOCA688               1   $    A688        42632
 LOCA69A               1   $    A69A        42650
 PLUSMINUS_7           3   $    A69B        42651
 LOCA6A8               1   $    A6A8        42664
 LOCA6A9               1   $    A6A9        42665
 LOCA6C1               1   $    A6C1        42689
 LOCA6C4               1   $    A6C4        42692
 LOCA6CD               2   $    A6CD        42701
 LOCA6E6               1   $    A6E6        42726
 LOCA6E9               1   $    A6E9        42729
 LOCA6F2               2   $    A6F2        42738
 LOCA70D               1   $    A70D        42765
 LOCA710               1   $    A710        42768
 LOCA719               2   $    A719        42777
 LOCA721               1   $    A721        42785
 LOCA75C               1   $    A75C        42844
 LOCA75D               3   $    A75D        42845
 LOCA772               1   $    A772        42866
 LOCA77E               1   $    A77E        42878
 LOCA784               2   $    A784        42884
 TWENTY_HEX            2   $    A788        42888
 LOCA789               1   $    A789        42889
 LOCA78B               1   $    A78B        42891
 SUBYFROMAWITHWRAP     2   $    A7A6        42918
 OPEN_LEVEL_NOWRAP     2   $    A7BB        42939
 LOCA7BC               1   $    A7BC        42940
 LOCA7BD               1   $    A7BD        42941
 LOCA7C1               1   $    A7C1        42945
 LOCA7D2               1   $    A7D2        42962
 LOCA7DF               1   $    A7DF        42975
 LOCA7ED               1   $    A7ED        42989
 LOCA7F9               1   $    A7F9        43001
 LOCA7FB               2   $    A7FB        43003
 LOCA7FE               1   $    A7FE        43006
 LOCA80D               1   $    A80D        43021
 LOCA81C               1   $    A81C        43036
 LOCA81E               4   $    A81E        43038
 LOCA830               2   $    A830        43056
 INITSUPERZAPPER       2   $    A831        43057
 CHECK_ZAP             1   $    A83A        43066
 LOCA85D               1   $    A85D        43101
 LOCA863               2   $    A863        43107
 ZAPISRUNNING          1   $    A866        43110
 RUN_LONGER            1   $    A879        43129
 LOCA87C               2   $    A87C        43132
 ZAP_LENGTH            1   $    A883        43139
 DOSUPERZAP            1   $    A888        43144
 LOOK_FOR_ENEMY_TO_ZAP    1   $    A896        43158
 DONEZAPWORK           2   $    A8A3        43171
 FOUND_ENEMY           1   $    A8A4        43172
 COINAGE_MSGS          1   $    A8B0        43184
 LOCA8B4               5   $    A8B4        43188
 LOCA8D8               3   $    A8D8        43224
 LOCA8E7               1   $    A8E7        43239
 LOCA8EA               1   $    A8EA        43242
 LOCA8FE               1   $    A8FE        43262
 LOCA900               1   $    A900        43264
 LOCA908               1   $    A908        43272
 LOCA920               1   $    A920        43296
 LOCA930               1   $    A930        43312
 LOCA943               1   $    A943        43331
 LOCA954               1   $    A954        43348
 LOCA972               1   $    A972        43378
 LOCA97C               2   $    A97C        43388
 P1SCOREPOS            1   $    A97D        43389
 P2SCOREPOS            -   $    A97E        43390
 SHOW_PLAYER_STUFF     2   $    A97F        43391
 LOCA98F               2   $    A98F        43407
 LOCA9A7               2   $    A9A7        43431
 LOCA9A9               1   $    A9A9        43433
 LOCA9B5               2   $    A9B5        43445
 LOCA9CB               1   $    A9CB        43467
 LOCA9D7               1   $    A9D7        43479
 LOCA9DC               1   $    A9DC        43484
 LOCA9EE               1   $    A9EE        43502
 LOCA9FB               1   $    A9FB        43515
 LOCA9FC               2   $    A9FC        43516
 LOCAA02               1   $    AA02        43522
 LOCAA05               1   $    AA05        43525
 LOCAA13               1   $    AA13        43539
 LOCAA23               2   $    AA23        43555
 LOCAA33               1   $    AA33        43571
 LOCAA54               1   $    AA54        43604
 LOCAA5A               1   $    AA5A        43610
 LOCAA62               1   $    AA62        43618
 LOCAA69               1   $    AA69        43625
 LOCAA6F               1   $    AA6F        43631
 LOCAA79               1   $    AA79        43641
 LOCAA8F               1   $    AA8F        43663
 SHOW_PLYNO            2   $    AA92        43666
 LOCAA97               1   $    AA97        43671
 LOCAA9E               1   $    AA9E        43678
 SHOW_COIN_STUFF       2   $    AAA8        43688
 LOCAACB               2   $    AACB        43723
 LOCAACE               2   $    AACE        43726
 LOCAAE2               1   $    AAE2        43746
 LOCAAF2               1   $    AAF2        43762
 LOCAAF3               2   $    AAF3        43763
 BIN_TO_BCD            1   $    AAF5        43765
 LOCAAFE               1   $    AAFE        43774
 VAPP_VCENTRE_1        9   $    AB0D        43789
 VAPP_MSG             18   $    AB14        43796
 VAPP_MSG_AT_Y         9   $    AB17        43799
 LOCAB32               1   $    AB32        43826
 LOCAB3B               1   $    AB3B        43835
 LOCAB72               1   $    AB72        43890
 LOCAB98               1   $    AB98        43928
 MAYBE_INIT_HS         1   $    ABA2        43938
 INIT_HS               2   $    ABAC        43948
 LOCABC2               1   $    ABC2        43970
 LOCABCD               2   $    ABCD        43981
 LOCABE1               2   $    ABE1        44001
 LOCABFF               1   $    ABFF        44031
 LOCAC07               1   $    AC07        44039
 DEFAULTSCOREINITIALS    1   $    AC08        44040
 CHECK_SETTINGS        2   $    AC20        44064
 LOCAC34               1   $    AC34        44084
 HS_NEEDS_INIT         1   $    AC36        44086
 LOCAC3E               1   $    AC3E        44094
 STATE_10              1   $    AC3F        44095
 LOCAC50               1   $    AC50        44112
 LOCAC5E               2   $    AC5E        44126
 LOCAC80               1   $    AC80        44160
 LOCAC9A               1   $    AC9A        44186
 LOCAC9B               3   $    AC9B        44187
 LOCAC9D               1   $    AC9D        44189
 LOCACBF               1   $    ACBF        44223
 LOCACE1               1   $    ACE1        44257
 LOCACE6               1   $    ACE6        44262
 LOCACEC               1   $    ACEC        44268
 LOCACF4               1   $    ACF4        44276
 LOCAD06               1   $    AD06        44294
 LOCAD15               2   $    AD15        44309
 LOCAD22               2   $    AD22        44322
 LOCAD68               2   $    AD68        44392
 LOCAD6B               1   $    AD6B        44395
 STATE_ENTERINITIALS    1   $    AD6E        44398
 LOCAD82               2   $    AD82        44418
 LOCAD93               1   $    AD93        44435
 LOCAD99               2   $    AD99        44441
 LOCADC1               1   $    ADC1        44481
 LOCADC7               1   $    ADC7        44487
 LOCADCD               2   $    ADCD        44493
 TRACK_SPINNER         3   $    ADCE        44494
 LOCADE3               1   $    ADE3        44515
 LOCADE5               1   $    ADE5        44517
 LOCADEA               1   $    ADEA        44522
 LOCAE1C               1   $    AE1C        44572
 LOCAE4E               1   $    AE4E        44622
 LOCAE64               1   $    AE64        44644
 LOCAE82               1   $    AE82        44674
 LOCAECA               1   $    AECA        44746
 LOCAEE3               1   $    AEE3        44771
 LOCAEE8               1   $    AEE8        44776
 LOCAEF8               1   $    AEF8        44792
 LOCAF03               1   $    AF03        44803
 LOCAF0E               1   $    AF0E        44814
 LOCAF26               1   $    AF26        44838
 LOCAF3F               1   $    AF3F        44863
 LOCAF6E               2   $    AF6E        44910
 LOCAF6F               1   $    AF6F        44911
 LOCAF71               2   $    AF71        44913
 VAPP_2DIG_BIN         4   $    AF77        44919
 LOCAF81               1   $    AF81        44929
 LOCAFA1               1   $    AFA1        44961
 LOCAFBC               1   $    AFBC        44988
 LOCAFC8               1   $    AFC8        45000
 LOCAFCB               1   $    AFCB        45003
 LOCAFD4               1   $    AFD4        45012
 LOCAFDB               1   $    AFDB        45019
 LOCAFE1               4   $    AFE1        45025
 LOCAFE9               1   $    AFE9        45033
 LOCB042               1   $    B042        45122
 LOCB081               1   $    B081        45185
 LOCB096               4   $    B096        45206
 SELFRATE_MSGS         1   $    B09B        45211
 LEVELSELBOXPTS        2   $    B0A3        45219
 LOCB0AB               2   $    B0AB        45227
 LOCB0B9               1   $    B0B9        45241
 LOCB0C1               2   $    B0C1        45249
 VAPP_STARTBONUS       2   $    B0C6        45254
 VAPP_SETCOLOR         8   $    B0D1        45265
 LOCB0DC               1   $    B0DC        45276
 VAPP_SETSCALE         3   $    B0DD        45277
 LOCB0E6               1   $    B0E6        45286
 STATE_1A              1   $    B0E7        45287
 LOCB102               1   $    B102        45314
 LOCB115               1   $    B115        45333
 LOCB130               2   $    B130        45360
 LOCB131               1   $    B131        45361
 LOCB144               1   $    B144        45380
 LOCB156               1   $    B156        45398
 LOCB159               1   $    B159        45401
 LOCB15A               2   $    B15A        45402
 LOCB166               1   $    B166        45414
 LOCB183               1   $    B183        45443
 LOCB18F               2   $    B18F        45455
 LOCB1B6               1   $    B1B6        45494
 LOCB1C7               2   $    B1C7        45511
 LOCB1E4               1   $    B1E4        45540
 LOCB1EE               1   $    B1EE        45550
 LOCB1F2               1   $    B1F2        45554
 LOCB1F5               2   $    B1F5        45557
 LOCB209               1   $    B209        45577
 LOCB20C               1   $    B20C        45580
 LOCB20D               1   $    B20D        45581
 LOCB218               2   $    B218        45592
 LOCB230               2   $    B230        45616
 LOCB282               1   $    B282        45698
 LOCB28A               1   $    B28A        45706
 DB_INIT_VI.WORD      10   $    B2BE        45758
 LOCB2CF               1   $    B2CF        45775
 LOCB2D5               1   $    B2D5        45781
 LOCB2DE               1   $    B2DE        45790
 LOCB2EF               1   $    B2EF        45807
 LOCB2F5               1   $    B2F5        45813
 DBLBUF_DONE          10   $    B2FE        45822
 LOCB323               1   $    B323        45859
 LOCB329               1   $    B329        45865
 LOCB332               1   $    B332        45874
 LOCB33F               1   $    B33F        45887
 LOCB349               1   $    B349        45897
 LOCB34B               1   $    B34B        45899
 LOCB367               1   $    B367        45927
 LOCB379               1   $    B379        45945
 LOCB382               1   $    B382        45954
 LOCB390               1   $    B390        45968
 LOCB3BB               2   $    B3BB        46011
 LOCB3C6               1   $    B3C6        46022
 LOCB3D3               2   $    B3D3        46035
 LOCB3D6               1   $    B3D6        46038
 LOCB3E9               3   $    B3E9        46057
 LOCB401               2   $    B401        46081
 LOCB412               1   $    B412        46098
 LOCB414               1   $    B414        46100
 LOCB424               1   $    B424        46116
 LOCB427               1   $    B427        46119
 LOCB42D               1   $    B42D        46125
 LOCB434               1   $    B434        46132
 LOCB445               1   $    B445        46149
 LOCB449               1   $    B449        46153
 LOCB44B               3   $    B44B        46155
 LOCB45C               2   $    B45C        46172
 LOCB465               1   $    B465        46181
 LOCB476               1   $    B476        46198
 LOCB487               1   $    B487        46215
 DRAW_PENDING          1   $    B498        46232
 LOCB4B0               1   $    B4B0        46256
 LOCB4BA               1   $    B4BA        46266
 LOCB4C0               1   $    B4C0        46272
 LOCB545               1   $    B545        46405
 LOCB549               1   $    B549        46409
 LOCB550               2   $    B550        46416
 LOCB557               1   $    B557        46423
 LOCB565               2   $    B565        46437
 LOCB56A               3   $    B56A        46442
 LOCB585               1   $    B585        46469
 DRAW_PLAYER           1   $    B586        46470
 LOCB5AC               3   $    B5AC        46508
 DRAW_ENEMIES          1   $    B5AD        46509
 LOCB5B6               1   $    B5B6        46518
 LOCB5D2               1   $    B5D2        46546
 LOCB5D6               1   $    B5D6        46550
 DRAWENEMYBYTYPE       1   $    B5D7        46551
 ENEMYDRAWVECS         2   $    B5E1        46561
 DRAWFLIPPER           1   $    B5EB        46571
 LOCB602               1   $    B602        46594
 LOCB60B               1   $    B60B        46603
 DRAWTANKER            1   $    B60F        46607
 TANKERICONTABLE       1   $    B61E        46622
 DRAWSPIKER            1   $    B622        46626
 LOCB634               2   $    B634        46644
 LOCB65C               1   $    B65C        46684
 LOCB65E               2   $    B65E        46686
 LOCB673               1   $    B673        46707
 LOCB675               2   $    B675        46709
 LOCB687               1   $    B687        46727
 LOCB68B               1   $    B68B        46731
 DRAWFUSEBALL          1   $    B69B        46747
 LOCB6D5               1   $    B6D5        46805
 LOCB6FA               2   $    B6FA        46842
 LOCB709               1   $    B709        46857
 LOCB710               1   $    B710        46864
 DRAWPULSAR            1   $    B71B        46875
 LOCB724               1   $    B724        46884
 LOCB736               1   $    B736        46902
 LOCB74C               1   $    B74C        46924
 LOCB754               1   $    B754        46932
 PULSARANIMFRAMES      1   $    B755        46933
 DRAW_SHOTS            1   $    B75B        46939
 LOCB75F               1   $    B75F        46943
 LOCB776               1   $    B776        46966
 LOCB77E               1   $    B77E        46974
 LOCB781               1   $    B781        46977
 LOCB796               2   $    B796        46998
 DRAW_EXPLOSIONS       1   $    B79A        47002
 LOCB7A2               1   $    B7A2        47010
 LOCB7BD               1   $    B7BD        47037
 LOCB7C9               1   $    B7C9        47049
 LOCB7D2               2   $    B7D2        47058
 LOCB7E4               2   $    B7E4        47076
 LOCB7E5               1   $    B7E5        47077
 VAPP_MID_GRAPHIC      1   $    B7EB        47083
 LOCB811               1   $    B811        47121
 LOCB819               1   $    B819        47129
 LOCB82A               1   $    B82A        47146
 LOCB83D               1   $    B83D        47165
 LOCB84E               1   $    B84E        47182
 LOCB857               2   $    B857        47191
 LOCB85F               1   $    B85F        47199
 LOCB875               1   $    B875        47221
 LOCB888               1   $    B888        47240
 LOCB896               1   $    B896        47254
 LOCB8BA               1   $    B8BA        47290
 LOCB8E5               1   $    B8E5        47333
 LOCB922               1   $    B922        47394
 LOCB935               1   $    B935        47413
 LOCB944               3   $    B944        47428
 LOCB955               1   $    B955        47445
 LOCB95D               1   $    B95D        47453
 LOCB967               2   $    B967        47463
 LOCB975               1   $    B975        47477
 LOCB97B               1   $    B97B        47483
 LEV_X                 3   $    B97C        47484
 LEV_Y                 3   $    BA7C        47740
 LEV_ANGLE             1   $    BB7C        47996
 LEV_REMAP             1   $    BC7C        48252
 LEV_SCALE             1   $    BC8C        48268
 LEV_Y3D               1   $    BC9C        48284
 LEV_Y2D               2   $    BCAC        48300
 LEV_Y2DB              2   $    BCBC        48316
 LEV_OPEN              2   $    BCCC        48332
 LEV_FSCALE            1   $    BCDC        48348
 LEV_FSCALE2           1   $    BCEC        48364
 GRAPHIC_AT_MID        4   $    BCFD        48381
 LOCBD09               1   $    BD09        48393
 LOCBD23               1   $    BD23        48419
 LOCBD3E               3   $    BD3E        48446
 LOCBD5E               1   $    BD5E        48478
 LOCBD79               1   $    BD79        48505
 LOCBD7B               1   $    BD7B        48507
 LOCBD8C               1   $    BD8C        48524
 LOCBD90               1   $    BD90        48528
 DRAW_LINEGFX          3   $    BDA0        48544
 LOCBDCB               2   $    BDCB        48587
 LOCBDD6               2   $    BDD6        48598
 LOCBE1A               1   $    BE1A        48666
 LOCBE1D               1   $    BE1D        48669
 LOCBE26               1   $    BE26        48678
 LOCBE31               2   $    BE31        48689
 LOCBE33               1   $    BE33        48691
 LOCBE48               1   $    BE48        48712
 LOCBE4B               1   $    BE4B        48715
 LOCBE54               1   $    BE54        48724
 LOCBE5B               1   $    BE5B        48731
 LOCBE5D               1   $    BE5D        48733
 LOCBEDB               1   $    BEDB        48859
 LOCBEE6               1   $    BEE6        48870
 LOCBF11               1   $    BF11        48913
 LOCBF22               1   $    BF22        48930
 LOCBF38               1   $    BF38        48952
 LOCBF43               1   $    BF43        48963
 LOCBF56               1   $    BF56        48982
 LOCBF67               1   $    BF67        48999
 LOCBF7D               1   $    BF7D        49021
 LOCBF88               1   $    BF88        49032
 LOCBFAF               1   $    BFAF        49071
 LOCBFB6               1   $    BFB6        49078
 LOCBFC4               1   $    BFC4        49092
 CLAWDRAWDATA          2   $    BFD2        49106
 LOCC098               8   $    C098        49304
 LOCC0B3               1   $    C0B3        49331
 LOCC0C0               1   $    C0C0        49344
 LOCC0C7               1   $    C0C7        49351
 LOCC0DC               1   $    C0DC        49372
 LOCC0E3               1   $    C0E3        49379
 LOCC0E7               1   $    C0E7        49383
 LOCC115               1   $    C115        49429
 LOCC11A               1   $    C11A        49434
 LOCC12D               1   $    C12D        49453
 LOCC12F               2   $    C12F        49455
 LOCC155               1   $    C155        49493
 LOCC158               1   $    C158        49496
 LOCC16B               1   $    C16B        49515
 INITVECTOR            3   $    C16E        49518
 LOCC185               1   $    C185        49541
 SETLEVELCOLORS        3   $    C196        49558
 LOOPLOADCOLORS        1   $    C1A6        49574
 LOCC1C3               1   $    C1C3        49603
 ALEVELCOLORS          2   $    C1FD        49661
 LEVELSELECTCOLORS     1   $    C22D        49709
 LOCC235               1   $    C235        49717
 LOCC275               1   $    C275        49781
 LOCC286               1   $    C286        49798
 LOCC28D               1   $    C28D        49805
 LOCC2A4               1   $    C2A4        49828
 LOCC2C9               1   $    C2C9        49865
 LOCC2E4               1   $    C2E4        49892
 GET_TUBE_NO           2   $    C2E8        49896
 LOCC2F3               1   $    C2F3        49907
 LOCC2F5               1   $    C2F5        49909
 LOCC2FB               1   $    C2FB        49915
 LOCC30D               1   $    C30D        49933
 LOCC323               1   $    C323        49955
 LOCC339               2   $    C339        49977
 LOCC348               1   $    C348        49992
 LOCC34E               1   $    C34E        49998
 LOCC350               1   $    C350        50000
 LOCC36E               1   $    C36E        50030
 LOCC39B               1   $    C39B        50075
 LOCC3A1               1   $    C3A1        50081
 LOCC3B2               1   $    C3B2        50098
 LOCC3B9               1   $    C3B9        50105
 LOCC3BA               3   $    C3BA        50106
 LOCC3EE               1   $    C3EE        50158
 LOCC423               3   $    C423        50211
 LOCC43C               2   $    C43C        50236
 LOCC453               2   $    C453        50259
 LOCC460               1   $    C460        50272
 LOCC46B               1   $    C46B        50283
 LOCC46F               1   $    C46F        50287
 LOCC471               2   $    C471        50289
 LOCC473               2   $    C473        50291
 LOCC47F               1   $    C47F        50303
 LOCC4A0               1   $    C4A0        50336
 LOCC4A3               1   $    C4A3        50339
 LOCC4AD               2   $    C4AD        50349
 LOCC4C4               1   $    C4C4        50372
 LOCC4C7               1   $    C4C7        50375
 LOCC4D1               2   $    C4D1        50385
 LOCC4E1               1   $    C4E1        50401
 LOCC50D               1   $    C50D        50445
 LOCC528               1   $    C528        50472
 LOCC54D               1   $    C54D        50509
 LOCC56B               1   $    C56B        50539
 LOCC587               1   $    C587        50567
 LOCC590               2   $    C590        50576
 LOCC5A4               1   $    C5A4        50596
 LOCC5B1               1   $    C5B1        50609
 LOCC5C1               2   $    C5C1        50625
 LOCC5C2               1   $    C5C2        50626
 LOCC5C8               1   $    C5C8        50632
 LOCC5D3               2   $    C5D3        50643
 LOCC5EC               1   $    C5EC        50668
 LOCC5EE               1   $    C5EE        50670
 LOCC5F2               1   $    C5F2        50674
 LOCC60D               1   $    C60D        50701
 LOCC61A               1   $    C61A        50714
 LOCC62D               1   $    C62D        50733
 LOCC641               1   $    C641        50753
 LOCC649               1   $    C649        50761
 LOCC64C               1   $    C64C        50764
 LOCC652               1   $    C652        50770
 LOCC669               1   $    C669        50793
 LOCC66D               1   $    C66D        50797
 LOCC6C7               2   $    C6C7        50887
 LOCC6D2               1   $    C6D2        50898
 LOCC6E4               1   $    C6E4        50916
 LOCC721               1   $    C721        50977
 LOCC73B               2   $    C73B        51003
 LOCC73C               1   $    C73C        51004
 VAPP_TO_X_            5   $    C765        51045
 LOCC772               3   $    C772        51058
 LOCC774               1   $    C774        51060
 LOCC7A0               1   $    C7A0        51104
 GAMEMAINLOOP          2   $    C7A7        51111
 LOCC7BD               1   $    C7BD        51133
 LOCC7D9               1   $    C7D9        51161
 GAMESTATEDISPATCHTABLE    2   $    C7DA        51162
 STATE_DELAY           1   $    C800        51200
 LOCC80D               1   $    C80D        51213
 LOCC818               2   $    C818        51224
 CHECK_START           1   $    C81B        51227
 LOCC830               1   $    C830        51248
 LOCC835               1   $    C835        51253
 LOCC83A               1   $    C83A        51258
 LOCC857               1   $    C857        51287
 LOCC85F               1   $    C85F        51295
 LOCC86B               1   $    C86B        51307
 LOCC86E               1   $    C86E        51310
 LOCC871               1   $    C871        51313
 LOCC890               3   $    C890        51344
 LOCC891               1   $    C891        51345
 LOCC89F               1   $    C89F        51359
 LOCC8B1               1   $    C8B1        51377
 LOCC8C4               1   $    C8C4        51396
 LOCC8CA               1   $    C8CA        51402
 LOCC8D2               3   $    C8D2        51410
 LOCC8D9               2   $    C8D9        51417
 LOCC8E3               3   $    C8E3        51427
 LOCC8EE               1   $    C8EE        51438
 SETDECIMALIFPIRATED    1   $    C8F5        51445
 LOCC901               2   $    C901        51457
 LOCC90B               1   $    C90B        51467
 STATE_GAMESTARTUP     1   $    C90C        51468
 LOCC919               1   $    C919        51481
 LOCC921               1   $    C921        51489
 STATE_LEVELSTARTUP    1   $    C940        51520
 LOCC967               1   $    C967        51559
 LOCC96C               2   $    C96C        51564
 STATE_DELAYTHENPLAY    1   $    C97B        51579
 STATE_ZOOMOFFEND      1   $    C98C        51596
 LEVEL_ALREADY_MAXED    1   $    C998        51608
 LOCC9AC               1   $    C9AC        51628
 STATE_DEATH           1   $    C9AF        51631
 ANYPLAYERLIVESLEFT    1   $    C9C3        51651
 PLAYEROUTOFLIVES      2   $    C9D1        51665
 LOCC9DB               1   $    C9DB        51675
 LOCC9EA               1   $    C9EA        51690
 LOCC9F0               1   $    C9F0        51696
 STATE_LEVELBEGIN      2   $    C9F1        51697
 STATE_14              1   $    CA18        51736
 LOCCA38               2   $    CA38        51768
 LOCCA48               3   $    CA48        51784
 LOCCA57               2   $    CA57        51799
 LOCCA62               2   $    CA62        51810
 LOCCA66               1   $    CA66        51814
 INC_SCORE             4   $    CA6C        51820
 LOCCA77               1   $    CA77        51831
 SCOREBYTYPE           1   $    CA91        51857
 LOCCAA6               1   $    CAA6        51878
 LOCCABB               2   $    CABB        51899
 LOCCAC6               1   $    CAC6        51910
 LOCCAD1               1   $    CAD1        51921
 LOCCADC               5   $    CADC        51932
 LOCCAEE               4   $    CAEE        51950
 LOCCAEF               2   $    CAEF        51951
 ENEMYSCOREVALUELSB    1   $    CAF1        51953
 ENEMYSCOREVALUEMSB    1   $    CAF9        51961
 LOCCB01               1   $    CB01        51969
 LOCCBCB               1   $    CBCB        52171
 LOCCBCC               3   $    CBCC        52172
 LOCCBCE               1   $    CBCE        52174
 LOCCCB0               1   $    CCB0        52400
 LOCCCB5               1   $    CCB5        52405
 LOCCCB9               2   $    CCB9        52409
 LOCCCBD               1   $    CCBD        52413
 LOCCCC1               3   $    CCC1        52417
 LOCCCC3              11   $    CCC3        52419
 LOCCCC7               1   $    CCC7        52423
 LOCCCCB               1   $    CCCB        52427
 LOCCCCC               3   $    CCCC        52428
 LOCCCCE               2   $    CCCE        52430
 LOCCCE1               1   $    CCE1        52449
 LOCCCE9               1   $    CCE9        52457
 LOCCCEA               1   $    CCEA        52458
 LOCCCEE               1   $    CCEE        52462
 LOCCCF2               1   $    CCF2        52466
 LOCCCF6               1   $    CCF6        52470
 LOCCCFA               1   $    CCFA        52474
 LOCCCFE               1   $    CCFE        52478
 LOCCD02               1   $    CD02        52482
 SOUND_PULSAR          2   $    CD06        52486
 LOCCD0A               1   $    CD0A        52490
 LOCCD0C               1   $    CD0C        52492
 LOCCD1C               1   $    CD1C        52508
 LOCCD36               1   $    CD36        52534
 LOCCD43               1   $    CD43        52547
 LOCCD51               2   $    CD51        52561
 LOCCD54               1   $    CD54        52564
 LOCCD63               1   $    CD63        52579
 LOCCD6B               1   $    CD6B        52587
 LOCCD7F               2   $    CD7F        52607
 LOCCD8B               1   $    CD8B        52619
 LOCCD8E               4   $    CD8E        52622
 LOCCD94               1   $    CD94        52628
 LOCCD95               2   $    CD95        52629
 LOCCDA8               1   $    CDA8        52648
 LOCCDB0               1   $    CDB0        52656
 LOCCDB7               1   $    CDB7        52663
 LOCCDC6               1   $    CDC6        52678
 SCALEOFFSET           1   $    CDDE        52702
 SHIPSLEFTOFFSET       1   $    CDE0        52704
 SCORESOFFSET          1   $    CDE2        52706
 HISCOREOFFSET         1   $    CDE4        52708
 HSINITIDX             1   $    CDE5        52709
 HDR_TEMPLATE         13   $    CDE6        52710
 P1SCALEOFF            1   $    CDF0        52720
 P1SCOREOFF            1   $    CDF2        52722
 P1SHIPOFF             1   $    CE08        52744
 HISCOREOFF            1   $    CE1A        52762
 LEVELNUMOFFSET        1   $    CE2C        52780
 HSINITOFF             1   $    CE36        52790
 P2SCALEOFF            1   $    CE42        52802
 P2SCOREOFF            1   $    CE44        52804
 P2SHIPOFF             1   $    CE5A        52826
 HDR_TEMPLATE_END      2   $    CE65        52837
 HDR_TEMPLATE_LEN      1   $    CE66        52838
 DBLBUF_ADDR_A         6   $    CE68        52840
 LOCCE6E               2   $    CE6E        52846
 DBLBUF_ADDR_B         4   $    CE7A        52858
 LOCCE86               2   $    CE86        52870
 DBLBUF_VJSR_LOC       2   $    CE8C        52876
 DBLBUF_VJMP_C         4   $    CE9E        52894
 DBLBUF_VJMP_D         2   $    CEB0        52912
 LOCCEC2               1   $    CEC2        52930
 LOCCEC3               1   $    CEC3        52931
 LOCCEC4               2   $    CEC4        52932
 LOCCEC5               1   $    CEC5        52933
 LOCCEC6               2   $    CEC6        52934
 LOCCEC7               1   $    CEC7        52935
 GRAPHIC_TABLE         8   $    CEC8        52936
 LOCCF24               1   $    CF24        53028
 LOCCF26               1   $    CF26        53030
 LOCCF30               1   $    CF30        53040
 LOCCF31               1   $    CF31        53041
 LOCCF48               1   $    CF48        53064
 LOCCF4A               4   $    CF4A        53066
 LOCCF57               1   $    CF57        53079
 LOCCF63               1   $    CF63        53091
 LOCCF6F               1   $    CF6F        53103
 LOCCF7C               2   $    CF7C        53116
 LOCCF87               1   $    CF87        53127
 LOCCF8B               3   $    CF8B        53131
 LOCCFA1               1   $    CFA1        53153
 LOCCFA9               4   $    CFA9        53161
 LOCCFB7               1   $    CFB7        53175
 LOCCFBD               1   $    CFBD        53181
 LOCCFD9               1   $    CFD9        53209
 LOCCFE1               3   $    CFE1        53217
 LOCCFFA               1   $    CFFA        53242
 LOCD000               1   $    D000        53248
 LOCD002               1   $    D002        53250
 LOCD004               1   $    D004        53252
 LOCD00D               1   $    D00D        53261
 LOCD01A               2   $    D01A        53274
 LOCD022               1   $    D022        53282
 LOCD02D               1   $    D02D        53293
 LOCD030               3   $    D030        53296
 MSGENGAMEOVER         1   $    D031        53297
 MSGS_EN              31   $    D031        53297
 MSGENPLAYER           1   $    D033        53299
 MSGENPLAYER2          1   $    D035        53301
 MSGENSTART            1   $    D037        53303
 MSGENPLAY             1   $    D039        53305
 MSGENINITIALS         1   $    D03B        53307
 MSGENSPINKNOB         1   $    D03D        53309
 MSGENPRESSFIRE        1   $    D03F        53311
 MSGENHISCORES         1   $    D041        53313
 MSGENRANKING          1   $    D043        53315
 MSGENRATESELF         1   $    D045        53317
 MSGENNOVICE           1   $    D047        53319
 MSGENEXPERT           1   $    D049        53321
 MSGENBONUS            1   $    D04B        53323
 MSGENTIME             1   $    D04D        53325
 MSGENLEVEL            1   $    D04F        53327
 MSGENHOLE             1   $    D051        53329
 MSGENINSCOIN          1   $    D053        53331
 MSGENFREEPLAY         1   $    D055        53333
 MSGEN1COIN2CRD        1   $    D057        53335
 MSGEN1COIN1CRD        1   $    D059        53337
 MSGEN2COIN1CRD        1   $    D05B        53339
 MSGENATARI            1   $    D05D        53341
 MSGENCREDITS          1   $    D05F        53343
 MSGENBONUSSPC         1   $    D061        53345
 MSGEN2CRDMIN          1   $    D063        53347
 MSGENBONUSEV          1   $    D065        53349
 MSGENAVOIDSPK         1   $    D067        53351
 MSGENLEVELNS          1   $    D069        53353
 MSGENRECHARGE         1   $    D06B        53355
 MSGS_FR               1   $    D06D        53357
 MSGS_DE               1   $    D0A9        53417
 MSGS_ES               1   $    D0E5        53477
 AMSGSCOLORANDYPOS     2   $    D121        53537
 XPOSMSGGAMEOVER       1   $    D15D        53597
 SMSGGAMEOVER          -   $    D15E        53598
 XPOSMSGGAMEOVERFR     1   $    D167        53607
 SMSGGAMEOVERFR        -   $    D168        53608
 XPOSMSGGAMEOVERGER    1   $    D175        53621
 SMSGGAMEOVERGER       -   $    D176        53622
 XPOSMSGGAMEOVERSPN    1   $    D17F        53631
 XPOSMSGPLAYER         2   $    D18F        53647
 SMSGPLAYER            -   $    D190        53648
 XPOSMSGPLAYERFR       2   $    D197        53655
 SMSGPLAYERFR          -   $    D198        53656
 XPOSMSGPLAYERGER      2   $    D19F        53663
 SMSGPLAYERGER         -   $    D1A0        53664
 XPOSMSGPLAYERSPN      2   $    D1A8        53672
 SMSGPLAYERSPN         -   $    D1A9        53673
 XPOSMSGSTART          1   $    D1B1        53681
 SMSGSTART             -   $    D1B2        53682
 XPOSMSGSTARTFR        1   $    D1BD        53693
 SMSGSTARTFR           -   $    D1BE        53694
 XPOSMSGSTARTGER       1   $    D1CF        53711
 SMSGSTARTGER          -   $    D1D0        53712
 XPOSMSGSTARTSPN       1   $    D1DE        53726
 SMSGSTARTSPN          -   $    D1DF        53727
 XPOSMSGPLAY           1   $    D1EB        53739
 SMSGPLAY              -   $    D1EC        53740
 XPOSMSGPLAYFR         1   $    D1F0        53744
 SMSGPLAYFR            -   $    D1F1        53745
 XPOSMSGPLAYGER        1   $    D1F6        53750
 SMSGPLAYGER           -   $    D1F7        53751
 XPOSMSGPLAYSPN        1   $    D1FC        53756
 SMSGPLAYSPN           -   $    D1FD        53757
 XPOSMSGINITIALS       1   $    D203        53763
 SMSGINITIALS          -   $    D204        53764
 XPOSMSGINITIALSFR     1   $    D217        53783
 SMSGINITIALSFR        -   $    D218        53784
 XPOSMSGINITIALSGER    1   $    D230        53808
 SMSGINITIALSGER       -   $    D231        53809
 XPOSMSGINITIALSSPN    1   $    D24D        53837
 SMSGINITIALSSPN       -   $    D24E        53838
 XPOSMSGSPINKNOB       1   $    D261        53857
 SMSGSPINKNOB          -   $    D262        53858
 XPOSMSGSPINKNOBFR     1   $    D275        53877
 SMSGSPINKNOBFR        -   $    D276        53878
 XPOSMSGSPINKNOBGER    1   $    D294        53908
 SMSGSPINKNOBGER       -   $    D295        53909
 XPOSMSGSPINKNOBSPN    1   $    D2AE        53934
 SMSGSPINKNOBSPN       -   $    D2AF        53935
 XPOSMSGPRESSFIRE      1   $    D2CB        53963
 SMSGPRESSFIRE         -   $    D2CC        53964
 XPOSMSGPRESSFIREFR    1   $    D2E0        53984
 SMSGPRESSFIREFR       -   $    D2E1        53985
 XPOSMSGPRESSFIREGER    1   $    D2FB        54011
 SMSGPRESSFIREGER      -   $    D2FC        54012
 XPOSMSGPRESSFIRESPN    1   $    D316        54038
 SMSGPRESSFIRESPN      -   $    D317        54039
 XPOSMSGHISCORES       1   $    D333        54067
 SMSGHISCORES          -   $    D334        54068
 XPOSMSGHISCORESFR     1   $    D33F        54079
 SMSGHISCORESFR        -   $    D340        54080
 XPOSMSGHISCORESGER    1   $    D350        54096
 SMSGHISCORESGER       -   $    D351        54097
 XPOSMSGHISCORESSPN    1   $    D35E        54110
 SMSGHISCORESSPN       -   $    D35F        54111
 XPOSMSGRANKING        1   $    D366        54118
 SMSGRANKING           -   $    D367        54119
 XPOSMSGRANKINGFR      1   $    D379        54137
 SMSGRANKINGFR         -   $    D37A        54138
 XPOSMSGRANKINGGER     1   $    D38B        54155
 SMSGRANKINGGER        -   $    D38C        54156
 XPOSMSGRANKINGSPN     1   $    D3A0        54176
 SMSGRANKINGSPN        -   $    D3A1        54177
 XPOSMSGRATESELF       1   $    D3B0        54192
 SMSGRATESELF          -   $    D3B1        54193
 XPOSMSGRATESELFFR     1   $    D3BE        54206
 SMSGRATESELFFR        -   $    D3BF        54207
 XPOSMSGRATESELFGER    1   $    D3CB        54219
 SMSGRATESELFGER       -   $    D3CC        54220
 XPOSMSGRATESELFSPN    1   $    D3DA        54234
 SMSGRATESELFSPN       -   $    D3DB        54235
 XPOSMSGNOVICE         2   $    D3E6        54246
 SMSGNOVICE            -   $    D3E7        54247
 XPOSMSGNOVICESPN      1   $    D3ED        54253
 SMSGNOVICESPN         -   $    D3EE        54254
 XPOSMSGNOVICEGER      1   $    D3F5        54261
 SMSGNOVICEGER         -   $    D3F6        54262
 XPOSMSGEXPERT         2   $    D3FF        54271
 SMSGEXPERT            -   $    D400        54272
 XPOSMSGEXPERTSPN      1   $    D406        54278
 SMSGEXPERTSPN         -   $    D407        54279
 XPOSMSGEXPERTGER      1   $    D40E        54286
 SMSGEXPERTGER         -   $    D40F        54287
 XPOSMSGBONUS          4   $    D417        54295
 SMSGBONUS             -   $    D418        54296
 XPOSMSGTIME           1   $    D41D        54301
 SMSGTIME              -   $    D41E        54302
 XPOSMSGTIMEFR         1   $    D422        54306
 SMSGTIMEFR            -   $    D423        54307
 XPOSMSGTIMEGER        1   $    D428        54312
 SMSGTIMEGER           -   $    D429        54313
 XPOSMSGTIMESPN        1   $    D42D        54317
 SMSGTIMESPN           -   $    D42E        54318
 XPOSMSGLEVEL          1   $    D434        54324
 SMSGLEVEL             -   $    D435        54325
 XPOSMSGLEVELFR        1   $    D43A        54330
 SMSGLEVELFR           -   $    D43B        54331
 XPOSMSGLEVELGER       1   $    D441        54337
 SMSGLEVELGER          -   $    D442        54338
 XPOSMSGLEVELSPN       1   $    D446        54342
 SMSGLEVELSPN          -   $    D447        54343
 XPOSMSGHOLE           1   $    D44C        54348
 SMSGHOLE              -   $    D44D        54349
 XPOSMSGHOLEFR         1   $    D451        54353
 SMSGHOLEFR            -   $    D452        54354
 XPOSMSGHOLESPN        1   $    D456        54358
 SMSGHOLESPN           -   $    D457        54359
 XPOSMSGHOLEGER        1   $    D45B        54363
 SMSGHOLEGER           -   $    D45C        54364
 XPOSMSGINSCOIN        1   $    D460        54368
 SMSGINSCOIN           -   $    D461        54369
 XPOSMSGINSCOINFR      1   $    D46D        54381
 SMSGINSCOINFR         -   $    D46E        54382
 XPOSMSGINSCOINGER     1   $    D483        54403
 SMSGINSCOINGER        -   $    D484        54404
 XPOSMSGINSCOINSPN     1   $    D492        54418
 SMSGINSCOINSPN        -   $    D493        54419
 XPOSMSGFREEPLAY       4   $    D4A1        54433
 SMSGFREEPLAY          -   $    D4A2        54434
 XPOSMSG1COIN2CRD      1   $    D4AB        54443
 SMSG1COIN2CRD         -   $    D4AC        54444
 XPOSMSG1COIN2CRDFR    1   $    D4BA        54458
 SMSG1COIN2CRDFR       -   $    D4BB        54459
 XPOSMSG1COIN2CRDGER    1   $    D4CC        54476
 SMSG1COIN2CRDGER      -   $    D4CD        54477
 XPOSMSG1COIN2CRDSPN    1   $    D4DD        54493
 SMSG1COIN2CRDSPN      -   $    D4DE        54494
 XPOSMSG1COIN1CRD      1   $    D4EF        54511
 SMSG1COIN1CRD         -   $    D4F0        54512
 XPOSMSG1COIN1CRDFR    1   $    D4FD        54525
 SMSG1COIN1CRDFR       -   $    D4FE        54526
 XPOSMSG1COIN1CRDGER    1   $    D50E        54542
 SMSG1COIN1CRDGER      -   $    D50F        54543
 XPOSMSG1COIN1CRDSPN    1   $    D51F        54559
 SMSG1COIN1CRDSPN      -   $    D520        54560
 XPOSMSG2COIN1CRD      1   $    D530        54576
 SMSG2COIN1CRD         -   $    D531        54577
 XPOSMSG2COIN1CRDFR    1   $    D53F        54591
 SMSG2COIN1CRDFR       -   $    D540        54592
 XPOSMSG2COIN1CRDGER    1   $    D551        54609
 SMSG2COIN1CRDGER      -   $    D552        54610
 XPOSMSG2COIN1CRDSPN    1   $    D563        54627
 SMSG2COIN1CRDSPN      -   $    D564        54628
 XPOSMSGATARI          5   $    D575        54645
 SMSGATARI             -   $    D576        54646
 XPOSMSGCREDITS        2   $    D585        54661
 SMSGCREDITS           -   $    D586        54662
 XPOSMSGCREDITSGER     1   $    D58E        54670
 SMSGCREDITSGER        -   $    D58F        54671
 XPOSMSGCREDITSSPN     1   $    D597        54679
 SMSGCREDITSSPN        -   $    D598        54680
 XPOSMSGBONUSSPC       4   $    D5A1        54689
 SMSGBONUSSPC          -   $    D5A2        54690
 XPOSMSG2CRDMIN        1   $    D5A8        54696
 SMSG2CRDMIN           -   $    D5A9        54697
 XPOSMSG2CRDMINFR      1   $    D5B9        54713
 SMSG2CRDMINFR         -   $    D5BA        54714
 XPOSMSG2CRDMINGER     1   $    D5C8        54728
 SMSG2CRDMINGER        -   $    D5C9        54729
 XPOSMSG2CRDMINSPN     1   $    D5D9        54745
 SMSG2CRDMINSPN        -   $    D5DA        54746
 XPOSMSGBONUSEV        1   $    D5E9        54761
 SMSGBONUSEV           -   $    D5EA        54762
 XPOSMSGBONUSEVFR      1   $    D5F6        54774
 SMSGBONUSEVFR         -   $    D5F7        54775
 XPOSMSGBONUSEVGER     1   $    D604        54788
 SMSGBONUSEVGER        -   $    D605        54789
 XPOSMSGBONUSEVSPN     1   $    D610        54800
 SMSGBONUSEVSPN        -   $    D611        54801
 XPOSMSGAVOIDSPK       1   $    D61C        54812
 SMSGAVOIDSPK          -   $    D61D        54813
 XPOSMSGAVOIDSPKFR     1   $    D629        54825
 SMSGAVOIDSPKFR        -   $    D62A        54826
 XPOSMSGAVOIDSPKGER    1   $    D63E        54846
 SMSGAVOIDSPKGER       -   $    D63F        54847
 XPOSMSGAVOIDSPKSPN    1   $    D651        54865
 SMSGAVOIDSPKSPN       -   $    D652        54866
 XPOSMSGLEVELNS        1   $    D662        54882
 SMSGLEVELNS           -   $    D663        54883
 XPOSMSGLEVELNSFR      1   $    D668        54888
 SMSGLEVELNSFR         -   $    D669        54889
 XPOSMSGLEVELNSGER     1   $    D66F        54895
 SMSGLEVELNSGER        -   $    D670        54896
 XPOSMSGLEVELNSSPN     1   $    D674        54900
 SMSGLEVELNSSPN        -   $    D675        54901
 XPOSMSGRECHARGE       2   $    D67A        54906
 SMSGRECHARGE          -   $    D67B        54907
 XPOSMSGRECHARGEGER    1   $    D68F        54927
 SMSGRECHARGEGER       -   $    D690        54928
 XPOSMSGRECHARGESPN    1   $    D6A1        54945
 SMSGRECHARGESPN       -   $    D6A2        54946
 LANGUAGE_BASE_TBL     2   $    D6B3        54963
 READ_OPTSWS           2   $    D6BB        54971
 BONUS_PTS_TBL         1   $    D6F7        55031
 INIT_LIVES_TBL        1   $    D6FF        55039
 NMI_IRQ_BRK           2   $    D704        55044
 LOCD713               1   $    D713        55059
 LOCD717               1   $    D717        55063
 LOCD734               1   $    D734        55092
 LOCD76B               1   $    D76B        55147
 LOCD771               1   $    D771        55153
 LOCD777               1   $    D777        55159
 LOCD791               3   $    D791        55185
 LOCD7B8               2   $    D7B8        55224
 LOCD7C9               4   $    D7C9        55241
 LOCD7D7               1   $    D7D7        55255
 LOCD7DD               1   $    D7DD        55261
 STATE_SERVICEDISPLAY    1   $    D7E1        55265
 LOCD803               3   $    D803        55299
 LOCD804               1   $    D804        55300
 LOCD81F               1   $    D81F        55327
 LOCD864               1   $    D864        55396
 LOCD86C               1   $    D86C        55404
 LOCD877               2   $    D877        55415
 LOCD886               1   $    D886        55430
 VAPP_LDRAW_Y_X_2DIG_A    2   $    D8A9        55465
 TEST_MAGIC_BITS       2   $    D8B6        55478
 LOCD8BA               1   $    D8BA        55482
 LOCD8C2               1   $    D8C2        55490
 LOCD8CA               1   $    D8CA        55498
 LOCD8CD               1   $    D8CD        55501
 LOCD8D9               1   $    D8D9        55513
 LOCD8DA               1   $    D8DA        55514
 LOCD8E9               1   $    D8E9        55529
 LOCD8ED               1   $    D8ED        55533
 LOCD8F7               3   $    D8F7        55543
 LOCD8FC               1   $    D8FC        55548
 LOCD914               3   $    D914        55572
 LOCD919               1   $    D919        55577
 LOCD92F               1   $    D92F        55599
 LOCD931               1   $    D931        55601
 LOCD93A               1   $    D93A        55610
 RESET                 3   $    D93F        55615
 LOCD94D               1   $    D94D        55629
 LOCD953               1   $    D953        55635
 LOCD95F               1   $    D95F        55647
 LOCD97A               1   $    D97A        55674
 LOCD98A               2   $    D98A        55690
 BEGINSELFTEST         1   $    D9A9        55721
 LOCD9AB               1   $    D9AB        55723
 LOCD9AE               1   $    D9AE        55726
 LOCD9B3               1   $    D9B3        55731
 LOCD9B9               1   $    D9B9        55737
 LOCD9BC               1   $    D9BC        55740
 TESTMIDDLERAM         -   $    D9D6        55766
 LOCD9DA               1   $    D9DA        55770
 LOCD9E0               1   $    D9E0        55776
 LOCD9E7               1   $    D9E7        55783
 LOCD9E9               1   $    D9E9        55785
 LOCD9F2               1   $    D9F2        55794
 LOCDA06               1   $    DA06        55814
 SELFTESTROM           1   $    DA0A        55818
 LOCDA14               1   $    DA14        55828
 LOCDA19               2   $    DA19        55833
 LOCDA32               1   $    DA32        55858
 LOCDA44               1   $    DA44        55876
 LOCDA49               1   $    DA49        55881
 LOCDA53               1   $    DA53        55891
 LOCDA58               1   $    DA58        55896
 LOCDA62               1   $    DA62        55906
 LOCDA76               1   $    DA76        55926
 LOCDA7A               1   $    DA7A        55930
 LOCDA8D               1   $    DA8D        55949
 LOCDA8F               1   $    DA8F        55951
 LOCDA91               2   $    DA91        55953
 LOCDA96               1   $    DA96        55958
 LOCDAA9               1   $    DAA9        55977
 LOCDAD5               1   $    DAD5        56021
 LOCDAD8               1   $    DAD8        56024
 LOCDADC               1   $    DADC        56028
 LOCDAF0               1   $    DAF0        56048
 DEADLOCK              1   $    DAF7        56055
 LOCDAF9               1   $    DAF9        56057
 LOCDB01               2   $    DB01        56065
 DRAW_SELFTEST_SCR     1   $    DB0F        56079
 LOCDB19               1   $    DB19        56089
 SELFTEST_6            1   $    DB22        56098
 LOCDB4C               1   $    DB4C        56140
 SELFTEST_0            1   $    DB5A        56154
 LOCDB6E               1   $    DB6E        56174
 SELFTEST_5            1   $    DB6F        56175
 SELFTEST_4            1   $    DB7E        56190
 SELFTEST_2            1   $    DB84        56196
 LOCDB88               2   $    DB88        56200
 LOCDB8F               1   $    DB8F        56207
 SELFTEST_3            1   $    DB9A        56218
 LOCDBA2               1   $    DBA2        56226
 LOCDBD5               1   $    DBD5        56277
 LOCDBD6               1   $    DBD6        56278
 GET_DIFF_BITS         2   $    DBE0        56288
 SELFTEST_1            1   $    DBF7        56311
 LOCDC15               2   $    DC15        56341
 LOCDC19               2   $    DC19        56345
 LOCDC27               2   $    DC27        56359
 LOCDC38               1   $    DC38        56376
 LOCDC47               1   $    DC47        56391
 LOCDC78               1   $    DC78        56440
 LOCDC7E               2   $    DC7E        56446
 LOCDC87               1   $    DC87        56455
 LOCDCA4               1   $    DCA4        56484
 LOCDCB5               1   $    DCB5        56501
 LOCDCC0               1   $    DCC0        56512
 LOCDCE1               1   $    DCE1        56545
 DIVIDE                2   $    DCE6        56550
 LOCDCFE               1   $    DCFE        56574
 LOCDD0C               1   $    DD0C        56588
 VAPP_TEST_I3          2   $    DD0D        56589
 VAPP_TEST_IBMOVE      2   $    DD27        56615
 LOCDD29               1   $    DD29        56617
 VAPP_TEST_IBITS       1   $    DD2B        56619
 LOCDD34               1   $    DD34        56628
 VAPP_STATS            1   $    DD41        56641
 LOCDD69               1   $    DD69        56681
 LOCDD8F               1   $    DD8F        56719
 LOCDDB0               1   $    DDB0        56752
 LOCDDBA               1   $    DDBA        56762
 LOCDDDD               1   $    DDDD        56797
 LOCDDDE               1   $    DDDE        56798
 LOCDDE3               2   $    DDE3        56803
 ZERO_TIMES            1   $    DDE9        56809
 ZERO_SCORES           1   $    DDED        56813
 LOCDDF1               1   $    DDF1        56817
 LOCDDF3               2   $    DDF3        56819
 LOCDDF7               1   $    DDF7        56823
 LOCDDFB               1   $    DDFB        56827
 LOCDDFD               1   $    DDFD        56829
 LOCDDFF               1   $    DDFF        56831
 LOCDE11               3   $    DE11        56849
 LOCDE1B               3   $    DE1B        56859
 LOCDE33               1   $    DE33        56883
 LOCDE46               1   $    DE46        56902
 LOCDE6B               2   $    DE6B        56939
 LOCDE76               1   $    DE76        56950
 LOCDE8C               1   $    DE8C        56972
 LOCDE9C               1   $    DE9C        56988
 LOCDEAB               1   $    DEAB        57003
 LOCDEB3               1   $    DEB3        57011
 LOCDED8               1   $    DED8        57048
 LOCDEE6               1   $    DEE6        57062
 LOCDEEE               1   $    DEEE        57070
 LOCDEF0               1   $    DEF0        57072
 LOCDEF2               1   $    DEF2        57074
 LOCDEFF               1   $    DEFF        57087
 LOCDF08               1   $    DF08        57096
 VAPP_RTS              3   $    DF09        57097
 VAPP_CENTRE_HALT      1   $    DF0D        57101
 LOCDF12               1   $    DF12        57106
 VAPP_DIGIT_LZ         2   $    DF19        57113
 VAPP_DIGIT            3   $    DF1F        57119
 LOCDF24               1   $    DF24        57124
 VAPP_VJSR_AX         17   $    DF39        57145
 VAPP_SCLSTAT_A_73     1   $    DF4A        57162
 VAPP_SCLSTAT_A_Y     11   $    DF4C        57164
 VAPP_VCENTRE_2        5   $    DF53        57171
 VAPP_A_X_Y_0          5   $    DF57        57175
 VAPP_A_X              2   $    DF59        57177
 INC_VI.WORD          10   $    DF5F        57183
 LOCDF69               1   $    DF69        57193
 VAPP_SCALE_A_0       11   $    DF6A        57194
 VAPP_SCALE_A_Y        4   $    DF6C        57196
 VAPP_LDRAW_A_X_Y      1   $    DF73        57203
 VAPP_LDRAW_A_X       19   $    DF75        57205
 LOCDF7B               1   $    DF7B        57211
 LOCDF89               1   $    DF89        57225
 LOCDF92               1   $    DF92        57234
 LOCDFAC               1   $    DFAC        57260
 VAPP_MULTDIG_Y_A      9   $    DFB1        57265
 LOCDFBB               1   $    DFBB        57275
 LOCDFCD               1   $    DFCD        57293
 LOCDFDC               1   $    DFDC        57308
 SPINNER_SINE          2   $    DFE4        57316
 LOCDFF8               -   $    DFF8        57336
 LASTBYTE              1   $    DFF9        57337
 CPUVECTORS            1   $    DFFA        57338
 VECTOR_NMI            -   $    DFFA        57338
 VECTOR_RESET          -   $    DFFC        57340
 VECTOR_IRQ_BRK        -   $    DFFE        57342

String Name      Ref Cnt   Value

    (No data recorded)

Macro Name       Exp Cnt

 PCADDR                6
